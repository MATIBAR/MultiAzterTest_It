   1. Kapitulua Eredu linealak eta ebazpide graﬁkoa Ikerkuntza Operatiboaren barnean programazio lineala arlo garrantzitsua da. Tek- nika matematiko horretako metodoek murrizketak dituzten optimizazio-linealeko problemen soluzio optimoa lortzea ahalbidetzen dute. Horrelako problemak prak- tikan kontestu desberdinetan sortzen dira, mugatuak diren baliabideak zenbait jar- dueren artean banatu behar direnean. Asko dira programazio linealaren bidez adieraziak eta ebatziak izan daitezkeen egoerak, hala nola beharrei baliabideak esleitzea, ekoizpenaren plangintza egitea, ekoiztutako produktuen garraioa anto- latzea iturburuetatik helburuetara eramateko, nahaste-problemak etab. Programazio linealak eredu matematiko lineal bat erabiltzen du ebatzi beha- rreko problema adierazteko. Lineal adjektiboa erabiltzen da ereduaren funtzio guztiek izaera lineala dutelako. 1.1 Eredu lineala Problema lineal batean funtzio lineal bat optimizatu  (maximizatu edo minimizatu) behar da, problemaren aldagaiek inekuazio linealen sistema bat bete behar dute- larik. Honelakoa da eredu lineala: opt z = c T x (1.1) hauen mende Ax ≤ > b (1.2) x ≥ 0 (1.3) 1  2 1. Eredu linealak eta ebazpide graﬁkoa Optimizatu beharreko funtzio lineala (1.1) da eta helburu funtzioa esaten zaio; problemaren aldagaiek bete beharreko inekuazio linealen sistema  (1.2) da eta mu- rrizketa esaten zaie, eta (1.3) ez-negatibotasunaren murrizketak dira. Eredu linealean agertzen diren elementuak ondokoak dira. • x bektorea erabaki-aldagaien bektorea da, eta n osagai ditu. • cT bektorea prezio-bektorea edo kostu-bektorea da, eta n osagai ditu. • b bektorea baliabide-bektorea da, eta m osagai ditu. • A matrizea koeﬁziente teknologikoen matrizea da, eta m errenkada eta n zutabe ditu. Matrizeko aij elementu bakoitzak j, j = 1, . . . , n jarduera unitate bat egiteko behar den i, i = 1, . . . , m baliabidearen unitate kopurua adierazten du. Eredu linealean cT , b eta A parametro ezagunak dira; ez ordea x bektorea. Hain zuzen ere, b bektoreko baliabideak modu optimoan esleituak izateko, x erabaki-aldagaien balioak aurkitzean datza problema. 1.2 Eredu lineala idazteko formak Aurreko atalean deﬁnitutako eredu lineala forma desberdinetan adierazia izan dai- teke. 1. Bektoreen tamaina eta koeﬁziente teknologikoen matrizearena kontuan har- tuz, opt z = c1x1 + c2x2 + · · · + cnxn hauen mende a11x1 + a12x2 + · · · + a1nxn ≤ > b1 a21x1 + a22x2 + · · · + a2nxn ≤ > b2 .. . .. . . .. .. . .. . am1x1 + am2x2 + · · · + amnxn ≤ > bm x1, x2, . . . , xn ≥ 0 OpenCourseWare, UPV/EHU  1.3. Eredu lineala sortzen 3 2. Matrize-forman. opt z = (c1, . . . , cn)      x1 .. . xn      hauen mende         a11 a12 . . . a1n a21 a22 . . . a2n .. . .. . . .. .. . am1 am2 . . . amn                 x1 x2 .. . xn         ≤ = ≥         b1 b2 .. . bm         (x1, x2, · · · , xn) T ≥ (0, 0, · · · , 0)T 3. a1 , a2, . . . , an bektoreak A matrizearen zutabeak izanik, opt z = c1x1 + c2x2 + · · · + cnxn hauen mende a1 x1 + a2x2 + · · · + anxn ≤ > b xj ≥ 0 , j = 1, . . . , n 1.3 Eredu lineala sortzen Sistema erreal bat programazio linealeko teknikak erabiliz aztertu nahi denean, sistema adieraziko duen eredua sortzea da eman behar den lehen urratsa. Eredu lineala sortzea urrats garrantzitsua da, programazio linealeko tekniken bidez kal- kulatuko den soluzio optimoa eraikitako eredu lineal horren mende baitago. Dena den, eredua eraikitzea urrats zaila izan daiteke, horretarako diseinatutako metodo edo erregela zehatzik ez dagoelako; ereduak eraikiz ikasten da ereduak eraikitzen. Horretarako lagungarri izan daiteke zenbait adibide praktiko aztertzea. 1. adibidea. Garraio-problema Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  4 1. Eredu linealak eta ebazpide graﬁkoa Enpresa batek bizikletak ekoizten ditu H1, H2 eta H3 hirietan dituen hiru su- kurtsaletan. Hiri horietako bakoitzean hilean 1000, 2100 eta 1500 bizikleta ekoiz- teko ahalmena dute, hurrenez hurren. Enpresak lau bezerorentzat egiten du lan, A, B, C eta D, eta bezero horiek hilero 800, 1100, 900 eta 1300 bizikleta erosteko eskaria egiten diote, hurrenez hurren. Ondoko taulan bizikleta bakoitza garraiatzeak sortuko duen kostua zehazten da. Garraio-kostua bizikleta ekoitzia izan den herritik bezeroarengana iristeko dagoen distantziaren mende kalkulatua izan da. A B C D H1 10 8 10 13 H2 19 6 15 16 H3 14 8 9 6 Bizikleten garraioa antolatzen lagunduko duen eredu lineala idatzi behar da. Ereduak enpresaren eskaintzen eta bezeroen eskarien informazioa jaso beharko ditu eta garraioa kostu minimoan egingo dela ziurtatu beharko du. • Erabaki-aldagaiak. xij: Hi hiritik j bezeroarengana hilero garraiatuko den bizikleta kopurua, i = 1, 2, 3, j = A, B, C, D. • Helburu funtzioa. Garraio-kostua minimizatzea. min z = 10x1A + 8x1B + 10x1C + 13x1D + 19x2A + 6x2B + 15x2C+ +16x2D + 14x3A + 8x3B + 9x3C + 6x3D • Murrizketak. Sukurtsaletako eskaintza eta bezeroen eskaria. – Hirietako sukurtsalen ekoizpen-ahalmena ez da gainditu behar. x1A + x1B + x1C + x1D ≤ 1000 x2A + x2B + x2C + x2D ≤ 2100 x3A + x3B + x3C + x3D ≤ 1500 OpenCourseWare, UPV/EHU  1.3. Eredu lineala sortzen 5 – Bezeroen eskaria zerbitzatu egin behar da. x1A + x2A + x3A ≥ 800 x1B + x2B + x3B ≥ 1100 x1C + x2C + x3C ≥ 900 x1D + x2D + x3D ≥ 1300 – Ez-negatibotasunaren murrizketa. Aldagaiek balio positiboak hartu behar dituzte, xij ≥ 0, i = 1, 2, 3, j = A, B, C, D. 2. adibidea. Ekoizpen-problema Enpresa batek hiru pieza mota ekoizten ditu, P1, P2 eta P3, eta ekoizpenerako A, B eta C makinak erabiltzen ditu. Makinak erabilgarri dauden ordu kopurua eta makina bakoitzaren ekoizpen-kostua ondoko taulan zehazten dira. Erabilgarritasuna Ekoizpen-kostua (ordu/aste) (euro/ordu) A makina 1000 6 B makina 1000 4 C makina 1000 5 Pieza bakoitza ekoizteko makina bakoitzean egon beharko duen ordu kopurua zehazten da ondoko taulan: P1 P2 P3 A makina 1 2 3 B makina 2 3 1 C makina 1 1 1 Piezen ekoizpenean M1 eta M2 materialak erabiliko dira. Material horiek kan- titate mugatuan daude, 1000 kg eta 1200 kg, hurrenez hurren. Ondoko taulan zehazten da pieza unitate bakoitzaren ekoizpenean behar den material kantitatea. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  6 1. Eredu linealak eta ebazpide graﬁkoa Pieza M1 (kg/pieza) M2 (kg/pieza) P1 1 2 P2 1 3 P3 3 1 M1 materialaren kostua 1.5 eurokoa da kiloko, eta M2 materialarena 3 euro- koa. Piezak ekoitziak izan direnean, salduak izango dira 50, 56 eta 70 eurotan, hurrenez-hurren. Enpresak asteroko ekoizpena antolatu nahi du irabazi maximoa lortzeko. • Erabaki-aldagaiak. xj: enpresak astero ekoitziko duen Pj, j = 1, 2, 3, pieza kopurua. • Helburu funtzioa. Irabazia maximizatzea. * Salmenta-prezioa = 50x1 + 56x2 + 70x3 * Materialaren-kostua = (1 × 1.5 + 2 × 3)x1 + (1 × 1.5 + 3 × 3)x2 + (3 × 1.5 + 1 × 3)x3 * Ekoizpen-kostua = (1 × 6 + 2 × 4 + 1 × 5)x1 + (2 × 6 + 3 × 4 + 1 × 5)x2 + (3 × 6 + 1 × 4 + 1 × 5)x3 Irabazia honela kalkulatuko da: ”Salmenta-prezioa” − “Materialaren kostua” − “Ekoizpen-kostua” Kalkuluak eginez ereduaren helburu funtzioa lortuko da. max z = 23.5x1 + 16.5x2 + 35.5x3 • Murrizketak. Erabilgarri dauden makina-ordu kopuruek eta material kan- titateak murrizten dute ekoizpena. x1 + 2x2 + 3x3 ≤ 1000 (A makina) 2x1 + 3x2 + x3 ≤ 1000 (B makina) x1 + x2 + x3 ≤ 1000 (C makina) x1 + x2 + 3x3 ≤ 1000 (M1 materiala) 2x1 + 3x2 + x3 ≤ 1200 (M2 materiala) OpenCourseWare, UPV/EHU  1.3. Eredu lineala sortzen 7 • Ez-negatibotasunaren murrizketa. Pieza kopuru positiboa ekoitziko da, x1, x2, x3 ≥ 0. 3. adibidea. Nahasketen problema Erreﬁnategi batean petrolio-gordina tratatu eta hiru osagaitan banatzen da, on- doren, osagai horiek nahasiz A eta B gasolinak lortzeko. Gasolinen ekoizpenera- ko erabilgarri dagoen osagai bakoitzeko upel kopurua eta upel bakoitzaren kostua eurotan honako taulan ematen dira: Upel kopurua Kostua O1 osagaia 2000 10 O2 osagaia 3000 8 O3 osagaia 1000 12 A eta B gasolinen kalitate-maila egokia izan dadin, hiru osagaiak honela naha- si behar dira. • A gasolinak duen O1 osagaiaren kopurua gutxienez %30 da, eta O2 osagaia gutxienez %20; O3 osagaia, aldiz, gehienez %30 izango du. • B gasolinak bere konposizioan osagai bakoitzetik gutxienez %25 izan behar du. Hiru osagaiak nahasiz lortuko diren A eta B gasolinak upeletan salduko dira, 40 eta 35eko salmenta-prezioan, hurrenez hurren. Gasolinen ekoizpena antolatzea da helburua, ekoizpenetik lortutako irabaziak maximizatzeko. • Erabaki-aldagaiak. xij: j gasolina sortzeko Oi osagai bakoitzetik erabiliko den upel kopurua, j = A, B, i = 1, 2, 3. • Helburu funtzioa. Irabazia maximizatzea. * Gasolinen prezioa = 40(x1A + x2A + x3A) + 35(x1B + x2B + x3B) * Osagaien kostua = 10(x1A + x1B) + 8(x2A + x2B) + 12(x3A + x3B) Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  8 1. Eredu linealak eta ebazpide graﬁkoa Irabazia kalkulatzeko “Gasolinen prezioa” − “Osagaien kostua” egin behar da, eta honako helburu funtzioa lortuko da: max z = 30x1A + 32x2A + 28x3A + 25x1B + 27x2B + 23x3B • Murrizketak. Hiru osagaietatik erabilgarri dauden upel kopuruak eta ga- solina bakoitzaren kalitatea bermatuko duten konposiziorako murrizketek ekoizpena baldintzatuko dute. – Osagaien kantitateei dagozkien murrizketak. x1A + x1B ≤ 2000 (O1 osagaia) x2A + x2B ≤ 3000 (O2 osagaia) x3A + x3B ≤ 1000 (O3 osagaia) – Gasolinen konposizioa. x1A ≥ 30 100 (x1A + x2A + x3A) x2A ≥ 20 100 (x1A + x2A + x3A) x3A ≤ 30 100 (x1A + x2A + x3A) x1B ≥ 25 100 (x1B + x2B + x3B) x2B ≥ 25 100 (x1B + x2B + x3B) x3B ≥ 25 100 (x1B + x2B + x3B) • Ez-negatibotasunaren murrizketa. xij ≥ 0, i = 1, 2, 3, j = A, B 4. adibidea. Dieta-problema Nutrizio-zentro batean A, B, C eta D bitaminak kantitate egokian izango di- tuen dieta prestatzen ari dira. Dietak bitamina mota bakoitzetik kantitate hauek ziurtatu behar ditu: A bitaminatik gutxienez 25 miligramo, B bitaminatik 25 eta 30 miligramo artean, C bitaminatik gutxienez 22 miligramo eta D bitaminatik gehienez 17 miligramo. Bitamina horiek lau elikagaitatik lortzen dira. Ondoko taulan agertzen da eli- kagai gramo bakoitzean dagoen bitaminen miligramo kopurua eta elikagai gra- moaren kostua. OpenCourseWare, UPV/EHU  1.3. Eredu lineala sortzen 9 Bitaminak (mg/g) Kostua A B C D (euro/g) E1 elikagaia 2 1 0 1 0.014 E2 elikagaia 1 2 1 2 0.009 E3 elikagaia 1 0 2 0 0.013 E4 elikagaia 1 2 1 1 0.016 Beharrezkoak diren bitamina kantitateak bermatuko dituen kostu minimoko dieta diseinatu nahi da. Honela idatz daiteke problema adierazten duen eredu lineala. • Erabaki-aldagaiak. xj: dietak izango duen Ej elikagaiaren gramo kantitatea, j = 1, 2, 3, 4. • Helburu funtzioa. Dietaren kostua minimizatzea. min z = 0.014x1 + 0.009x2 + 0.013x3 + 0.016x4 • Murrizketak. Dietak bitamina kantitate egokiak bermatu behar ditu. 2x1 + x2 + x3 + x4 ≥ 25 (A bitamina) x1 + 2x2 + 2x4 ≥ 25 (B bitamina) x1 + 2x2 + 2x4 ≤ 30 (B bitamina) x2 + 2x3 + x4 ≥ 22 (C bitamina) x1 + 2x2 + x4 ≤ 17 (D bitamina) • Ez-negatibotasunaren murrizketa. xj ≥ 0, j = 1, 2, 3, 4 5. adibidea. Mozketa-problema Enpresa batean 5 metroko zabalera eta 20 metroko luzera duten paper-bobinak ekoizten dira. Bezeroengandik zabalera txikiagoko paper-bobinen eskariak jaso ohi direnez, eskatutako neurrietara moztu egin behar izaten dira. Datorren hilabe- terako ondoko eskariak jaso dira: Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  10 1. Eredu linealak eta ebazpide graﬁkoa Eskaria Zabalera (bobinak) 3 m 100 2 m 100 1.5 m 300 1 m 150 Mozketa antolatu behar da 5 metroko zabalerako paper-bobina kopuru mini- moa moztuz bezeroen eskariak zerbitzatzeko. Paper-bobinak bezeroek eskatutako zabaleretara mozteko aukera desberdinak daude. Honako taulan laburbiltzen dira 5 metroko zabalerako bobinak eskatutako zabaleretan mozteko dauden 7 aukerak: Mozteko Zabalera aukera 3m 2m 1.5m 1m 1 1 1 0 0 2 1 0 0 2 3 0 2 0 1 4 0 1 2 0 5 0 1 0 3 6 0 0 2 2 7 0 0 0 5 • Erabaki-aldagaiak. xj: j mozteko aukeraren arabera moztutako paper-bobina kopurua, j = 1, . . . , 7. • Helburu funtzioa. Moztutako paper-bobina kopurua minimizatzea. min z = x1 + x2 + x3 + x4 + x5 + x6 + x7 OpenCourseWare, UPV/EHU  1.3. Eredu lineala sortzen 11 • Murrizketak. Bezeroen eskariak zerbitzatu behar dira. x1 + x2 ≥ 100 x1 + 2x3 + x4 + x5 ≥ 100 2x4 + 2x6 ≥ 300 2x2 + x3 + 3x5 + 2x6 + 5x7 ≥ 150 • Ez-negatibotasunaren murrizketa. xj ≥ 0, j = 1, . . . , 7. 5 metroko zabalerako paper-bobina moztean zentimetro batzuk alferrik galdu- ko direla onartzen bada, mozketarako beste aukera batzuk deﬁni daitezke. Moz- keta egitean, gehienez 0.5 metroko paper-soberakina sortuko duten mozketarako aukerak ondoko taulakoak dira: Mozteko Zabalera Papera aukera 3m 2m 1.5m 1m soberan 1 1 1 0 0 0 2 1 0 1 0 0.5m 3 1 0 0 2 0 4 0 2 0 1 0 5 0 1 2 0 0 6 0 1 1 1 0.5m 7 0 1 0 3 0 8 0 0 3 0 0.5m 9 0 0 2 2 0 10 0 0 1 3 0.5m 11 0 0 0 5 0 Kasu honetan, paper-bobinak mozteko 11 aukera desberdin daude, eta aukera bakoitzaren arabera moztuko den paper-bobina kopurua adieraziko duen aldagai bana deﬁnituko dugu, hau da, 11 erabaki-aldagai. Aldagai horiekin honako eredu lineala planteatuko dugu: Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  12 1. Eredu linealak eta ebazpide graﬁkoa min z = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 hauen mende x1 + x2 + x3 ≥ 100 x1 + 2x4 + x5 + x6 + x7 ≥ 100 x2 + 2x5 + x6 + 3x8 + 2x9 + x10 ≥ 300 2x3 + x4 + x6 + 3x7 + 2x9 + 3x10 + 5x11 ≥ 150 x1, . . . , x11 ≥ 0 1.4 Ebazpide graﬁkoa Problema lineal guztiak graﬁkoki ebatzi ezin diren arren, guztiek badute inter- pretazio geometrikoa. Eredu linealen ebazpide graﬁkoa aztertzea interesgarria da programazio linealean garrantzitsuak diren kontzeptuak graﬁkoki ikus daitezkee- lako, hala nola soluzio baten hobekuntza, soluzio motak, mutur-puntuak. Inekuazio-sistemaren soluzioen multzoa ekuazio bakoitza berdintzaz marraz- tuz eta ondoren inekuazioak adierazitako espazioerdia erabakiz lortzen da. Hel- buru funtzioa paraleloak diren zuzenen familia bat da, zuzen bat z-ren balio ba- koitzerako. Zuzen hori soluzioen multzoaren gainean desplazatuz, z-ren balioa optimizatu egiten da, eta optimoa lortuko da zuzena soluzioen multzoaren muga- raino iristen denean. Helburu funtzioaren balio optimoa beti soluzioen multzoaren erpin batean aurkitzen da. Atal honetan, bi aldagaiko eredu lineal batzuren ebazpide graﬁkoa aztertuko dugu. Adibidea. Soluzio optimo bakarra duen problema Har dezagun ondoko eredu lineala: max z = 6x1 + 3x2 hauen mende 2x1 + 4x2 ≤ 8 −x1 + 4x2 ≤ 4 x1 − x2 ≤ 2 x1, x2 ≥ 0 OpenCourseWare, UPV/EHU  1.4. Ebazpide graﬁkoa 13 Murrizketek deﬁnitutako soluzioen multzoan helburu funtzioaren balioa ma- ximizatuko duten x1 eta x2 aldagaien balioak aurkitzean datza problema. Soluzioen multzoa koordenatu-sistema batean marraz daiteke. Ereduaren mu- rrizketa bakoitza espazioerdi bat da. Adibidez, ereduaren lehenengo murrizketak deﬁnitutako espazioerdia graﬁkoki adierazteko 2x1 + 4x2 = 8 zuzena marraz- tuko dugu. Zuzen horrek planoa bi espazioerditan banatzen du, eta horietako bat da murrizketari dagokiona, zuzena barne, murrizketak berdintza ere badue- lako. Adierazpen graﬁkoan, gezien bidez erakusten da murrizketa bakoitzari da- gokion espazioerdia. Zuzenak deﬁnitutako bi espazioerdien artean murrizketari zein dagokion erabakitzeko, planoko puntu bat hartu eta murrizketa betetzen duen egiaztatu besterik ez da egin behar. Ereduko murrizketa guztiak graﬁkoki adiera- ziz eta ez-negatibotasunaren murrizketak kontuan hartuz, problemaren soluzioen multzoa lortuko da. x1 x2 O A B C D 2x 1 + 4x2 = 8 −x1 + 4x2 = 4 x1 − x2 = 2 max Aurreko irudian margotutako eskualdea problemaren soluzioen multzoa da; eskualde horretan dauden puntuek problemaren murrizketa guztiak, ez- negatibotasunaren murrizketak barne, betetzen dituzte. OABCD poligonoa multzo ganbila da. Poligonoaren erpinak kalkula daitezke ekuazio-sistemak askatuz. O puntua koordenatu-sistemaren jatorria da. A = (0, 1) puntua −x1 + 4x2 = 4 zuzenaren eta ordenatu ardatzaren arteko ebaki-puntua da. D = (2, 0) puntua x1 − x2 = 2 zuzenaren eta absiza ardatzaren arteko ebaki-puntua da. B = ( 4 3 , 4 3 ) puntua −x1 + 4x2 = 4 zuzenaren eta 2x1 + 4x2 = 8 zuzenaren arteko ebaki-puntua da. C = ( 8 3 , 2 3 ) puntua x1 − x2 = 2 zuzenaren eta 2x1 + 4x2 = 8 zuzenaren arteko ebaki-puntua da. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  14 1. Eredu linealak eta ebazpide graﬁkoa Helburu funtzioa soluzioen eskualdearen gainetik desplazatzen dugunean, koordenatu- sistemaren jatorritik urrunduz, z-ren balioa hazi egiten da. Desplazamendua es- kualdearen mugaraino iritsi arte egin behar da z optimizatzeko. Horrela, egiazta daiteke problemaren soluzio optimoa C puntuan aurkitzen dela, eta helburu fun- tzioak z ∗ = 18 balio optimoa lortuko duela bertan. Adibidea. Soluzio optimo anizkoitza duen problema. Har dezagun ondoko eredu lineala: max z = x1 + x2 hauen mende x1 + x2 ≤ 8 −4x1 + 4x2 ≤ 8 2x1 − x2 ≤ 6 x1, x2 ≥ 0 Problemari dagokion soluzioen multzoa graﬁkoki adierazteko aurreko adibi- dean azaldu bezala egiten da. Oraingoan, problemaren soluzioen multzoa graﬁ- koan margotuta ikusten den OABCD poligonoa da. B = (3, 5) puntua x1 + x2 = 8 zuzenaren eta −4x1 + 4x2 = 8 zuzenaren arteko ebaki-puntua da. C = ( 14 3 , 10 3 ) puntua x1 + x2 = 8 zuzenaren eta 2x1 − x2 = 6 zuzenaren arteko ebaki-puntua da. x1 x2 O A B C D x1 + x2 = 8 −4x1 + 4x2 = 8 2x1 − x2 = 6 max OpenCourseWare, UPV/EHU  1.4. Ebazpide graﬁkoa 15 Helburu funtzioa soluzioen eskualdearen gainetik mugaraino iritsi arte despla- zatuz optimora iristea lortuko da. B eta C erpinak eta BC segmentuko puntuak problemaren soluzio optimoak dira. Helburu funtzioaren balio optimoa z∗ = 8 da. Adibidea. Problema bideraezina. Har dezagun ondoko eredu lineala. max z = x1 + x2 hauen mende 2x1 + x2 ≤ 5 x1 − x2 ≥ 4 x1, x2 ≥ 0 Problemaren murrizketa guztiak graﬁkoki marraztuz egiazta daiteke ez dagoe- la murrizketa guztiak betetzen dituen punturik. Hortaz, problemak ez du soluzio- rik; bideraezina da. x1 x2 2x1 + x2 = 5 x1 − x2 = 4 Adibidea. Soluzioen eskualde bornegabea. Soluzio bornegabea. Har dezagun ondoko eredu lineala: Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  16 1. Eredu linealak eta ebazpide graﬁkoa max z = x1 + 2x2 hauen mende x1 + 2x2 ≥ 2 −2x1 + x2 ≤ 4 x1, x2 ≥ 0 Graﬁkoan ikusten den bezala, soluzioen eskualdea bornegabea da, eta helburu funtzioa adierazten duen zuzena etengabe desplaza daiteke. Hortaz, problema honen soluzio optimoa bornegabea dela esaten da. x1 x2 x1 + 2x2 = 2 −2x1 + x2 = 4 max Adibidea. Soluzioen eskualde bornegabea. Soluzio bornatua. Izan bedi honako eredu lineala: OpenCourseWare, UPV/EHU  1.4. Ebazpide graﬁkoa 17 min z = x1 + 2x2 hauen mende x1 + 2x2 ≥ 2 −2x1 + x2 ≤ 4 x1, x2 ≥ 0 Adibide honetan, soluzioen multzoa bornegabea da, baina soluzio optimo bor- natua aurki daiteke, helburu funtzioa soluzioen eskualdearen gainetik koordenatu- ardatzen jatorriratz desplazatuz mugara iritsi arte. Horrela, egiaztatu ahal izango dugu soluzio optimoak A = (0, 1) puntua, B = (2, 0) puntua eta AB segmentuko puntuak direla, eta balio optimoa z∗ = 2 dela. x1 x2 A B x1 + 2x2 = 2 −2x1 + x2 = 4 min Eredu linealak ebazterakoan aurki ditzakegun soluzio mota guztiak ikusi di- tugu adibideen bitartez. Soluzio mota bakoitza modu aljebraikoan identiﬁkatuko duten baldintzak 2. Kapituluan aztertuko dira. Bertan, eredu linealak ebazteko erabiltzen den simplex algoritmoa aztertuko da. A. Eranskinean espazioerdien eta multzo ganbilen deﬁnizio eta propietateak modu zehatzagoan azalduak daude. 2. Kapituluan frogatuko da eredu lineal baten soluzio optimoa soluzioen multzo ganbilaren mutur-puntu batean aurkitzen dela. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  18 1. Eredu linealak eta ebazpide graﬁkoa OpenCourseWare, UPV/EHU  2. Kapitulua Simplex metodoa Bi edo hiru aldagai dituzten eredu linealak graﬁkoki ebatz daitezke. 1. Kapi- tuluan bi aldagaiko eredu linealen ebazpen graﬁkoa aztertu dugu. Hiru aldagai baino gehiago dituzten eredu linealak ebazteko ezin da metodo graﬁkoa erabili, prozedura aljebraiko bat erabiltzea beharrezkoa gertatuko delarik. Programazio linealeko problemen zenbakizko soluzioa kalkulatzeko simplex algoritmoa argi- taratu zuen 1949. urtean George B. Dantzig-ek. Programazio linealerako teoria eredu linealaren ondoko forman oinarrituko da. Forma estandarra. Eredu lineal bat forma estandarrean dagoela esaten da baldin murrizketa guztiak = modukoak badira eta b bektorearen osagai guztiak eta ereduaren aldagai guztiak ez-negatiboak badira, hau da, max(min)z = c T x hauen mende Ax = b x ≥ 0 Helburua maximizatzea bada, ereduaren maximizatze-forma estandarra dau- kagula esaten da, eta minimizatzea bada minimizatze-forma estandarra. 2.1 Aldaketak ereduan Problema linealak ebazteko prozesuan lehenengo urratsa eredua forma estanda- rrera pasatzea izango da. Eredu gehienak ez dira hasieratik forma estandarrean 19  20 2. Simplex metodoa idatzita egoten; baina, helburu funtzioan, murrizketetan eta aldagaietan aldaketak egin daitezke, forma estandarrera egokitzeko. 1. Helburu funtzioa. z funtzioaren minimoa kalkulatzea −z funtzioaren maximoa kalkulatzearen baliokidea da. min z = n j=1 cjxj ⇐⇒ max (−z) = n j=1 −cjxj Adibidez, min z = 3x1 − 5x2 eta max (−z) = −3x1 + 5x2 balioki- deak dira; z balioa minimo egingo duten x1 eta x2 aldagaien balio berberek egingo dute −z maximo, min z = − max (−z) beteko delarik. 2. Murrizketak. (a) Eredu lineal baten murrizketa guztiak noranzko berean idatziak izan daitezke ondokoa betetzen delako: n j=1 aijxj ≥ bi ⇐⇒ n j=1 −aijxj ≤ −bi Adibidez, 2x1 + 3x2 ≤ −2 ekuazioan desberdintzaren bi aldeak −1 balioaz biderkatuz gero, −2x1 − 3x2 ≥ 2 lortuko da. (b) Murrizketak berdintzaz idatziak izan daitezke. n j=1 aijxj ≤ bi ⇐⇒ n j=1 aijxj + y = bi n j=1 aijxj ≥ bi ⇐⇒ n j=1 aijxj − y = bi Aurreko bi aldaketetan erabili den y aldagaiak nasaitze-aldagaia izena du; bi kasuetan y aldagaia zero baino handiagoa edo berdina da. Adibidez, x1 − 4x2 ≤ 4 eta x1 − 4x2 + y = 4 murrizketak baliokideak dira, y aldagaia ez-negatiboa izanik. OpenCourseWare, UPV/EHU  2.1. Aldaketak ereduan 21 (c) Berdintzaz betetzen den murrizketa oro bi murrizketen bidez adierazia izan daiteke modu honetan: n j=1 aijxj = bi ⇐⇒ n j=1 aijxj ≤ bi eta n j=1 aijxj ≥ bi Adibidez, −2x1 + x2 = 2 murrizketa idaztearen baliokidea da ondoko beste biak idaztea: −2x1 + x2 ≤ 2 eta −2x1 + x2 ≥ 2. 3. Aldagaiak. Aldagaiek ez-negatibotasunaren murrizketa betetzeko, aldaketa hauek era- bili beharko dira. • xj ≤ 0 bada, xj = −x ′ j aldagai-aldaketa egin daiteke, non x ′ j ≥ 0 den. • xj aldagaia zeinuz murriztugabea bada, bi aldagai positiboren arteko diferentzia moduan idatz daiteke horrela. xj = x ′ j − x ′′ j , non x ′ j , x ′′ j ≥ 0. – x′ j > x ′′ j bada, xj > 0 da. – x′ j < x ′′ j bada, xj < 0 da. – x′ j = x ′′ j bada, xj = 0 da. Adibidea. Aurreko baliokidetasunak erabiliz ondoko eredu lineala maximizatze- forma estandarrean idatziko dugu: min z = x1 + 2x2 + x3 hauen mende x1 + x2 − x3 ≥ 2 x1 − 2x2 + 5x3 ≤ −1 x1 + x2 + x3 = 4 x1 ≥ 0 , x2 ≤ 0, x3 : murriztugabea • Helburu funtzioa. Maximizatze-forman honela jarriko dugu: − max (−z) = −x1 − 2x2 − x3 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  22 2. Simplex metodoa • Murrizketak. Lehenengo murrizketan x4 nasaitze-aldagaia kenduko dugu, x1 + x2 − x3 − x4 = 2. Bigarren murrizketan x5 nasaitze-aldagaia gehituko dugu, x1 − 2x2 + 5x3 + x5 = −1. Desberdintzaren eskuineko atala positibo bihurtzeko, bi atalak −1 balioaz biderkatuko ditugu, −x1 + 2x2 − 5x3 − x5 = 1. Hirugarren murrizketa forma estandarrean emana dator: x1 + x2 + x3 = 4. • Aldagaiak. x1 ≥ 0 aldagaiak ez-negatibotasunaren murrizketa betetzen du. x2 ≤ 0 aldagairako x′ 2 = −x2 aldaketa egingo dugu, eta murriztugabe dagoen x3 aldagairako x3 = x′ 3 − x ′′ 3 aldaketa egingo dugu. Aldaketa horiek guztiak egin eta gero, eredu lineala maximizatze-forma estanda- rrean ondokoa da: − max (−z) = −x1 + 2x ′ 2 − x ′ 3 + x ′′ 3 + 0x4 + 0x5 hauen mende x1 − x ′ 2 − x ′ 3 + x ′′ 3 − x4 = 2 −x1 − 2x ′ 2 − 5x ′ 3 + 5x ′′ 3 − x5 = 1 x1 − x ′ 2 + x ′ 3 − x ′′ 3 = 4 x1, x ′ 2, x ′ 3, x ′′ 3 , x4, x5 ≥ 0 2 Nasaitze-aldagaiak gehitzeak edo kentzeak ez du helburu funtzioa aldatu behar. Hori dela eta, nasaitze- aldagaiek helburu funtzioan zero koeﬁzientea izango dute. OpenCourseWare, UPV/EHU  2.2. Eredu linealen soluzioak 23 2.2 Eredu linealen soluzioak Ikusi dugun bezala, eredu lineal guztiak forma estandarrean idatziak izan daitezke. Kapitulu honetan azalduko dugun simplex algoritmoa maximizatzeko diseinatua izan da, eta horregatik, hemendik aurrera forma estandarra aipatzen dugunean, maximizatze-forma estandarraz ari garela ulertu behar da; gogora dezagun forma estandarrean b bektorearen osagaiak ez-negatiboak direla. Izan bedi ondoko eredu lineala forma estandarrean: max z = c T x hauen mende Ax = b x ≥ 0 non x eta c bektoreak n × 1 tamainakoak diren, b bektorea m × 1 tamainakoa eta A matrizea m × n tamainakoa. Demagun m < n betetzen dela, eta A matrizearen heina m dela. Horrelako sistemek inﬁnitu soluzio dituzte. Helburu funtzioari balio optimoa emango dion soluzioa kalkulatzean datza problema. Ikus ditzagun simplex metodoaren garapenean erabiliko diren deﬁnizio hauek. 1. deﬁnizioa. Ax = b murrizketak betetzen dituen x bektorea eredurako soluzioa dela esaten da. 2. deﬁnizioa. Problemarako soluzio den x bektorea, hau da, Ax = b betetzen duena, bideragarria dela esaten da baldin x ≥ 0 bada. 3. deﬁnizioa. A matrizearen m zutabez osatutako B oinarri-matrize bat ema- nik, xB oinarriko soluzioa dela esaten da baldin BxB = b betetzen badu. Oinarrikoak ez diren aldagai guztiak 0 dira, xN = 0 (ikus A. Eranskina). Hortaz, oinarriko soluzioak zeroren desberdinak diren m osagai izango ditu gehienez. Gainera, xB bektorearen osagai guztiak ez-negatiboak badira, oinarriko so- luzio bideragarria esaten zaio. 4. deﬁnizioa. Oinarriko soluzio bideragarri bat endekatua dela esaten da bal- din oinarrikoa den aldagairen batek 0 balioa hartzen badu, hau da, 0 baino handiagoak diren m osagai baino gutxiago baditu. 0 baino handiagoak di- ren m osagai dituen oinarriko soluzio bideragarria ez-endekatua dela esaten da. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  24 2. Simplex metodoa 5. deﬁnizioa. Problema linealaren soluzio bideragarri guztien multzoari bi- deragarritasun-eskualdea edo soluzio bideragarrien multzo ganbila esaten zaio eta F hizkiaren bidez adierazten da. 6. deﬁnizioa. Problema linealaren soluzio optimoa x ∗ notazioaz adierazten da, eta helburu funtzioaren balio optimoa z∗ = cT x∗ notazioaz. 7. deﬁnizioa. Problema lineala bornegabea dela esaten da helburu funtziora- ko balio optimo ﬁniturik ez duenean, hau da, z ∗ → +∞ edo z∗ → −∞ denean. 8. deﬁnizioa. Problema lineal batek soluzio optimo anizkoitza duela esaten da soluzio optimo bat baino gehiago dituenean. Hemendik aurrera oinarriari egiten zaizkion aipamenetan oinarri-matrizeari buruz ari garela ulertuko da. Adibidea. Har dezagun ondoko eredu lineala forma estandarrean. max z = 3x1 + 6x2 + 5x3 + 4x4 + x5 hauen mende 2x1 + 8x2 + 3x3 + x4 + x5 = 6 x1 + x2 + 2x3 + x4 = 4 x1, x2, x3, x4, x5 ≥ 0 non c T = (3, 6, 5, 4, 1), x T = (x 1 , x2, x3, x4, x5) A =   2 8 3 1 1 1 1 2 1 0   , b =   6 4   A matrizearen heina 2 da, ezezagun kopurua baino txikiagoa. Hortaz, murriz- keten sistemak inﬁnitu soluzio ditu. Hala ere, oinarriko soluzio kopurua ﬁnitua da. Gogora dezagun oinarriko soluzioak kalkulatzeko B oinarri guztiak aukeratu behar direla A matrizeko zutabeen artean  (ikus A. Eranskina), eta honako sistema ebatzi behar dela: xB = B −1b, non xB oinarriko aldagaiez osatutako bektorea den. Hiru oinarri desberdine- tarako soluzioak kalkulatuko ditugu. OpenCourseWare, UPV/EHU  2.2. Eredu linealen soluzioak 25 1. A matrizeko lehenengo eta laugarren zutabeek osatutako matrizea aukera- tuz lortzen den B matrizea ez-singularra da, eta, ondorioz, oinarria. B =   2 1 1 1   Horrela, xB =   x1 x4   , N =   8 3 1 1 2 0   eta xN =      x2 x3 x5      Orduan, xB =   2 1 1 1   −1   6 4   −   2 1 1 1   −1   8 3 1 1 2 0        x2 x3 x5      (2.1) x2, x3 eta x5 aldagai askeei balio posible guztiak emanez kalkulatzen dira sistemaren inﬁnitu soluzioak. Kalkula ditzagun horietako bi. • (2.1) ekuazioan x2 = 0, x3 = 0 eta x5 = 0 balioak hartzen baditugu, kalkuluak eginez ondoko oinarriko soluzioa lortuko da: xB =   1 −1 −1 2     6 4   =   2 2   Lortu dugun x1 = 2, x4 = 2 oinarriko soluzioa bideragarria da, osagai negatiborik ez duelako. • (2.1) ekuazioan x2 = 0, x3 = 1 eta x5 = 0 balioak hartzen baditugu, kalkuluak eginez ondoko soluzioa lortuko da:   x1 x4   =   2 2   −   7 1 1 −6 1 −1        0 1 0      =   1 1   Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  26 2. Simplex metodoa Hau da, xT = (1, 0, 1, 1, 0) bektorea soluzioa da. Bideragarria da osa- gai negatiborik ez duelako. Dena den, ez da oinarriko soluzioa x3 aldagai askeak zeroren desberdina den balio bat hartzen duelako soluzio horretan. 2. A matrizeko lehenengo bi zutabeek osatutako B matrizea hartzen badugu, B =   2 8 1 1   oinarria da, eta aldagai aske guztiei zero balioa emanez, ondoko oinarriko soluzioa lortuko da: xB =   2 8 1 1   −1   6 4   =   − 1 6 4 3 1 6 − 1 3     6 4   =   13 3 − 1 3   Kalkulatu dugun oinarriko soluzioa ez da bideragarria, x2 = − 1 3 aldagaiak balio negatiboa hartzen duelako. 3. A matrizeko hirugarren eta bosgarren zutabeek osatutako matrizea hartuz, B =   3 1 2 0   oinarria da eta aldagai aske guztiei zero balioa emanez, ondoko oinarriko soluzioa lortuko da: xB =   3 1 2 0   −1   6 4   =   0 1 2 1 − 3 2     6 4   =   2 0   Soluzio hau bideragarria da. Horretaz gain, endekatua da oinarrikoa den aldagai batek zero balioa hartzen duelako, x5 = 0. 2 OpenCourseWare, UPV/EHU  2.3. Mutur-puntuak eta oinarriko soluzioak 27 2.3 Mutur-puntuak eta oinarriko soluzioak Eredu linealen soluzio graﬁkoan ikusi dugun bezala, soluzio bideragarrien multzo ganbileko mutur-puntu batean dago soluzio optimoa. Problemak soluzio optimo anizkoitza badu, horietako bat gutxienez mutur-puntua izango da. Hiru aldagai baino gehiago dituzten eredu linealak ebazteko ezin da interpretazio geometrikoa erabili, eta problema aljebraikoki ebaztea beharrezkoa egiten da. Ondoko bi teo- remetan geometriatik aljebrara igarotzea ahalbidetzen duten oinarrizko emaitzen frogak azalduko dira. Frogetan multzo ganbilen ondoko emaitzak erabiltzen dira: 1. Forma estandarrean dagoen eredu lineal baten soluzio bideragarrien F mul- tzoa multzo ganbil eta itxia da. 2. F multzo ganbileko x puntua mutur-puntua da baldin x = λx1 + (1 − λ)x2, 0 ≤ λi ≤ 1 betetzen duten F -ko bi puntu x1 eta x2 existitzen ez badira. 3. Multzo ganbil itxi eta bornatu bateko edozein x puntu mutur-puntuen kon- binazio lineal ganbil orokortu moduan idatz daiteke, hau da, x = q i=1 λixi , 0 ≤ λi ≤ 1 , q i=1 λi = 1 Mutur-puntu bakoitzari oinarriko soluzio bideragarri bat dagokiola, eta alde- rantziz, oinarriko soluzio bideragarri bakoitzari mutur- puntu bat dagokiola froga- tuko da ondoko teoreman: 2.3.1 Teorema. Izan bedi forma estandarrean dagoen eredu lineala max z = c T x hauen mende Ax = b x ≥ 0 x oinarriko soluzio bideragarria da baldin eta soilik baldin x bektorea F -ko mutur-puntua bada. Froga. ⇒ x oinarriko soluzio bideragarria bada, froga dezagun mutur-puntua dela. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  28 2. Simplex metodoa Baldin x oinarriko soluzio bideragarria bada, zero baino handiagoak diren m osagai ditu gehienez. Notazioa errazteko asmoz, demagun lehenengo m osagaiak direla. Orduan, x =   xB 0   Jo dezagun existitzen direla F multzoan bi puntu x1, x2, non x = λx1 + (1 − λ)x2 , 0 < λ < 1. Izan bitez x1 =   y1 y′ 1   eta x2 =   y2 y′ 2   non yi, ( i = 1, 2) bektoreen dimentsioa m × 1 den eta y ′ i, ( i = 1, 2) bekto- reena (n − m) × 1. Orduan, berdintza honetatik:   xB 0   = λ   y1 y′ 1   + (1 − λ)   y2 y′ 2   beste hau ondorioztatzen da: 0 = λy ′ 1 + (1 − λ)y ′ 2. y′ 1, y ′ 2 ≥ 0, λ > 0 eta 1 − λ > 0 direnez, y ′ 1 = y ′ 2 = 0 betetzen da. Hortaz, x, x1 eta x2 soluzioak oinarrikoak direla ondorioztatzen da, eta oinarri berberari dagozkionez, xB = x1 = x2 da. Beraz, x konbinazio lineal ganbil murriztu moduan idaztea posible egingo duten bideragarritasun eskualdeko x1 eta x2 bi puntu desberdin horiek ez dira existitzen, eta, ondorioz, x mutur-puntua da. ⇐ x mutur-puntua bada, oinarriko soluzio bideragarria da. Demagun x bektoreak k osagai positibo dituela eta gainerakoak zero direla. Orduan, murrizketen sistema modu honetan idatz daiteke: k i=1 xiai = b. OpenCourseWare, UPV/EHU  2.3. Mutur-puntuak eta oinarriko soluzioak 29 x oinarriko soluzio bideragarria dela ikusteko, ai, i = 1, . . . , k, bektoreak linealki independenteak direla frogatzea nahikoa da. Kontrako kasuan, α1, . . . , αk eskalarrak existituko lirateke, guztiak batera nulu ez, non k i=1 αiai = 0. Izan bedi α T = (α 1 , . . . , αk, 0, . . . , 0). x1 = x + ǫα eta x2 = x − ǫα deﬁnituko ditugu. Posible da ǫ eskalarraren balioa modu egokian aukeratzea, puntuak bideragarriak izan daitezen. Gainera, x1 = x2 betetzen da eta x = 1 2 x1 + 1 2 x2 . Hortik ondorioztatuko litzateke x ez dela mutur-puntua. 2 Eredu lineal baten soluzio optimoa bideragarritasun eskualdeko mutur-puntu batean aurkitzen dela frogatuko da ondoko teoreman. 2.3.2 Teorema. Izan bedi forma estandarrean dagoen eredu lineala max z = c T x hauen mende Ax = b x ≥ 0 Helburu funtzioaren balio optimoa F multzoaren mutur-puntu batean aurkitzen da. Froga. Demagun mutur-puntua ez den x ∗ soluzio optimoa daukagula eta z∗ = cT x∗ dela problemaren balio optimoa. Orduan, F -ko x guztietarako ondokoa betetzen da: z = c T x ≤ cT x∗ = z∗ Izan bedi F -ko mutur-puntuen multzoa, {x1, . . . , xk}. F eskualdeko puntu oro, baita eskualdekoa den x ∗ ere, mutur-puntuen konbinazio lineal ganbil mo- duan idatzia izan daiteke. x ∗ = k i=1 λixi , λi ≥ 0, k i=1 λi = 1 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  30 2. Simplex metodoa Orduan, z ∗ = cT x∗ = cT k i=1 λixi = k i=1 λic T x i max i (c T x i) ≥ c T x i, i = 1, . . . , k betetzen denez, z ∗ = k i=1 λic T x i ≤ k i=1 λi max i (c T x i) = max i (c T x i) k i=1 λi = max i (c T x i) ≤ z ∗. Ondorioz, z ∗ = max i (c T x i) eta ondorioztatzen da optimoa mutur-puntu batean lortzen dela. 2 Ondoko adibidean 2.3.1. Teoreman frogatutakoa betetzen dela egiaztatuko du- gu. Eredu linealek oinarriko soluzio kopuru ﬁnitua dutela kontuan izanda, oina- rriko soluzio bideragarri batetik hobea den beste batera joateko prozesu iteratiboa eraiki daiteke, optimoa lortu arte. Adibidea. Har dezagun ondoko eredu lineala: max z = x1 + 2x2 hauen mende −x1 + 4x2 ≤ 4 x1 − x2 ≤ 3 x1, x2 ≥ 0 Soluzioen eskualdea graﬁkoki adierazten badugu, mutur-puntuak kalkula ditzake- gu. OpenCourseWare, UPV/EHU  2.3. Mutur-puntuak eta oinarriko soluzioak 31 x1 x2 −x1 + 4x2 = 4 x1 − x2 = 3 A B C O max F eskualdeak lau mutur-puntu ditu. Helburu funtzioa optimizazioaren noranz- koan desplazatuz, B mutur-puntua lortuko da. O = (0, 0) , A = (0, 1) , B = 16 3 , 7 3 , C = (3, 0) Oinarriko soluzioak aljebraikoki kalkulatzeko, eta bideragarritasun eskualde- ko mutur- puntu bakoitzari oinarriko soluzio bideragarri bat dagokiola, eta alderan- tziz, oinarriko soluzio bideragarri bakoitzari mutur- puntu bat dagokiola ikusteko, eredua forma estandarrean jarri behar da, x3 eta x4 nasaitze-aldagaiak gehituz. max z = x1 + 2x2 + 0x3 + 0x4 hauen mende −x1 + 4x2 +x3 = 4 x1 − x2 +x4 = 3 x1, x2, x3, x4 ≥ 0 Ekuazio-sistemaren koeﬁzienteen matrizeak lau zutabe ditu, eta ondorioz, au- kera daitekeen oinarri kopuru maximoa 6 da; lau zutabe horiek konbinatuz, eta beren artean linealki independente diren zutabeak binaka multzokatuz, lortuko den multzo kopurua. Azter ditzagun 6 aukera horiek. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  32 2. Simplex metodoa 1. B = (a1 a2) oinarria aukeratzea. xB =   −1 4 1 −1   −1   4 3   =   1 3 4 3 1 3 1 3     4 3   =   16 3 7 3   Oinarriko soluzio hau bideragarria da, eta graﬁkoko B mutur-puntuari da- gokio. 2. B = (a1 a3) oinarria aukeratzea. xB =   −1 1 1 0   −1   4 3   =   0 1 1 1     4 3   =   3 7   Oinarriko soluzio hau bideragarria da, eta graﬁkoko C mutur-puntuari da- gokio. 3. B = (a1 a4) oinarria aukeratzea. xB =   −1 0 1 1   −1   4 3   =   −1 0 1 1     4 3   =   −4 7   Oinarriko soluzio hau ez da bideragarria, osagai negatiboak dituelako. Hor- taz, soluzio hau ez da graﬁkoko mutur-puntuekin egokitzen. 4. B = (a2 a3) oinarria aukeratzea. xB =   4 1 −1 0   −1   4 3   =   0 −1 1 4     4 3   =   −3 16   Oinarriko soluzio hau ez da bideragarria, osagai negatiboak dituelako. Hor- taz, soluzio hau ez da graﬁkoko mutur-puntuekin egokitzen. 5. B = (a2 a4) oinarria aukeratzea. xB =   4 0 −1 1   −1   4 3   =   1 4 0 1 4 1     4 3   =   1 4   Oinarriko soluzio hau bideragarria da, eta graﬁkoko A mutur-puntuari da- gokio. OpenCourseWare, UPV/EHU  2.4. Simplex metodoa 33 6. B = (a3 a4) oinarria aukeratzea. xB =   1 0 0 1   −1   4 3   =   1 0 0 1     4 3   =   4 3   Oinarriko soluzio hau bideragarria da, eta graﬁkoko O mutur-puntuari da- gokio. 2 Aurreko adibidean A matrizeko lau zutabeen artean aukeratu ahal izan ditu- gun bi bektoreko multzo guztiak oinarriaak dira, eta horietatik sei oinarriko solu- zio kalkulatu dira. Kasuren batean gerta daiteke aukeratutako bektoreak linealki mendekoak izatea, eta ondorioz, oinarria ez izatea, bektoreen multzo horretatik ezingo delarik oinarriko soluzio bat kalkulatu. Aurreko sei oinarriko soluzio ho- rien artetik bi, hirugarrena eta laugarrena, ez dagozkie inolako mutur- punturi, ez direlako bideragarriak. 2.4 Simplex metodoa Eredu linealen soluzio graﬁkoan ikusi dugu, ereduak soluziorik baldin badu, solu- zio optimoa mota desberdinetakoa izan daitekeela: soluzio optimo bakarra, aniz- koitza eta bornegabea. Atal honen helburua soluzio mota bakoitzari dagozkion ezaugarriak identiﬁkatzea da, eredu linealak ebazteko prozedura iteratibo bat erai- ki ahal izateko: simplex algoritmoa. 2.4.1 Deﬁnizioak eta notazioa Hasteko, programazio linealaren garapenean erabiliko dugun notazioa ﬁnkatuko dugu. Izan bedi forma estandarrean dagoen eredu lineala. max z = c T x hauen mende Ax = b x ≥ 0 Demagun A matrizeak m errenkada linealki independente eta n zutabe di- tuela, n > m izanik. A matrizeko m zutabe aukeratuz osatutako B oinarri bat Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  34 2. Simplex metodoa hartzen da eta gainerako zutabeek N matrizea osatuko dute. Notazioa errazteko pentsatuko dugu oinarria osatzeko aukeratu diren A matrizeko zutabeak lehenen- go m zutabeak direla. c bektorean eta x bektorean oinarriko diren osagaiak cB eta xB notazioaz adieraziko ditugu, hurrenez hurren; oinarriko ez diren osagaiak adierazteko cN eta xN notazioa erabiliko dugu. Orduan, eredu lineala honela idatz daiteke: max z = (c T B | c T N )      xB − xN      hauen mende (B | N)      xB − xN      = b xB, xN ≥ 0 Kalkuluak eginez, eredua honela geratuko da: max z = c T B xB + c T N xN hauen mende BxB + NxN = b xB, xN ≥ 0 • Oinarriko soluzioa. xN = 0 eginez, sistema BxB = b bihurtzen da, eta oinarriko soluzioa kalkulatzen da, xB = B −1b, non xB =         xB1 xB2 .. . xBm         OpenCourseWare, UPV/EHU  2.4. Simplex metodoa 35 • Helburu funtzioaren balioa. cT B = (cB1, cB2, . . . , cBm) bada, z = c T B xB = (cB1, cB2, . . . , cBm)         xB1 xB2 .. . xBm         = m i=1 cBixBi. • Koordenatu-bektorea. A matrizearen zutabe-bektoreak a1, a2, . . . , an badi- ra, bektore bakoitzarentzat bere koordenatuak kalkula daitezke B oinarria- rekiko. Horretarako, ondoko notazioa erabiliko da: aj = y1ja1 + y2ja2 + · · · + ymjam = m i=1 yijai. aj bektorearen koordenatu-bektorea ondokoa da: yj =         y1j y2j .. . ymj         Koordenatu-bektorea kalkulatzeko, aj = Byj sistema ebatzi behar da, hau da, yj = B −1a j . • zj−cj balio adierazlearen kalkulua. Kalkulu honen beharra aurrerago azter- tuko diren teoremetan agertzen da. aj bektore bakoitzarentzat zj eskalarra kalkula daiteke modu honetan: zj = c T B yj = cB1y1j + cB2y2j + · · · + cBmymj = m i=1 cBiyij. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  36 2. Simplex metodoa Adibidea. Har dezagun forma estandarrean dagoen ondoko eredu lineala: max z = 3x1 + 4x2 + 5x3 + 6x4 hauen mende 2x1 + x2 + x3 + 8x4 = 6 x1 + x2 + 2x3 + x4 = 4 x1, x2, x3, x4 ≥ 0 Koeﬁzienteen sistemako lehenengo bi zutabeek osatzen duten oinarria hartzen badugu, eredu lineala matrize-forman idatz dezakegu, oinarrikoa den zatia oina- rrikoa ez den zatitik bereiziz. max z = (3, 4 | 5, 6)            x1 x2 − x3 x4            hauen mende   2 1 1 8 1 1 2 1              x1 x2 − x3 x4            =   6 4   x1, x2, x3, x4 ≥ 0 • Oinarriko soluzioa. xB = B −1b =   2 1 1 1   −1   6 4   =   2 2   OpenCourseWare, UPV/EHU  2.4. Simplex metodoa 37 • Helburu funtzioaren balioa. cT B = (3, 4) izanik, z = c T B xB = (3, 4)   2 2   = 14 • Oinarrikoa ez den bektore baten koordenatuak B oinarriarekiko, adibidez, a4 bektorearenak.   8 1   = y14   2 1   + y24   1 1   =   2 1 1 1     y14 y24   Sistema ebatziz koordenatuak lortzen dira. y4 =   y14 y24   =   2 1 1 1   −1   8 1   =   7 −6   • z4 − c4 balio adierazlearen kalkulua: z4 − c4 = c T B y4 − c4 = (3, 4)   7 −6   − 6 = −3 − 6 = −9. 2 2.4.2 Oinarriko soluzio bideragarrien hobekuntza Eredu linealen soluzio optimoa ereduaren murrizketek deﬁnitutako oinarriko so- luzio bideragarrien artean aurkitzen da. Ondoko teoremak oinarriko soluzio bide- ragarri batetik helburu funtzioaren balioa hobetuko duen beste oinarriko soluzio bideragarri batera pasatzeko bete behar diren baldintzak ﬁnkatuko ditu. Oinarri- ko soluzio bideragarri batetik abiatuz, simplex metodoak teorema hau erabiliko du oinarriko soluzio bideragarri batetik alboko beste batera igarotzeko, helburu funtzioaren balioa hobetzea ezinezkoa izango den arte. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  38 2. Simplex metodoa 2.4.1 Teorema. (Oinarriko soluzio bideragarri baten hobekuntza) Izan bedi ere- du lineala forma estandarrean max z = c T x hauen mende Ax = b x ≥ 0 Izan bedi A matrizetik aukeratutako B oinarria, eta izan bitez xB = B −1b dago- kion oinarriko soluzio bideragarria eta z = cT B xB helburu funtziorako balioa. A matrizean oinarrikoa ez den eta zj − cj < 0 duen aj bektore bat existitzen bada, eta aj horrentzat yij, i = 1, . . . , m, koordenaturen bat positiboa bada, beste ∧ xB oinarriko soluzio bideragarri bat existitzen da non ∧ z = ∧ c T B ∧ xB ≥ z = c T B xB . Froga. Notazioa errazteko pentsatuko dugu B oinarria A matrizeko lehenen- go m bektoreek osatzen dutela, hau da, B = (a1 . . . ar . . . am). xB oinarriko soluzio bideragarria bada, ereduaren murrizketak betetzen ditu: xB1a1 + xB2a2 + · · · + xBmam = b = m i=1 xBiai. (2.2) Aurreko ekuazioan agertzen ez diren sistemako batugaiak zero dira, dagozkien aldagaiak ez direlako oinarrikoak. am+1, am+2, . . . , an bektoreak ez daude oinarrian, eta B oinarriko bektoreen konbinazio lineal moduan idatz daitezke. aj = m i=1 yijai , j = m + 1, . . . , n (2.3) aj = 0 da, j = m + 1, . . . , n; hortaz, yij osagairen bat zeroren desberdina da. Demagun aj bektorean zeroren desberdina den osagaia yrj = 0 dela. (2.3) ekuazioan r. batugaia bereiziz aj = m i=1 i=r yijai + yrjar (2.4) OpenCourseWare, UPV/EHU  2.4. Simplex metodoa 39 r. batugaia aska daiteke eta ar bektorea a1, . . . , aj, . . . , am bektoreen konbina- zio lineal moduan adierazi. 241. orrialdeko A.3.2 Teoreman ikusi dugun bezala, B oinarriko ar bektorea aj bektoreaz ordezkatuz lortzen den ∧ B bektore-multzo berria oinarria da. ∧ B= (a1 . . . aj . . . am). Ikus dezagun nola kalkula daitekeen ∧ xB oinarriko soluzio berria. (2.4) ekua- zioan ar askatuz, hau lortuko da: ar = 1 yrj aj − m i=1 i=r yij yrj ai. (2.2) ekuazioan r. batugaia bereiziz, hau lortuko da: m i=1 i=r xBiai + xBrar = b. ar bektorea ordezkatuz, m i=1 i=r xBiai + xBr  balioa xj aldagaiaren zati osoa da 2Ebazteko sentikortasunaren analisia erabiltzen da, eta simplex dual algoritmoa aplikatzen da. OpenCourseWare, UPV/EHU  6.4. Adarkatze- eta bornatze-metodoa 215 (2) zg ≤ zb. (3) Problemaren soluzioa osoa da eta zg > zb. Behe-bornea eguneratu zb = zg eginez; soluzio oso hori soluziogaia da. Azkeneko ez den problemarik existitzen bada, algoritmoaren 2. urratsean jarraitu behar da adarkatze berri batekin. Problema guztiak azkeneko ba- dira, soluziogaia problema osoaren soluzio optimoa da. Soluziogairik ez badago, problema osoa bideraezina da. Problema oso baten soluzio optimoaren bilaketa adarkatze- eta bornatze-algo- ritmoaren bidez egiteak kalkulu asko eskatzen badu ere, algoritmo hau da proble- ma osoak, bai hutsak eta bai mistoak, ebazteko gehien erabiltzen dena. Algoritmoaren 2. urratsean adarkatua izango den problema eta bornatua izan- go den aldagaia irizpideren baten arabera aukeratzen badira, soluzio optimoaren bilaketan algoritmoaren zenbait iterazio aurreztu ahal izango dira. Adarkatua izango den problema aukeratzeko irizpide erraz bat azkenekoa ez den zg handie- neko problema aukeratzea da. Bornatua izango den aldagaia aukeratzeko, aldiz, irizpideak konplexuagoak dira. Ondoko adibidean zoriz, hau da, irizpiderik jarrai- tu gabe, aukeratuko dugu aldagaia. Adibidea. 205. orrialdeko problema osoaren soluzio optimoa kalkulatuko dugu adarkatze- eta bornatze-algoritmoa erabiliz. Lehenengo iterazioa 1. urratsa. Hasieraketa. PE problema erlaxatua ebatzi. Taula optimoa ondo- koa da: x1 x2 x3 x4 0 0 20 5 440 a2 0 1 12 7 − 1 7 24 7 a1 1 0 − 5 7 1 7 25 7 Behe-bornea hasieratuko dugu, zb = −∞. 2. urratsa. Adarkatzea. PE problema erlaxatuaren soluzioa ez da osoa. Adarkatzeko aldagai bat aukeratuko dugu, x1, eta bi problema berri sortuko ditu- gu: P2 problema eta P3 problema (ikus 208. orrialdea). 3. urratsa. Bornatzea. Sentikortasunaren analisia erabiliz, bi problema ho- riek ebatziko ditugu. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  216 6. Programazio osoa • P2 problemaren ebazpena. x1 ≤ 3 murrizketari dagokion nasaitze-aldagaia gehitu eta P1 problemari dagokion taula optimoan sartu. Ondoko taula lor- tzen da: x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 1 0 0 0 1 3 Taulako 3. errenkada egokitzeko, 3. errenkada − 2. errenkada eragiketa egingo dugu. x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 0 0 5 7 − 1 7 1 − 4 7 Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika- tuz, P2 problemarako optimoa den taula lortzen da. x1 x2 x3 x4 x5 0 0 45 0 35 420 a2 0 1 1 0 −1 4 a1 1 0 0 0 1 3 a4 0 0 −5 1 −7 4 • P3 problemaren ebazpena. x1 ≥ 4 murrizketa −1 balioaz biderkatuko dugu P1 problemaren taula optimoan sartzeko, −x1 ≤ −4, eta ondoren, x5 nasaitze-aldagaia gehituko dugu. Hau da lortuko dugun taula: OpenCourseWare, UPV/EHU  6.4. Adarkatze- eta bornatze-metodoa 217 x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 −1 0 0 0 1 −4 3. errenkada eguneratu, 3. errenkada + 2. errenkada eragiketa eginez. x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 0 0 − 5 7 1 7 1 − 3 7 Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika- tuz, P3 problemarako taula optimoa lortzen da. x1 x2 x3 x4 x5 0 0 0 9 28 428 a2 0 1 0 1 5 12 5 12 5 a1 1 0 0 0 −1 4 a3 0 0 1 − 1 5 − 7 5 3 5 Horrela, P2 problema eta P3 problema ebatzi dira  (ikus soluzioak 212. orrialdeko 6.1 Irudian). 4. urratsa. Azkeneko problemak. P2 problema azkenekoa da zg = 420 > zb izanik soluzioa osoa delako: x1 = 3 eta x2 = 4. Oraingoz kalkulatu den soluzio osorik onena izateagatik soluziogaia da, eta behe-bornea eguneratu egin behar da: zb = zg = 420. P3 problema ez da azkenekoa, ez duelako 4. urratseko irizpide bat bera ere betetzen. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  218 6. Programazio osoa Problema guztiak azkenekoak ez direnez, algoritmoaren iterazio berri bat egin behar da 2. urratsean jarraituz. Bigarren iterazioa 2. urratsa. Adarkatzea. Azkenekoa ez den problema bakarra aukeratuko dugu: P3 problema. Bertan, x2 aldagaia aukeratuko dugu bornatua izateko. Pro- blema adarkatuko dugu P3 problemari x2 ≤ 2 murrizketa erantsiz P4 problema sortzeko, eta x2 ≥ 3 erantsiz P5 problema sortzeko (ikus 210. orrialdea). 3. urratsa. Bornatzea. Sortutako bi problemak ebatzi. Aurreko iterazioan egin bezala, sentikortasunaren analisia eta simplex dual algoritmoa aplikatuko di- tugu. Kasu honetan, P3 problemaren taula optimotik abiatuko gara P4 proble- maren eta P5 problemaren soluzio optimoak kalkulatzeko (ikus soluzioak 212. orrialdeko 6.1 Irudian). 4. urratsa. Azkeneko problemak. P5 problema azkenekoa da bideraezina delako. P4 problemaren soluzio optimoa ez da osoa, eta zg = 423.33 > 420 = zb betetzen da. Hortaz, problema ez da azkenekoa. 2. urratsera joan behar da algo- ritmoaren iterazio berri bati ekiteko. Hirugarren iterazioa 2. urratsa. Adarkatzea. Oraingoan, P4 problema da azkenekoa ez den baka- rra, eta adarkatua izateko aukeratuko dugu. Bertan, x1 aldagaia aukeratuko dugu. Bi problema berri sortuko ditugu: P6 problema eta P7 problema (ikus ereduak 211. orrialdean). 3. urratsa. Bornatzea. Sortutako bi problema berriak ebatzi, aurreko urra- tsetan egin bezala. Kasu honetan, P4 problemaren taula optimotik abiatuko gara (ikus soluzio optimoak 212. orrialdeko 6.1 Irudian). 4.urratsa. Azkeneko problemak. P6 problema azkenekoa da, zg = 410 < 420 = zb betetzen delako. P7 problema ere azkenekoa da, zg = 400 < 420 = zb betetzen delako. Problema guztiak azkeneko bihurtu direnez, algoritmoaren aplikazioa amaitu da. Problema osoaren soluzio optimoa, P2 problemaren ebazpenetik lortu den soluziogaia da. x ∗ 1 = 3, x ∗ 2 = 4, z ∗ P O = zb = 420. 2 OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 219 6.5 0-1 programazio osoa Praktikan aldagai bitarrak besterik ez dituzten problemak existitzen dira. Mota horretako problemak ebazteko, algoritmo desberdinak garatu izan dira. Atal ho- netan, funtsean adarkatze- eta bornatze- algoritmoaren egitura bera duen algoritmo horietako bat azalduko dugu. Aztertuko dugun algoritmoa erabiltzeko, 0-1 eredu lineal osoaren helburu fun- tzioaren koeﬁzienteek ondoko baldintza bete behar dute: 0 ≤ c1 ≤ c2 ≤ · · · ≤ cn (6.1) Eredu lineala beti idatz daiteke  (6.1) baldintza beteko duen idazkeran; hori hala izan dadin, beharrezkoak diren aldaketa linealak egin beharko dira. Adibidea. Izan bedi ondoko 0-1 eredu lineal osoa: max z = 6x1 − 4x2 hauen mende 3x1 + 2x2 ≤ 10 −x1 + x2 ≤ 17 x1, x2 = 0 edo 1 Helburu funtzioaren koeﬁzienteek (6.1) baldintza betetzen ez dutenez, ondoko aldaketa lineala egin behar dugu: helburu funtzioan koeﬁziente minimoa aukera- tuko dugu balio absolutuan, c2 kasu honetan. x2 = y1 egingo dugu baldin koeﬁ- zientea positiboa bada, eta x2 = 1 − y1 baldin c2 negatiboa bada. Kasu honetan c2 negatiboa denez, x2 = 1 − y1 aldagai-aldaketa egingo dugu. Hurrengo koeﬁziente txikiena balio absolutuan c1 da; positiboa denez, x1 = y2 egingo dugu. Aldagai-aldaketa eginez lortzen den eredu linealean helburu funtzioaren koe- ﬁzienteek  (6.1) baldintza betetzea lortzen dugu, hau da, positiboak izatea eta go- ranzko ordenean egotea. max z = 4y1 + 6y2 − 4 hauen mende −2y1 + 3y2 ≤ 8 −y1 − y2 ≤ 16 y2, y2 = 0 edo 1 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  220 6. Programazio osoa 2 6.5.1 Deﬁnizioa. (Problema erlaxatua) 0- 1 eredu lineal bat izanik, dagokion pro- blema erlaxatua lortzeko problemari murrizketa guztiak kendu behar zaizkio, al- dagaiak bitarrak izatearena izan ezik. 6.5.2 Deﬁnizioa. (Soluzio partziala) 0- 1 eredu lineal bat emanik, aldagairen bat balio ﬁnkorik gabe duen soluzioari eredu linealaren soluzio partziala deitzen zaio. 6.5.3 Deﬁnizioa. (Soluzio partzial baten osaketa) 0- 1 eredu lineal oso baten so- luzio partzial bat emanik, ﬁnkatu gabe dauden aldagaiei balio ﬁnkoa ematen zaie- nean lortzen den soluzioa soluzio partzialaren osaketa dela esaten da. Adibidea. Izan bedi ondoko 0-1 eredu lineala: max z = x1 + 2x2 + 4x3 hauen mende x1 + x2 + 2x3 ≤ 4 3x1 + x2 + 2x3 ≤ 5 x1, x2, x3 = 0 edo 1 Dagokion problema erlaxatua ondokoa da: max z = x1 + 2x2 + 4x3 hauen mende x1, x2, x3 = 0 edo 1 Adibidez, x = (1, 1, −) soluzioa problema erlaxatuaren soluzio partzial bat da. Soluzio horrek bi osaketa posible ditu: (1, 1, 0) eta (1, 1, 1). x = (0, −, −) soluzioa ere problema erlaxatuaren soluzio partzial bat da, eta lau osaketa posible ditu: (0, 1, 1), (0, 1, 0), (0, 0, 1) eta (0, 0, 0). Problema erlaxatua ebaztea erraza gertatzen da, jakinda problemari murrizketa guztiak kendu zaizkiola, aldagaiak bitarrak izatearena izan ezik. Gainera, helbu- ru funtzioaren koeﬁziente guztiak positiboak direnez, garbi ikusten da problema erlaxatuaren soluzio optimoa x ∗ = (1, 1, 1) dela. Soluzio horrek 0-1 problema osoaren murrizketak beteko ez balitu, helburu funtzioaren koeﬁzienteak txikiene- tik handienera ordenatuta daudenez, problema erlaxatuaren hurrengo soluziorik OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 221 onenarekin, hau da, x = (0, 1, 1) soluzioarekin probatuko genuke, eta gero hu- rrengoarekin x = (1, 0, 1), eta abar. Problema erlaxatuaren soluzioak onenetik okerrenera ordena ditzakegu, eta ordena horretan 0-1 problema osoaren murrizke- ta betetzen duten egiaztatu, betetzen duen bat aurkitu arte. 2 Ondoko atalean azaltzen den 0-1 adarkatze- eta bornatze- algoritmoak, hain zuzen ere, hori egiten du: algoritmoa problema erlaxatuaren soluzio optimotik hasten da, eta 0-1 problema osoaren murrizketak betetzen dituen egiaztatzen du. Problemak adarkatuz, 0-1 problema osorako soluzio optimoa aurkituko da. Eba- tzitako problema guztiak erlaxatuak dira. 6.5.1 0-1 adarkatze- eta bornatze-algoritmoa Algoritmo hau helburua maximizatzea duten 0-1 problema linealak ebazteko di- seinatua izan da. Helburu funtzioaren koeﬁzienteek 0 ≤ c1 ≤ c2 ≤ · · · ≤ cn baldintza bete behar dute algoritmoa aplikatzen hasi aurretik. 1. urratsa. Hasieraketa Problema erlaxaturako soluzio optimoa den x = (1, . . . , 1) soluzioak 0-1 problema osoaren murrizketak betetzen dituen egiaztatu. Hala bada, (1, . . . , 1) soluzioa optimoa da. Amaitu. Bestela, aztertu ea murrizketak betetzen diren x = (0, 1, . . . , 1) balioetara- ko. Hala bada, (0, 1, . . . , 1) soluzioa optimoa da. Amaitu. Bestela, zb = z(x) behe-bornea hasieratu, non x = (0, . . . , 0) den. zg = z(xg) da, non xg = (0, 1, . . . , 1) den. Problemari k = 1 indizea esleitu. 2. urratsa. Adarkatzea Azkenekoa ez den problema bat aukeratu. Aukeratutako problema adarkatu, xk = 0 eta xk = 1 murrizketak erantsiz, bi problema berri sortzeko. 3. urratsa. Bornatzea Bi problema berri horietarako k + 1 osagaia 0 duten eta hurrengoak 1 di- tuzten xg osaketak egin. Bi problemek osaketa horietan hartzen dituzten zg balioak kalkulatu. Problema berri horiei k = k + 1 indizea esleitu. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  222 6. Programazio osoa 4. urratsa. Azkeneko problemak Azkeneko ez diren problema guztiak aztertu. Azkeneko dira ondoko bal- dintzetako bat betetzen dutenak: (1) zg ≤ zb. (2) zg > zb bada, eta xg soluzioak problema osoaren murrizketak betetzen baditu, xg soluziogaia da, eta zb = zg eguneratuko da. (3) Problemaren murrizketa guztiak aldi berean beteko dituen osaketarik ez da existitzen. Problema bideraezina da. Problema guztiak azkenekoak badira, amaitu. Problema osoaren soluzio optimoa zb behe-borneak erakutsitako soluziogaia da. Bestela, 2. urratsera joan. Adibidea. 203. orrialdeko motxilaren problema ebatziko dugu 0-1 adarkatze- eta bornatze-algoritmoa erabiliz. max z = 15x1 + 25x2 + 12x3 + 10x4 hauen mende 3x1 + 6x2 + 5x3 + 5x4 ≤ 12 x1, x2, x3, x4 = 0 edo 1 Helburu funtzioaren koeﬁzienteak ordenatzeko, ondoko aldagai-aldaketa egin behar da: x4 = y1, x3 = y2, x1 = y3 eta x2 = y4. Beste 0-1 problema osoa eta dagokion eredu erlaxatua ondokoak dira: 0-1 Problema Osoa: PO Problema Erlaxatua: PE max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende 5y1 + 5y2 + 3y3 + 6y4 ≤ 12 y1, y2, y3, y4 = 0 edo 1 y1, y2, y3, y4 = 0 edo 1 OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 223 226. orrialdeko 6.2 Irudiko diagraman laburbilduko ditugu 0-1 problema osoaren soluzio optimoaren bilaketarako 0-1 adarkatze- eta bornatze- algoritmoa aplika- tzean lortutako problema erlaxatu guztiak, eta bertan zehaztuko ditugu problema bakoitzerako soluzio partzial bat eta problemarako goi- borne bat kalkulatzeko ba- lioko digun osaketa. Lehenengo iterazioa 1. urratsa. Hasieraketa. Problema erlaxatuaren (1, 1, 1, 1) soluzio optimoak ez du 0-1 problema osoa- ren murrizketa betetzen. Problema erlaxatuaren hurrengo soluzio onena den (0, 1, 1, 1) soluzioak ere ez du 0-1 problema osoaren murrizketa betetzen. Soluzio horri dagokion helburu funtzioaren balioa zg = 52 da. Problemari k = 1 indizea esleitu eta behe-bornea zb = 0 balioarekin hasiera- tuko dugu. 2. urratsa. Adarkatzea. PE problema erlaxatua bi problematan adarkatuko dugu, y1 = 0 eta y1 = 1 murrizketak erantsiz. Horrela lortuko ditugu P2 problema eta P3 problema, hurrenez hurren. P2 problema P3 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 0 y1 = 1 y2, y3, y4 = 0 edo 1 y2, y3, y4 = 0 edo 1 3. urratsa. Bornatzea. yg = (0, 0, 1, 1) osaketarekin P2 problemaren helburu funtzioak zg = 40 ba- lioa hartzen du; balio hori problema osorako goi- borne bat izango da adar honetan. yg = (1, 0, 1, 1) osaketarekin P3 problemaren helburu funtzioak zg = 50 ba- lioa hartzen du; balio hori problema osorako goi- borne bat izango da adar honetan. Problema hauei k = 2 indizea esleituko diegu. 4. urratsa. Azkeneko problemak. P2 problemarako dugun yg = (0, 0, 1, 1) osaketak 0-1 problema osoaren mu- rrizketa betetzen du. Gainera, zg = 40 > 0 = zb betetzen denez, soluzio hori Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  224 6. Programazio osoa soluziogai bihurtuko da, eta P2 problema azkeneko. Behe-bornea eguneratuko dugu, zb = 40. P3 problemaren yg = (1, 0, 1, 1) osaketak, aldiz, ez du 0-1 problema osoaren murrizketa betetzen. Gainera, P3 problema ez da bideraezina, existitzen delako 0-1 problema osoaren murrizketa beteko duen osaketaren bat, y = (1, 0, 0, 0) adibidez. zg = 50 > zb izanik, ez da azkeneko problema izateko bete behar den baldintzarik betetzen. Beraz, P3 problema ez da azkenekoa, eta algoritmoaren iterazio berri bati ekin behar zaio. Bigarren iterazioa. P3 problema adarkatuko dugu, y2 = 0 murrizketa erantsiz P4 problema sor- tzeko eta y2 = 1 murrizketa erantsiz P5 problema. P4 problema P5 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 1 y1 = 1 y2 = 0 y2 = 1 y3, y4 = 0 edo 1 y3, y4 = 0 edo 1 Algoritmoan zehazten diren osaketak eta osaketa horietarako helburu funtzioa- ren balioak kalkulatuko ditugu bi problematarako: P4 problemarako yg = (1, 0, 0, 1) eta zg = 35 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. P5 problemarako yg = (1, 1, 0, 1) eta zg = 47 ditugu. Problema ez da azkene- koa. Problema hauei k = 3 indizea esleituko diegu. P5 problema azkenekoa ez denez, 2. urratsera joan eta algoritmoaren iterazio berri bati ekingo diogu. Hirugarren iterazioa. P5 problema adarkatuko dugu, y3 = 0 murrizketa erantsiz P6 problema sor- tzeko eta y3 = 1 erantsiz P7 problema sortzeko. OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 225 P6 problema P7 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 1 y1 = 1 y2 = 1 y2 = 1 y3 = 0 y3 = 1 y4 = 0 edo 1 y4 = 0 edo 1 Bi problemetarako osaketak eta osaketa horietarako helburu funtzioaren balioa kalkulatuko ditugu. P6 problemarako yg = (1, 1, 0, 0) eta zg = 22 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. P7 problemarako yg = (1, 1, 1, 0) eta zg = 37 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. Problema hauei k = 4 indizea esleituko diegu. Azkenekoa ez den problemarik ez dagoenez, adarkaketak amaitu dira. 0-1 problema osoaren soluzio optimoa zb = 40 behe-borneari dagokion soluziogaia da, hau da, yg = (0, 0, 1, 1). Egindako aldagai-aldaketak deseginez, 0-1 problema osoaren soluzio optimoa lortzen da: x ∗ 1 = 1, x ∗ 2 = 1, x ∗ 3 = 0, x ∗ 4 = 0, z ∗ = 40. Ebazpen osoa erakusten duen diagrama 6.2 Irudian ikus daiteke. 2 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  226 6. Programazio osoa PE problema P2 problema P3 problema P4 problema P5 problema P6 problema P7 problema y = (0, −, −, −) y = (1, −, −, −) y = (1, 0, −, −) y = (1, 1, −, −) y = (1, 1, 0, −) y = (1, 1, 1, −) yg = (0, 1, 1, 1) yg = (0, 0, 1, 1) yg = (1, 0, 1, 1) yg = (1, 0, 0, 1) yg = (1, 1, 0, 1) yg = (1, 1, 0, 0) yg = (1, 1, 1, 0) zg = 52 zg = 40 zg = 50 zg = 35 zg = 47 zg = 22 zg = 37 zb = 40 y1 = 0 y1 = 1 y2 = 0 y2 = 1 y3 = 0 y3 = 1 Azkenekoa Azkenekoa Azkenekoa Azkenekoa Soluziogaia 6.2. Irudia: Adibideko 0-1 problema osoaren ebazpenaren diagrama. OpenCourseWare, UPV/EHU  A. Eranskina Aljebra lineala eta multzo ganbilak Ikerkuntza Operatiboaren gaien garapenean beharrezkoak diren aljebra lineala- ren eta multzo ganbilen kontzeptuak gogoratuko ditugu eranskin honetan. Eredu linealak ebazteko erabiltzen den simplex algoritmoa prozedura aljebraikoa den arren, programazio linealaren geometria aztertzea garrantzitsua da. Hasteko, ere- du linealaren soluzio optimoa non aurkitzen den ikusten lagunduko diguten oi- narrizko ideia geometriko batzuk aztertuko ditugu. Ondoren, mutzo ganbil baten mutur- puntuen eta eredu linealaren oinarriko soluzioen arteko erlazioa aztertuko dugu. A.1 Matrizeak eta bektoreak Har dezagun R gorputza. R -ko elementuei eskalar deitzen zaie. m errenkadako eta n zutabeko eskalarren taulari matrize esaten zaio. A =         a11 a12 · · · a1n a21 a22 · · · a2n .. . .. . . .. .. . am1 am2 · · · amn         Matrizea m × n tamainakoa edo dimentsiokoa dela esaten da. A = (aij) notazioa ere erabil dezakegu. Zutabe bakarra duen matrizea, hau da, m × 1 tamainakoa, zutabe-bektoretzat 227  228 A. Aljebra lineala eta multzo ganbilak har daiteke. a =         a11 a21 .. . am1         Adibidea. 1. Eskalarren taula hau 3 × 4 tamainako matrizea da. A =      3 −2 2 5 1 0 7 2 1 2 1 0 1 1      2. Eskalarren taula hau 3 dimentsioko bektorea da. a =      3 0 1      2 A.1.1 Matrize-eragiketak Batuketa m × n tamainako bi matrize izanik, A = (aij) ∈ R m×n, B = (bij) ∈ R m×n, A- ko eta B-ko elementuak elementuz elementu batuz lortzen den m × n tamainako C = (cij) ∈ R m×n matrizeari A eta B matrizeen arteko batura esaten zaio eta A + B moduan adierazten da. cij = aij + bij, i = 1, . . . , m, j = 1, . . . , n. Bi matrizeren arteko batuketa kalkulatu ahal izateko bi matrizeek tamaina be- rekoak izan behar dute, eta batuketa egin ondoren lortutako beste matrizea ere tamaina berekoa izango da. OpenCourseWare, UPV/EHU  A.1. Matrizeak eta bektoreak 229 Matrizeen arteko batuketa deﬁnitzen den modu berean deﬁnitzen da bekto- reen arteko batuketa; bektore bat zutabe bakarreko matrize bat dela besterik ez da kontuan izan behar. Adibidea. 1. a eta b bektoreen batuketa kalkulatuko dugu. a =   1 3   , b =   1 4   , a + b =   1 3   +   1 4   =   2 7   2. A eta B matrizeen batuketa kalkulatuko dugu. A =      1 0 1 1 0 1 −1 0 2 0 1 −3      , B =      1 4 2 0 0 0 −1 0 1 1 2 −1      A +B =      1 0 1 1 0 1 −1 0 2 0 1 −3      +      1 4 2 0 0 0 −1 0 1 1 2 −1      =      2 4 3 1 0 1 −2 0 3 1 3 −4      2 Propietateak 1. Matrizeen arteko batuketa barne-eragiketa bat da R m×n espazioan. A , B ∈ R m×n ⇒ A + B ∈ R m×n. 2. Matrizeen arteko batuketa trukakorra da. (∀A, B ∈ R m×n) A + B = B + A. 3. Matrizeen arteko batuketa elkarkorra da. (∀A, B, C ∈ R m×n) (A + B) + C = A + (B + C). Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  230 A. Aljebra lineala eta multzo ganbilak 4. Matrizeen arteko batuketak elementu neutroa dauka, 0 ∈ R m×n. (∀A ∈ R m×n) A + 0 = 0 + A = A. 5. A ∈ R m×n matrize orok badu aurkakoa: −A ∈ R m×n. A + (−A) = (−A) + A = 0. Bektoreen arteko batuketak matrizeen arteko batuketak betetzen dituen pro- pietate berberak betetzen ditu. Matrizeen eta eskalarren arteko biderketa Izan bitez α ∈ R eskalarra eta A = (aij) ∈ R m×n matrizea. α eta A arteko biderketa A matrizearen elementu guztiak α eskalarraz biderkatuz kalkulatzen da. Biderketa α · A notazioaz adierazten da eta biderketaren emaitza B = (bij) ∈ R m×n matrizea da. bij = α · aij, i = 1, . . . , m, j = 1, . . . , n. Matrizeen eta eskalarren arteko biderketaren emaitza tamaina bereko beste matri- ze bat da. Adibidea. 1. A matrizearen eta α eskalarraren arteko biderketa kalkulatuko dugu. A =      0 −2 1 2 1 1      , α = −2, α· A = −2 ·      0 −2 1 2 1 1      =      0 4 −2 −4 −2 −2      2. a bektorearen eta α eskalarraren arteko biderketa kalkulatuko dugu. a =      1 3 −5      , α = 1 2 , α · a = 1 2 ·      1 3 −5      =      1 2 3 2 − 5 2      2 OpenCourseWare, UPV/EHU  A.1. Matrizeak eta bektoreak 231 Bektoreen biderkaketa eskalarra aT errenkada-bektorearen eta b zutabe-bektorearen arteko biderkadura eskalarra aT bektoreko elementu bakoitza b bektorean dagokion elementuarekin biderka- tuz eta emaitzak batuz kalkulatzen da. Biderkadura eskalarra aT · b notazioaz adierazten da eta emaitza eskalar bat da. a T = (a 1 · · · an) ∈ R 1× n, b =      b1 .. . bn      ∈ R n. a T · b = (a 1 · · · an) ·      b1 .. . bn      = n i=1 ai · bi. Errenkada-bektore baten eta zutabe-bektore baten arteko biderkadura eskalarra kalkulatu ahal izateko, beharrezkoa da biak dimentsio berekoak izatea. Biderka- duraren emaitza eskalarra da. a ∈ R n, b ∈ R n ⇒ aT · b ∈ R . Adibidea. a ∈ R 3 eta b ∈ R3 bektoreen arteko biderkadura eskalarra kalku- latuko dugu. a =      4 2 7      , b =      −1 2 1      , a T · b = (4 2 7) ·      −1 2 1      = 7 ∈ R . 2 Matrizeen arteko biderketa A ∈ R m×n eta B ∈ R n×p matrizeak izanik, A eta B matrizeen arteko biderka- dura C = A · B ∈ R m×p matrizea da. C = A · B matrizeko  (i, j) elementua, i = 1, . . . , m, j = 1, . . . , p, A matri- zeko i. errenkadaren eta B matrizeko j. zutabearen arteko biderkadura da (erren- kada bider zutabe). Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  232 A. Aljebra lineala eta multzo ganbilak Adibidea. A ∈ R 3×2 eta B ∈ R 2×4 matrizeen biderkadura kalkulatuko dugu. A =      4 −3 1 0 1 1      , B =   1 1 0 1 1 2 7 4   C = A · B =      1 −2 −21 −8 1 1 0 1 2 3 7 5      ∈ R 3×4. 2 Propietateak 1. Matrizeen arteko biderketa elkarkorra da. (∀A ∈ R m×n) (∀B ∈ R n×p) (∀C ∈ R p×q) (A · B) · C = A · (B · C). 2. Matrizeen arteko biderketa banakorra da batuketarekiko. (∀A, B ∈ R m×n) (∀C ∈ R n×p) (A + B) · C = A · C + B · C. (∀A ∈ R m×n) (∀B, C ∈ R n×p) A · (B + C) = A · B + A · C. 3. (∀A ∈ R m×n) A · 0n×p = 0m×p, 0q×m · A = 0q×n. 4. (∀A ∈ R m×n) Im · A = A · In = A. 5. (∀α ∈ R ) (∀A ∈ R m×n) (∀B ∈ R n×p) α · (A · B) = (α · A) · B = A · (α · B). A.1.2 Matrize baten heina A ∈ R m×n matrizea izanik, errenkaden arteko oinarrizko eragiketen bidez A matrizea U matrize mailakatuan eralda daiteke Gaussen ezabapena erabiliz. U matrizean pibotik ez duten errenkadak nuluak direnez, matrizeak duen pibot ko- purua errenkada ez-nulu kopurua da. OpenCourseWare, UPV/EHU  A.1. Matrizeak eta bektoreak 233 Adibidea. Har dezagun matrize hau: A =         1 2 3 −4 1 1 2 2 5 4 3 2 −5 2 4 2 0 −6 9 7         Gaussen ezabapena erabiliz, U matrize mailakatua lortuko da. A =         1 2 3 −4 1 1 2 2 5 4 3 2 −5 2 4 2 0 −6 9 7         →         1 2 3 −4 1 0 0 −1 9 3 0 −4 −14 14 1 0 −4 −12 17 5         →         1 2 3 −4 1 0 −4 −14 14 1 0 0 −1 9 3 0 −4 −12 17 5         →         1 2 3 −4 1 0 −4 −14 14 1 0 0 −1 9 3 0 0 2 3 4         →         1 2 3 −4 1 0 −4 −14 14 1 0 0 −1 9 3 0 0 0 21 10         = U 2 A.1.1 Deﬁnizioa. Izan bitez A ∈ R m×n matrizea, eta Gaussen ezabapena era- biliz lortutako U matrize mailakatua. U matrizearen pibot kopurua (errenkada ez-nuluen kopurua) A matrizearen heina dela esango dugu, eta rang A notazioaz adieraziko dugu. Aurreko adibideko A matrizearen heina 4 da, U matrizearen pibot kopuruaren edo errenkada ez-nuluen kopuruaren berdina. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  234 A. Aljebra lineala eta multzo ganbilak A.2 Ekuazio linealen sistemen ebazpena Izan bedi m ekuazio eta n ezezagun dituen Ax = b ekuazio-sistema, non A ∈ R m×n, rang A = r eta b ∈ R m baitira. Gaussen ezabapena erabiliko dugu sistema ebazteko. Kasu hauek gerta daitezke: * rang A = rang (A b) bada, sistemak ez du soluziorik; bateraezina da. * rang A = rang (A b) = r bada, sistemak badu soluziorik. * r = ezezagun kopurua bada, sistemak soluzio bakarra dauka. * r < ezezagun kopurua bada, sistemak inﬁnitu soluzio ditu. Adibidea. Har dezagun ekuazio linealen sistema hau: 2x1 − x2 + 3x3 = 2 x1 + x2 − x3 = 4 3x1 + 2x3 = 5 Sistemak soluziorik duen edo ez erabakitzeko, A eta (A b) matrizeen heinak kalkulatu behar dira. A =      2 −1 3 1 1 −1 3 0 2      (A b) =      2 −1 3 2 1 1 −1 4 3 0 2 5      Gaussen ezabapena eginez,      2 −1 3 2 1 1 −1 4 3 0 2 5      →      2 −1 3 2 0 3 2 − 5 2 3 0 3 2 − 5 2 2      →      2 −1 3 2 0 3 2 − 5 2 3 0 0 0 −1      rang A = 2 < 3 = rang (A b) betetzen denez, sistemak ez du soluziorik. 2 OpenCourseWare, UPV/EHU  A.2. Ekuazio linealen sistemen ebazpena 235 Adibidea. Har dezagun ekuazio linealen sistema hau: 2x1 + x2 = 3 x1 + x2 = 4 Gaussen ezabapena eginez,   2 1 3 1 1 4   →   2 1 3 0 1 2 5 2   rang A = rang (A b) = 2 = ezezagun kopurua betetzen denez, sistemak soluzio bakarra dauka: x1 = −1, x2 = 5. 2 Adibidea. Har dezagun ekuazio linealen sistema hau: 2x1 − x2 + 3x3 = 2 x1 + x2 − x3 = 4 3x1 + 2x3 = 6 Gaussen ezabapena eginez,      2 −1 3 2 1 1 −1 4 3 0 2 6      →      2 −1 3 2 0 3 2 − 5 2 3 0 3 2 − 5 2 3      →      2 −1 3 2 0 3 2 − 5 2 3 0 0 0 0      rang A = rang (A b) = 2 < ezezagun kopurua betetzen denez, sistemak inﬁnitu soluzio ditu. Oinarriko ezezaguntzat x1 eta x2 hartzen baditugu, ekuazio-sistema horrela idatz daiteke, 2x1 − x2 = 2 − 3x3 3 2 x2 = 3 + 5 2 x3 eta sistemaren inﬁnitu soluzioak x1 = 2 − 2 3 x3 eta x2 = 2 + 5 3 x3 dira, x3 ∈ R ezezagun askearen mende. 2 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  236 A. Aljebra lineala eta multzo ganbilak A.2.1 Oinarriko soluzioak Har dezagun Ax = b ekuazio-sistema, non A ∈ R m×n den, m < n izanik, eta rang A = rang (A b) = m betetzen den. Zutabe guztiak linealki independenteak dituen m × m tamainako B azpimatrize bat aukeratzen badugu eta A matrizearen gainerako zutabeek osatzen duten azpimatrizeari N deitzen badiogu, Ax = b ekuazio-sistema honela idatz dezakegu: (B N)   xB xN   = b, edo baita honela ere: BxB + NxN = b. Aurreko formulan askatuz, B matrizeari dagozkion aldagaiak (oinarriko alda- gaiak) N matrizeari dagozkion aldagaien (aldagai askeen) mende adieraztea lor- tzen da: BxB = b − NxN . xN bektoreko aldagai askeen balioen arabera, inﬁnitu soluzio existitzen dira. Al- dagai aske guztiei zero balioa emanez, hau da, xN = 0 eginez, soluzio bakarra duen sistema hau lortzen da: BxB = b. Soluzio horri oinarriko soluzio deitzen zaio. Adibidea. Har dezagun ekuazio linealen sistema hau: 2x1 − x2 + 3x3 = 2 x1 + x2 − x3 = 4 3x1 + 2x3 = 6 235. orrialdeko adibidean ekuazio-sistema hori Gaussen ezabapena erabiliz beste ekuazio-sistema bat bihurtu dugu: 2x1 − x2 = 2 − 3x3 3 2 x2 = 3 + 5 2 x3 Ikusi dugun bezala, sistemak inﬁnitu soluzio ditu x3 aldagai askearen funtzioan: x1 = 2 − 2 3 x3 eta x2 = 2 + 5 3 x3. Horien artetik oinarriko soluzioa kalkulatzeko, x3 = 0 egin behar da: x1 = 2, x2 = 2. OpenCourseWare, UPV/EHU  A.3. Bektore-espazioak 237 A matrizean B oinarri-azpimatrize desberdinak aukera daitezke, eta horieta- ko bakoitzerako oinarriko soluzio bat kalkulatu, oinarriari ez dagokion aldagai askeari zero balioa emanez. Egon daitekeen oinarri kopuru maximoa hau da:   n m   = n! m! (n − m)! 236. orrialdeko adibiderako, sistemak duen oinarriko soluzio kopuru maximoa hau da:   3 2   = 3! 2! (3 − 2)! = 3 2 A.3 Bektore-espazioak Bektore-espazioetako kontzeptu batzuk gogoratzeko, R m bektore-espazioa hartu- ko dugu. A.3.1 Deﬁnizioa. (Konbinazio lineala) Izan bitez R m bektore-espazioko v 1, v2, . . . , vn bektoreak eta α1, . . . , αn ∈ R eskalarrak. α1v1 + α2v2 + · · · + αnvn moduko adierazpenari bektoreen arteko konbinazio lineala esaten zaio. Adibidea. Har ditzagun bi bektore hauek: v1 =   1 0   , v2 =   1 −1   1. Adierazpen hau v1 eta v2 bektoreen arteko konbinazio lineal bat da: 2   1 0   + 5   1 −1   Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  238 A. Aljebra lineala eta multzo ganbilak 2. Adierazpen honek v1 eta v2 bektoreen arteko konbinazio lineal guztiak ematen dizkigu, α1, α2 ∈ R izanik: α1   1 0   + α2   1 −1   2 A.3.1 Mendekotasun eta independentzia lineala A.3.2 Deﬁnizioa. v1 , . . . , vn ∈ R m bektoreak linealki independenteak dira bal- din α1v1 + · · ·+ αnvn = 0 konbinazio lineala bete dadin, aukera bakarra eskalar guztiak zero izatea bada, α1 = · · · = αn = 0. A.3.3 Deﬁnizioa. v1 , . . . , vn ∈ R m bektoreak linealki mendekoak direla esaten da baldin α1v1 + · · · + αnvn = 0 konbinazio lineala aurki badaiteke, gutxienez αi eskalar bat zeroren desberdina izanik. Adibidea. 1. Har ditzagun v1 , v2 bektore hauek: v1 =   1 −1   , v2 =   4 −4   Bi bektoreen konbinazio lineala zero egiten duten α1, α2 eskalarrak exis- titzen direnez, guztiak batera zero ez izanik, v1 eta v2 bektoreak linealki mendekoak dira. 4   1 −1   + (−1)   4 −4   =   0 0   2. Har ditzagun v1 , v2, v3 bektore hauek: v1 =      1 −1 2      , v2 =      3 0 −1      , v3 =      9 −3 5      OpenCourseWare, UPV/EHU  A.3. Bektore-espazioak 239 Azter dezagun hiru bektoreen konbinazio lineala zero izateko zein balio har ditzaketen α1, α2 eta α3 eskalarrek. α1      1 −1 2      + α2      3 0 −1      + α3      9 −3 5      =      0 0 0      Gaussen ezabapena aplikatuz,      1 3 9 −1 0 −3 2 −1 5      →      1 3 9 0 3 6 0 −7 −13      →      1 3 9 0 3 6 0 0 1      Matrize horrek hiru pibot dituenez, α1 = α2 = α3 = 0 da ekuazio- sistemaren soluzio bakarra. Ondorioz, v1 , v2 eta v3 bektoreak linealki in- dependenteak dira. 2 A.3.2 Oinarria eta dimentsioa A.3.4 Deﬁnizioa. S = {v1, . . . , vp} ⊆ R m bektore-multzoa R m espazioaren multzo sortzailea dela esaten da baldin v ∈ R m bektore oro S multzoko bektoreen konbinazio lineal moduan idatz badaiteke, hau da, α1, . . . , αp ∈ R eskalarrak existitzen badira, non v = α1v1 + · · · + αpvp beteko den. Adibidea. Har ditzagun R 3 espazioko v1, v2, v3 eta v4 bektoreek osatzen duten S multzoa eta R 3 espazioko edozein v bektore. S = {v1, v2, v3, v4} =               1 −1 1      ,      3 1 0      ,      2 1 1           2 −2 2               , v =      v1 v2 v3      Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  240 A. Aljebra lineala eta multzo ganbilak Azter dezagun α1v1 + α2v2 + α3v3 + α4v4 = v ekuazio-sistema eta ikus dezagun sistema betetzen duten α1, α2, α3, α4 ∈ R eskalarrak existitzen direla. α1      1 −1 1      + α2      3 1 0      + α3      2 1 1      + α4      2 −2 2      =      v1 v2 v3      Gaussen ezabapena erabiliz,      1 3 2 2 v1 −1 1 1 −2 v2 1 0 1 2 v3      →      1 3 2 2 v1 0 4 3 0 v2 + v1 0 −3 −1 0 v3 − v1      → →      1 3 2 2 v1 0 4 3 0 v2 + v1 0 0 5 4 0 v3 − 1 4 v1 + 3 4 v2      rang A = rang (A b) = 3 betetzen denez, sistemak badu soluziorik, eta beraz, S multzo sortzailea da. 2 A.3.5 Deﬁnizioa. Izan bedi B = {v1, . . . , vm} ⊆ R m bektore-multzoa. R m bektore-espazioan B oinarria dela esaten da baldin: • B multzoko bektoreak linealki independenteak badira, eta • B multzoa R m espazioaren multzo sortzailea bada. Bektore-espazio batean oinarri desberdinak kalkula daitezke; baina, oinarri guztiek bektore kopuru berbera dute. Gogora dezagun bektore-espazio baten di- mentsioa oinarri batean dagoen bektore kopurua dela. Adibidea. B bektore-multzo hau R 3 espazioan oinarria dela egiaztatuko du- gu. B = {v1, v2, v3} =               1 2 0      ,      0 1 0      ,      1 1 2               OpenCourseWare, UPV/EHU  A.3. Bektore-espazioak 241 Hasteko, bektoreak linealki independenteak direla egiaztatuko dugu, hau da, α1v1+ α2v2 + α3v3 = 0 ekuazio-sistemaren soluzio bakarra α1 = α2 = α3 = 0 dela. α1      1 2 0      + α2      0 1 0      + α3      1 1 2      =      0 0 0      Gaussen ezabapena erabiliz,      1 0 1 2 1 1 0 0 2      →      1 0 1 0 1 −1 0 0 2      Matrize horrek hiru pibot dituenez, α1 = α2 = α3 = 0 soluzioa ekuazio- sistemaren soluzio bakarra da. B-ko bektoreek R 3 espazioan multzo sortzailea osatzen dutela egiaztatzeko, honako sistema ebatzi behar da: α1      1 2 0      + α2      0 1 0      + α3      1 1 2      =      v1 v2 v3      Sistema bateragarria denez, B multzo sortzailea da. Hortaz, R 3 espazioko oinarria da. 2 A.3.1 Teorema. Izan bedi R m espazioko B = {v1, . . . , vm} oinarria. Edozein v ∈ R m bektore idatz daiteke v 1 , . . . , vm bektoreen konbinazio lineal moduan, eta konbinazio lineal horren koeﬁzienteak bakarrak dira. Teoreman aipatzen den konbinazio lineal bakar horren koeﬁzienteak v bekto- rearen koordenatuak dira B oinarrian. A.3.2 Teorema. R m bektore-espazioko B oinarri bat eta v ∈ R m bektore bat izanik, v ∈ B eta v = 0, beti lor daiteke beste oinarri bat B-ko bektoreren bat v bektoreaz ordezkatuz. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  242 A. Aljebra lineala eta multzo ganbilak Emaitza hori garrantzia handikoa da programazio linealaren garapenean. Hain zuzen ere, simplex algoritmoa oinarriko soluzio bideragarri batetik abiatzen da eta beste hobea batera mugituko da, aurreko teoreman dioen bezala oinarriko bektore bat aldatuz. Ikus dezagun adibide baten bidez zein baldintza bete behar duen B oinarrian ordezkatua izango den bektoreak. Adibidea. Har ditzagun 240. orrialdeko adibideko B oinarria eta v bektore bat: B = {v1, v2, v3} =               1 2 0      ,      0 1 0      ,      1 1 2               , v =      3 1 0      v = α1v1 + α2v2 + α3v3 ekuazio-sistema ebatziz,      3 1 0      = α1      1 2 0      + α2      0 1 0      + α3      1 1 2      v bektorearen koordenatuak lortuko dira B oinarrian: α1 = 3, α2 = −5, α3 = 0. α1 = 0 eta α2 = 0 direnez, v1 eta v2 bektoreak v bektoreaz ordezkatuak izan daitezke bi oinarri hauek lortzeko: B ′ = {v, v 2 , v3} , B ′′ = {v 1 , v, v3} Egiazta daiteke B oinarrian v3 bektorea v bektoreaz ordezkatuz osatzen den bektore- multzoan mendekotasun lineala dagoela. Hori hala gertatzen da α3 = 0 delako. v3 bektorea ezin da ordezkatua izan oinarrian. 2 Hortaz, oinarri berriak lortzeko, v-ren koordenatu ez-nuluei dagozkien B oi- narriko bektoreak izan daitezke ordezkatuak v bektoreaz. A.4 Multzo ganbilak Plano euklidestarra zenbaki errealen bikote ordenatuen multzoa da. R 2 =      x1 x2   , x1 eta x2 zenbaki errealak dira    OpenCourseWare, UPV/EHU  A.4. Multzo ganbilak 243 x1 x2 (3, −2) A.1. Irudia: Espazio euklidestarra R 2 espazioa A.1. Irudian ikusten den moduan adierazten da geometrikoki. Irudian adierazitako puntua   3 −2   bikoteari dagokio. a1x1 + a2x2 = c ekuazioak, a1, a2 eta c konstanteak izanik, zuzen bat adieraz- ten du R 2 espazioan. Adibidez, 2x1 + 3x2 = 6 ekuazioa A.2. Irudian ikus daiteke graﬁkoki adierazia. x1 x2 2x1 + 3x2 = 6 2 3 A.2. Irudia: Zuzena planoan a1x1 + a2x2 ≤ c moduko inekuazioa a1x1 + a2x2 = c zuzenean dauden pun- Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  244 A. Aljebra lineala eta multzo ganbilak tuek eta zuzenaren alde batean dauden puntuek osatutako multzoa da. Adibidez, 2x1 + 3x2 = 6 zuzenaren alde bateko puntuek 2x1 + 3x2 < 6 desberdintza be- tetzen dute, eta beste aldean dauden puntuek 2x1 + 3x2 > 6 desberdintza. A.3. Irudian margotuta adierazten da 2x1 + 3x2 ≤ 6 inekuazioak adierazitako puntuen multzoa. x1 x2 2x1 + 3x2 ≤ 6 A.3. Irudia: Inekuazioa planoan a1x1 + a2x2 ≤ c edo a1x1 + a2x2 ≥ c moduko desberdintzak betetzen dituzten puntuen multzoari R 2 espazioko planoerdi itxia esaten zaio, a1 edo a2 konstanteetako bat gutxienez zeroren desberdina izanik. Hiru dimentsioko espazio euklidestarra hirukote ordenatuen multzoa da. R 3 =               x1 x2 x3      , x1, x2 eta x3 zenbaki errealak izanik          R 3 espazioan a1x1 + a2x2 + a3x3 = c ekuazioak, non a1, a2, a3 eta c kons- tanteak diren, plano bat adierazten du. Adibidez, 3x1 − x2 + 4x3 = 6 ekuazioa plano bat da. a1x1 + a2x2 + a3x3 ≤ c edo a1x1 + a2x2 + a3x3 ≥ c moduko desberdintzak betetzen dituzten puntuen multzoek R 3 espazioan espazioerdi itxia osatzen dute. OpenCourseWare, UPV/EHU  A.4. Multzo ganbilak 245 Ideia hauek n dimentsioko espazio euklidestarrera orokor daitezke. R n =                        x1 x2 .. . xn         , x1, x2, . . . xn zenbaki errealak izanik                R n espazioan a1, . . . , an eta c konstanteak dituen a1x1 +a2x2 +· · ·+anxn = c ekuazioak hiperplano bat adierazten du. R n espazioan a1x1 + a2x2 + · · · + anxn ≤ c desberdintza betetzen duten puntuen multzoa edo a1x1 +a2x2 +· · ·+anxn ≥ c desberdintza betetzen dutenena espazioerdi itxiak dira. A.4.1 Deﬁnizioa. R n espazioko C azpimultzoa multzo ganbila da baldin multzo hutsa bada, multzoak puntu bakarra badu edo multzoko edozein bi puntutarako bi puntuak lotzen dituen segmentua multzoaren barnean badago. A.4. Irudian ikus daiteke (a), (b) eta (c) multzo ganbilak direla, baina (d) multzoa ez. (a) (b) (c) (d) A.4. Irudia: Multzo ganbilak (a), (b), (c). Ez-ganbila (d) Ondoko emaitzak froga daitezke: Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  246 A. Aljebra lineala eta multzo ganbilak • Hiperplanoa multzo ganbila da. • Espazioerdi itxia multzo ganbila da. • Multzo ganbilen kopuru ﬁnituaren arteko ebakidura multzo ganbila da. Eredu linealen azterketan agertzen diren soluzio-multzoak hiperplanoak, espa- zioerdi itxiak eta beraien arteko ebaki- multzoak dira; ikusitako ondorioen arabera, guztiak dira multzo ganbilak. A.5 Mutur-puntuak eta oinarriko soluzio bideraga- rriak Inekuazio linealen multzo bat ekuazio linealen multzo bihur daiteke inekuazioe- tan aldagaiak gehituz. Inekuazio-sistema bat ekuazio- sistema bihurtuz, inekuazio- sistemaren mutur-puntuen eta ekuazio-sistemaren oinarriko soluzioen artean da- goen erlazioa ikusiko dugu adibide baten bidez, beti ere aldagaiak zero baino han- diagoak edo berdinak diren balioak hartzera murriztuta badaude. Har dezagun inekuazio linealen sistema hau, x1 ≥ 0 eta x2 ≥ 0 izanik: −x1 + 4x2 ≤ 4 x1 − x2 ≤ 3 O A B C x1 x2 −x1 + 4x2 = 4 x1 − x2 = 3 A.5. Irudia: Multzo ganbila eta mutur-puntuak OpenCourseWare, UPV/EHU  A.5. Mutur-puntuak eta oinarriko soluzio bideragarriak 247 A.5. Irudian adierazten dira bi inekuazioak betetzen dituzten x1 ≥ 0 eta x2 ≥ 0 aldagaietarako balioak. Ikus daiteke lau espazioerdi itxi horien arteko ebakidura multzo ganbil itxia dela, poligono bat kasu honetan. Poligonoak erpin kopuru ﬁnitua du; multzoaren mutur-puntuak dira. O puntua koordenatu-ardatzen jatorria da. A puntua −x1 +4x2 = 4 zuzenaren eta ordenatu-ardatzaren arteko ebaki-puntua da. −x1 + 4x2 = 4 zuzenaren eta x1 −x2 = 3 zuzenaren arteko ebaki-puntua B da. C puntua x1 −x2 = 3 zuzenaren eta abzisa-ardatzaren arteko ebaki-puntua da. O =   0 0   , A =   0 1   , B =   16 3 7 3   , C =   3 0   Adibidean bi dimentsioko espazio euklidestarrean gertatu den moduan, hiru dimentsioko espazio euklidestarrean ere espazioerdi itxien kopuru ﬁnituaren arte- ko ebaki- multzoa multzo ganbila da, hau da, edo multzo hutsa da, edo puntu baka- rra duen multzoa da edo mutur-puntu kopuru ﬁnitua duen poliedroa da. Oro har, plano euklidestarrean espazioerdi itxien kopuru ﬁnituaren arteko ebaki-multzoa multzo ganbila da, hau da, edo multzo hutsa da, edo puntu bakarra duen multzoa da edo mutur-puntu kopuru ﬁnitua duen politopoa da. Bi inekuazioak ekuazio bihurtuko ditugu x3 eta x4 aldagai ez-negatiboak gehi- tuz. Honako sistema lortuko da, x1, x2, x3, x4 ≥ 0 izanik: −x1 + 4x2 + x3 = 4 x1 − x2 + x4 = 3 Ekuazio-sistema horrek inﬁnitu soluzio ditu, inekuazio-sistemak dituen soluzio berberak. Oinarriko soluzioak kalkula ditzakegu, eta soluzioen artean osagaiak zero baino handiagoak edo berdinak dituztenak aukeratu. Ikusiko dugunez, horiek dira A.5. Irudiko soluzioen poligonoaren mutur-puntuak. 1. Ekuazio-sistemaren matrizearen lehenengo eta bigarren zutabeak aukeratu- ko ditugu. Zutabe horiek linealki independenteak dira. x3 = x4 = 0 egin eta honako sistema lortuko dugu: −x1 + 4x2 = 4 x1 − x2 = 3 Sistemaren soluzioa x1 = 16 3 eta x2 = 7 3 da, eta graﬁkoko B mutur-puntuari dagokio (ikus A.5. Irudia). Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  248 A. Aljebra lineala eta multzo ganbilak 2. Ekuazio-sistemaren matrizearen lehenengo eta hirugarren zutabeak aukera- tuko ditugu. Zutabe horiek linealki independenteak dira. x2 = x4 = 0 egin eta honako sistema lortuko dugu: −x1 + x3 = 4 x1 = 3 Sistemaren soluzioa x1 = 3 eta x3 = 7 da, eta graﬁkoko C mutur-puntuari dagokio (ikus A.5. Irudia). 3. Ekuazio-sistemaren matrizearen lehenengo eta laugarren zutabeak aukera- tuko ditugu. Zutabe horiek linealki independenteak dira. x2 = x3 = 0 egin eta honako sistema lortuko dugu: −x1 = 4 x1 + x4 = 3 Sistemaren soluzioa x1 = −4 eta x4 = 7 da, eta ez dagokio soluzioen poligonoaren mutur-puntu bati, soluzioak osagai negatibo bat duelako. 4. Ekuazio-sistemaren matrizearen bigarren eta hirugarren zutabeak aukeratu- ko ditugu. Zutabe horiek linealki independenteak dira. x1 = x4 = 0 egin eta honako sistema lortuko dugu: 4x2 + x3 = 4 −x2 = 3 Sistemaren soluzioa x2 = −3 eta x3 = 16 da, eta ez dagokio soluzioen poligonoaren mutur-puntu bati, soluzioak osagai negatibo bat duelako. 5. Ekuazio-sistemaren matrizearen bigarren eta laugarren zutabeak aukeratuko ditugu. Zutabe horiek linealki independenteak dira. x1 = x3 = 0 egin eta honako sistema lortuko dugu: 4x2 = 4 −x2 + x4 = 3 OpenCourseWare, UPV/EHU  A.5. Mutur-puntuak eta oinarriko soluzio bideragarriak 249 Sistemaren soluzioa x2 = 1 eta x4 = 4 da, eta graﬁkoko A mutur-puntuari dagokio (ikus A.5. Irudia). 6. Ekuazio-sistemaren matrizearen hirugarren eta laugarren zutabeak aukera- tuko ditugu. Zutabe horiek linealki independenteak dira. x1 = x2 = 0 egin eta honako sistema lortuko dugu: x3 = 4 x4 = 3 Sistemaren soluzioa x3 = 4 eta x4 = 3 da, eta graﬁkoko O mutur-puntuari dagokio (ikus A.5. Irudia). 2 Aldagaiak zero baino handiagoak edo berdinak dituzten espazioerdi itxien ar- teko ebakidura den multzo ganbilaren mutur-puntuen kalkulua orokor daiteke di- mentsioa bi baino handiagoa duten espazioetara. Horrela mutur-puntuak kalkulatu ahal izango dira espazioerdiak graﬁkoki irudikatu gabe. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala
