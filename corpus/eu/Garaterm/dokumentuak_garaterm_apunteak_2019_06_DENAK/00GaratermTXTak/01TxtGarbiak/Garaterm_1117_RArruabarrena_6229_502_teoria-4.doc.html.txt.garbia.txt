                                                                   Algoritmo jaleak 4. GAIA:                                ALGORITMO JALEAK  ****** 1 SARRERA. ****** Optimizazio algoritmo tipikoak dira. Pauso bakoitzean hautagai-multzo batetik hautagai bat aukeratzen duten algoritmoak dira. Optimizazio problema askotan programazio dinamikoko teknika erabiltzea posiblea bada ere, eraginkortasun aldetik ez da onena. Algoritmo jaleen teknikak beti momentuan onena dirudien aukera egiten du; hau da, momentu oro optimizazio lokala egiten du honek soluzio optimo orokorrera gidatuko duelakoan. Hala ere, ez du beti soluzio optimoa ematen, baina zenbait problematan bai, eta nahiko algoritmo sinpleak lortzen direnez, eraginkortasun aldetik onak dira. Teknika jalea, zenbait problema ezagunetan erabili ohi da: konputagailu batean ataza multzo bat exekutatzeko sekuentzia onena bilatu, grafo batetako bide motzena aurkitu,... Arazo hauetan guztietan normalki osagai hauek aurki ditzakegu: - hautagaien multzoa (prozesa ditzakegun atazak, zeharkatu behar den grafoko erpinak) - jadanik aukeratu eta onartu diren hautagaien multzoa non aurrekoaren azpimultzoa den. - hautagaien azpimultzo bat gure arazoaren soluzioa den ala ez erabakitzen duen funtzioa (nahiz eta soluzio hoberena ez izan). - prozedura hauteslea:oraindik aukeratu ez diren hautagaietatik soluzio bideratzailea den hautagaia aukeratuko duen prozedura. (Hautagai bat aukeratu zen unean onena bazirudien ere, ondoren onena ez zela ikustea gerta liteke.) - helburu funtzioa: soluzio bati dagokion balioa edo kostua itzultzen duen funtzioa. Soluzioetan maximoa edo minimoa aurkitu nahi dugu, oro har, onena. Beraz, helburu funtzioa maximizatu edo minimizatu beharko dugu. - aukeratutako azken hautagaia tarteko emaitzari erantsiko ote zaion erabakitzen duen funtzioa. Honela, tarteko emaitzari aukeratutako azken hautagaia eransterakoan lortuko litzatekeen multzo berria osogarria balitz, orduan tarteko emaitzari hautagaia benetan eranstea onartuko da, bestela ez. Bestalde, multzo bat osogarria dela esango dugu, baldin eta multzoari hautagai gehiago eratsiez gero soluzio bat (nahiz eta hoberena ez izan) eskura badezakegu, hau da, eraikitzen ari den multzoa soluzio onenaren bideratzailea bada Optimizazio arazo bat ebatzi nahi dugunean, honen soluzioa den eta helburu funtzioa optimizatzen duen hautagaien azpimultzo bat aurkitu behar da. Algoritmo hauek pausoz pauso egiten dute lan. Hasieran, aukeratutako hautagaien azpimultzoa hutsa da. Ondoren, eta pauso bakoitzean, oraindik hautatu gabeko eta haietatik onena den hautagaia aukeratzen da. Aukera egiteko funtzio hauteslea erabiltzen da. Lortzen den azpimultzoa osogarria ez bada, hautagaia ez da onartzen, eta ondorengo saiaketetan ere ez da kontuan izango. Baina osogarria bada berriz, dagoeneko aukeratutako hautagaien multzoari eransten zaio, eta hemendik aurrera beti soluzio multzoko partaidea izango da. Azpimultzoari hautagai berria erantsi ondoren, lortzen den multzo berria, arazoaren soluzio den ala ez egiaztatzen da. Algoritmo jaleak soluzio onena beti lortzen badu, orduan algoritmo jalea zuzena da. Algoritmo jaleen eskema generikoa: funtzioa JALEA (H: Hautagai-multzoa) itzuli Hautagai-multzoa da S: Hautagaien-multzoa; hasi Multzo_hutsa(S); {Soluzioa S multzoan eraikiko da} errepika not( Soluzioa?(S)) and not(Multzo_hutsa?(H)) egin Hautesle-prozedura(H,x); -- x hautatu jalea baldin Osogarria?(Erantsi(S,x)) orduan S:= Erantsi (S,x) bukatu baldin; bukatu errepika; baldin Soluzioa?(S) orduan return(S) bestela Multzo_hutsa(S); {Ez dago soluziorik} return (S) bukatu baldin; bukatuJALEA; Nondik datorkie algoritmo hauei izena? Pausu bakoitzean zatirik onena jaten dute etorkizunaz arduratu gabe. Optimizazio lokala egiten dute, baina behin hartutako erabakirik ez dute sekula desegingo. Honela, soluzioa izango den hautagaien multzoari hautagai bat eransten badio, hautagaia bukaeraraino multzoko partaidea izangoo da, eta une batean onartzen ez dena ez da sekula onartuko, ez baita berriz ere bere onarpena berkontsideratuko. Prozedura hauteslea eta helburu funtzioa erlazionatuta egon ohi dira, zenbaitetan funtzio bera izanik. Zenbait kasutan bi funtzio hautesle egon daitezkeela iruditzen bazaigu ere, ona bakarra izango da.  Algoritmo jaleen itxura oso sinplea izan ohi da. Zenbaitetan hain dira sinpleak, soluzioonena BETI kalkulatzen ote duten zalantzan jartzen den. Bestetan, aldiz, zenbait proba, konplexu edo ez, egin ondoren, algoritmoek zuzenak dirudite. Bai bata eta bai besteagatik, komenigarria da algoritmo jaleen zuzentasuna frogatzea. Informatikariontzat, sarrera onargarri guztientzat algoritmo jaleek zuzenak izan daitezen beti soluzio onena kalkulatu beharko dute.  Algoritmo_jaleen_zuzentasuna_frogatzeko_errezeta_bat: (Derrigorrezkoa da optimizazio problemak sarrera onargarri guztientzat gutxienez soluzio optimo bat izatea.) +Algoritmo jaleen gakoa hautaketan dago. Normalki, algoritmo hauen zuzentasuna hautaketa segurua eta induktiboa dela frogatzean oinarritzen da: Hautaketa segurua da, baldin eta hautaketak aukeratzen eta onartzen dituen hautagaiak barnean dituen soluzio optimo bat existitzen bada. Edozein soluzio optimotatik abiatuta hautatua barne duen soluzio optimo bat eraikiz frogatu ohi da propietate hau.  Hautaketa induktiboa da baldin eta S jatorrizko H problemaren eta bere barne HJ hautaketa duen soluzio optimo bat izanik orduan S-{HJ} jatorrizko H problemaren pareko problemaren soluzio optimo bat bada eta pareko azpiproblemaren soluzio optimoak {HJ}-rekin bateragarriak badira. "{HJ}-rekin bateragarriak" espresioak jatorrizko Hproblemaren pareko azpiproblema soluzio optimo bati {HJ} erantsiez gero H-ren soluzio optimo bat lortzen dela esan nahi du.  Bi propietate hauek betetzen direla frogatu ondoren, algoritmo jalearen zuzentasunaren frogaketa borobiltzeko oraindik honako hau frogatu behar da: +S soluzio hoberenaren bideratzailea dela egindako hautaketaen kopuruan indukzio eginez frogatu behar da; hau da: S (aukeratu eta onartutako) hautagaien 'soluzio'-multzoa da eta H jatorrizko problemaren hautagaien multzoa. Frogaketarako (1) eta (2) propietateak beharko dira. - Oinarrizko kasua: |S|=1. Jakinik (1): OPT soluzio optimo bat existitzen da (gutxienez). SOPT ﬁ S soluzio onenaren bideratzailea da; hau da, osogarria da. Jakinik (2): H1 azpiproblema H problemaren pareko azpiproblema da eta bere soluzio optimo bat OPT-S da. - Indukzio hipotesia: |S|=n-1 eta S soluzio onenaren bideratzailea da. Hn-1 azpiproblema H problemaren pareko azpiproblema da eta S-rekin bateragarriak diren soluzio optimoak ditu. - Kasu orokorra: Algoritmo jaleak Hn-1 azpiproblema ebazteko n. hautaketa jalea, HJn, onartzen duenean: Jakinik (1): Izan bediOPTn-1Hn-1problemaren soluzio optimo bat bere barne algoritmo jaleak erabakitako lehenengo hautagaia duena; hots, HJn. (n. hautagai onartua.) OPTn-1S-rekin bateragarria dela badakigu (i.h.): OPTn-1S H-ren soluzio optimo bat da eta hautaketa jaleak onartutako n. hautagai barne duena gainera. ﬁ|S|=n eta S soluzio hoberenaren bideratzailea da. Jakinik (2): OPTn-1-{HJn}Hn azpiproblemaren soluzio optimo bat (Hn- 1 azpiproblemaren parekoa, bai eta H-rena ere) eta bere soluzio optimoak {HJn}- kin bateragarriak dira (Hn-1 ebazteko, eta ondorioz, H ebazteko). (Hurrengo pausorako dena prestatuta utzi behar da)   ****** 2 ALGORITMO JALEAK GRAFOETAN. ****** Nahiz eta hemendik aurrera grafo ez-zuzenduetaz hitz egin, grafo zuzenduentzat azterketa antzekoak egin daitezke.                                    + (MAIZTASUNA(x)+ MAIZTASUNA(y)) = B(Z')+ (MAIZTASUNA(x)+ MAIZTASUNA(y)) Z' zuhaitzak A'alfabetoaren aurrizki kodeketa optimo bat adieraziko ez balu, orduan Z''beste zuhaitz bat existituko litzateke non A' alfabetuko karaktereak hostoetan izango lituzkeen eta B(Z'')<B(Z') beteko lukeen. xy karakterea A'-ko karakterea dela kontsideratu denez, orduan Z'' zuhaitzeko hostoren batean egongo litzateke. Z''-n x eta y xy-ren haurrak bezala erantsiko bagenitu, A- rentzat lortuko genukeen aurrizki kodeketaren kostua B(Z'')+(MAIZTASUNA(x)+ MAIZTASUNA(y))<B(Z) litzateke, eta hau Z optimoa izatearen aurka doa. Ondorioz, Z' A' alfabetuarekiko optimoa izan behar du.  Teorema Huffman algoritmoak aurrizki kodeketa optimoa ematen du beti. Frogapena Lema 3 eta lema 4 zuzenean zuzenean aplikatu besterik ez dugu egin behar.                                                                           - 97 -
