   Gaien Aurkibidea 1 Osoko programazioa vii 1.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vii 1.2 Osoko programazio linealaren aplikazioak . . . . . . . . . . . . . viii 1.3 Soluzio graﬁkoa. Adarkatze- eta bornatze-algoritmoa . . . . . . . xii 1.4 Osoko problemak ebazteko metodo algebraikoak . . . . . . . . . xv 1.4.1 Adarkatze- eta bornatze-metodoa . . . . . . . . . . . . . xvii 1.4.2 Adarkatze- eta bornatze-algoritmoa . . . . . . . . . . . . xviii 1.4.3 Konbergentzia azkartzea . . . . . . . . . . . . . . . . . . xxii 1.5 0-1 osoko programazioa . . . . . . . . . . . . . . . . . . . . . . xxiii 1.5.1 0-1 problematarako adarkatze- eta bornatze-algoritmoa . . xxv 1.5.2 Bidaiariaren problemarako adarkatze- eta bornatze-algoritmoaxxvii 1.6 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxiv 2 PROGRAMAZIO DINAMIKOA xxxvii 2.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxvii 2.2 Erabaki-prozesu sekuentzialak . . . . . . . . . . . . . . . . . . . xxxviii 2.3 Bellman-en optimaltasun printzipioa. Politikak eta azpipolitikak . xl 2.4 Funtzio errekurtsiboa . . . . . . . . . . . . . . . . . . . . . . . . xl 2.5 Problema dinamikoen planteamendu eta ebazpena . . . . . . . . . xlii 2.5.1 Dilijentziaren problema . . . . . . . . . . . . . . . . . . xlii 2.5.2 Aholkularien banaketaren problema bat. . . . . . . . . . . xlv 2.5.3 Ekoizpenaren eta inbentarioen problemak . . . . . . . . . xlviii 2.5.4 Motxilaren problema . . . . . . . . . . . . . . . . . . . . liv 2.6 Oharrak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . lix 2.7 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . lix v  vi GAIEN AURKIBIDEA  Kapitulua 1 Osoko programazioa 1.1 Sarrera Praktikan agertzen diren problema asko ezin dira ebatzi programazio lineala bakar- rik erabiliz, hain zuzen ere, aldagaien balioak osokoak izan behar dutelako. Horre- tarako, osoko programazioaren teknikak garatu dira eta, ikusiko dugunez, osoko problemaren soluzio optimoa lortzeko programazio linealeko zenbait problema ebatzi behar da. Kalkulu kopurua handia denez teknika hauek era murriztuan er- abili dira baina, gaur egun konputagailuen abiaduraren igoeragatik tamaina erdiko problemak ebatz daitezke eta seguraski etorkizunean erabilpena zabalduko da. Osoko programazioko eredua programazio linealekoa bezalakoa da baina zen- bait aldagai edo aldagai guztiak osokoak izateko murrizketarekin. Aldagai errealeko eredu linealak ebazteko ezagutzen dugun simplex algorit- moa, soluzioen multzoaren ganbiltasunean oinarritzen da. Multzo ganbilen mutur- puntu kopurua ﬁnitua da eta, frogatu dugunez, soluzio optimoa horietariko mutur- puntu batean aurkitzen da. Aldagaiak osoko izateko murrizketak soluzioen multzoa murrizten badu ere (soluzioen kopurua ﬁnitua da, bideragarritasun eskualdea bornegabea denean ezik), problemaren soluzioaren lorpena zaildu egiten da. Hori dela eta, gai honetan azter- tuko ditugun metodoak ez dira simplex metodoa bezain eraginkorrak. Aldagaien balioak kontuan hartuz osoko eredu linealak hiru motakoak izan daitezke. • Osoko programazio mistoan aldagaiak bai osoko eta bai erreal izan daitezke. • Osoko programazio hutsaren aldagai guztiak osoko izango dira. vii  viii KAPITULUA 1. OSOKO PROGRAMAZIOA • 0-1 osoko programazioaren ereduetan aldagai guztiak bitarrak dira. 1.2 Osoko programazio linealaren aplikazioak Praktikan, egoera askotan, osoko ereduak planteatzeko eta ebazteko beharra izaten da. Ikus dezagun zenbait adibide. 1. Kostu ﬁnkoak dituen ekoizpen problema bat Demagun enpresa batek A1, A2 eta A3 motako produktuak ekoizten dituela. Produktu bakoitzaren ekoizpenak lanordu kopuru jakina behar du. A1, A2 eta A3 produktuen ekoizpena hasteak 2.000, 1.500 eta 1.000-ko kostu ﬁnkoak sortzen ditu, hurrenez hurren. Produktu unitate baten ekoizpenerako behar den ordu-kopurua, lehengai- kopurua eta ekoizpenean sortutako ekoizte kostua eta salneurria ondoko taulan ematen dira. Orduak Lehengaia Ek. kostua Salneurria A1 30 40 60 120 A2 20 30 40 80 A3 60 40 80 150 Ekoizpenerako enpresak 4.500 ordu eta 5.500 lehengai unitate ditu astero erabiliak izateko prest. Irabazi maximoa lortzeko enpresak astero ekoitzi behar duen A1, A2 eta A3 produktuen unitate kopurua erabakitzeko eredu lineala planteatu nahi da. Eredu lineala ondokoa izango da. • xj : ekoitziko den Aj produktu unitate kopurua (j = 1, 2, 3). • yj =    1 Aj produktua ekoizten bada 0 Aj produktua ekoizten ez bada  1.2. OSOKO PROGRAMAZIO LINEALAREN APLIKAZIOAK ix max z = (120 − 60)x1 + (80 − 40)x2 + (150 − 80)x3 − −2.000y1 − 1.500y2 − 1.000y3 o.m.m. 30x1 + 20x2 + 60x3 ≤ 4.500 40x1 + 30x2 + 40x3 ≤ 5.500 x1 ≤ M1y1 x2 ≤ M2y2 x3 ≤ M3y3 x1, x2, x3 ≥ 0 y1, y2, y3 = 0, 1 yj = 0 den kasuan, xj ≤ Mjyj murrizketatik xj ≤ 0 izan behar duela ondo- rioztatzen da. Bestalde, xj ≥ 0 bete behar denez, xj = 0 izango da eta Aj produktua ez da ekoitziko. Aldiz, yj = 1 denean Aj produktuaren ekoizpe- na hasten da eta, kopurua Mj konstanteak mugatzen du. Beraz, konstante horiek behar bezain handiak izan behar dute problemaren soluzio guztiak kontuan hartzeko. Konstante horiek zehazki kalkula daitezke baliabideen kopuru osoa produktu mota bakar bat ekoizteko erabiltzen dela suposatuz. 2. Motxilaren problema Motxila bat balio ﬁnkoa duten objektuz bete nahi denean sortzen da proble- ma hau. Aukeraketa lehenago ﬁnkatutako P pisua gainditu gabe egin behar da. n objektu dagoela suposatuko dugu, j objektuaren pisua aj dela eta dagokion balioa cj dela j = 1, . . . , n. Helburua motxilaren balioa maximizatzea da. Horretarako ondoko osoko eredu lineala idatz daiteke. xj =    0 j objektua motxilan sartzen ez bada 1 j objektua motxilan sartzen bada max z = c1x1 + c2x2 + . . . + cnxn  x KAPITULUA 1. OSOKO PROGRAMAZIOA o.m.m. a1x1 + a2x2 + . . . + anxn ≤ P xj = 0, 1 j = 1, 2, . . . , n Antzeko planteamendua egin daiteke murrizketa gehiagorekin, adibidez ob- jektuaren tamaina kontuan hartuz. 3. Multzoen estalpenaren problema Eskualde batean 6 hiri daude. Hiriak elkarren artean komunikatuak egon daitezen tren geltokiak eraiki nahi dira Hiri bakoitzetik gainontzekoetara joateko behar den denbora ondoko taulan agertzen da. 1 2 3 4 5 6 1 0 35 20 40 30 60 2 35 0 45 35 20 70 3 20 45 0 15 55 20 4 40 35 15 0 65 35 5 30 20 55 65 0 40 6 60 70 20 35 40 0 Tren geltoki horien kokapena erabaki nahi da, beti ere, edozein hiritatik abiatuta ere, 30 minutu edo gutxiagotan tren geltoki bat izango dela ziurtatu behar delarik eta ahalik eta tren geltoki gutxienak eraiki nahi direlarik. Problema honen erabaki-aldagaiak bitarrak dira, hau da xj =    1 j hirian geltoki bat eraikitzen bada 0 kontrako kasuan Problema planteatzeko ondoko eredu lineala eraiki daiteke  1.2. OSOKO PROGRAMAZIO LINEALAREN APLIKAZIOAK xi min z = x1 + x2 + x3 + x4 + x5 + x6 o.m.m. x1 + x3 + x5 ≥ 1 x2 + x5 ≥ 1 x1 + x3 + x4 + x6 ≥ 1 x3 + x4 ≥ 1 x1 + x2 + x5 ≥ 1 x3 + x6 ≥ 1 xj = 0, 1 j = 1, . . . , 6 Helburu-funtzioak guztira eraikitzen den geltoki-kopurua minimizatzen du. Murrizketa bakoitzak dagokion hiritik behar bezain gertu geltoki bat egon- go dela ziurtatzen du. Adibidez, lehenengo murrizketak lehenengo hiritik 30 minutura edo gertuago tren geltoki bat egongo dela ziurtatzen du; hori gertatzen da baldin eta x1, x3 edo x5 aldagaietako batek, gutxienez, 1 balioa hartzen badu, hau da, x1 + x3 + x5 ≥ 1 betetzen bada. Beste murrizketa guztiak berdin interpretazen dira. 4. Bidaiariaren problema Bidaiari batek H1, H2, . . . , H5 hiriak bisitatu behar ditu behin eta bakar- rik behin, hiri batean hasi eta ibilbidea bertan amaituko duelarik. Ondoko taulan hirien arteko distantziak jasotzen dira. Hiriak bisitatzeko ordena ze- haztu behar da distantzia minimoko bidea egiteko. H1 H2 H3 H4 H5 H1 0 40 85 130 70 H2 40 0 50 100 45 H3 85 50 0 50 35 H4 130 100 50 0 65 H5 70 45 35 65 0  xii KAPITULUA 1. OSOKO PROGRAMAZIOA Problema honetarako eredu lineal bat eraikitzeko ondoko erabaki-aldagaiak deﬁni daitezke xij =    0 i hiritik j hirira ez badoa 1 i hiritik j hirira baldin badoa Aldagai horiek erabiliz esleipen problema bailitzan plantea daiteke, eta badiru- di bidaiariaren problemarako soluzio bat lor daitekeela esleipen problema ebatziz. Baina, guk bilatzen dugun soluzioak zirkuitu bakarra eduki behar du eta hori ez da ziurtatzen esleipen algoritmoa erabiltzen denean. Batzutan esleipena egiterakoan azpizirkuituak agertzen dira eta horiek baztertzeko metodo egoki bat aztertuko dugu. 1.3 Soluzio graﬁkoa. Adarkatze- eta bornatze-algoritmoa Normalean osoko problemak ebazteko erabiltzen den metodoa adarkatze-  eta bornatze- algoritmoa da. Metodo hori garatu baino lehen ikus dezagun graﬁkoki adibide bat. Har dezagun osoko eredu lineala. Hasteko, problema bera baina aldagaiek osoko balioak hartu behar izatearen murrizketa kenduta hartuko dugu kontuan. Problema berri horri erlaxatua deitzen zaio. 1.Problema Problema erlaxatua max z = 80x1 + 45x2 max z = 80x1 + 45x2 o.m.m. o.m.m. x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1, x2 ≥ 0 eta osokoak x1, x2 ≥ 0 Adarkatze- eta bornatze-metodoa problema erlaxatuaren soluzio optimotik has- ten da. Problema hori lineala denez, programazio linealaren ohiko teknikak erabi- liz ebazten da. Behin problema hori ebatzi eta gero, soluzioa begiratuko dugu.  1.3. SOLUZIO GRAFIKOA. ADARKATZE- ETA BORNATZE-ALGORITMOA xiii Kasu honetan, problema erlaxatuaren soluzio optimoa P=( x∗ 1, x ∗ 2)=(3.6, 3.4) puntua da, ondoko irudian ikus daitekeenez, eta helburu- funtzioaren balio optimoa z∗ = 441 da. Puntu hori 1.problemaren soluzio optimoa izango litzateke aldagai guztiek os- oko balioak hartuko balituzte. Hori ez da gertatzen, beraz, puntu hori problema erlaxatuaren soluzio optimoa da baina ez osoko problemarena. Problema erlaxatuaren balio optimoa z∗ = 441 da. Horrek esan nahi du osoko problemaren helburu-funtzioaren goi-borne bat 441 dela. Ondoren, aldagai bat aukeratuko dugu problema adarkatzeko, hau da, osoko izan behar duen eta kalkulatutako soluzioan osoko ez den aldagai bat. Kasu hone- tan bai x1 eta bai x2 aldagaiek osoko balioak hartu behar dituztenez, edozein aukera daiteke. Adibidez, x1. Oraingo soluzioan x∗1 = 3.6. x1 aldagaiak ezin ditu (3, 4) tartean dauden balioak hartu, osoko ez direlako. Beraz, x1 ≤ 3 edo x1 ≥ 4 izango da. Gure problema beste 2 problematan banatuko dugu: 1.proble- mari x1 ≤ 3 murrizketa erantsiz 2.problema sortzen da eta 1.problemari x1 ≥ 4 murrizketa gehituz gero 3.problema lortzen da. 2.Problema 3.Problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 o.m.m. o.m.m. x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≤ 3 x1 ≥ 4 x1, x2 ≥ 0 x1, x2 ≥ 0 Hurrengo irudian ikus daiteke x1 aldagaiaren (3, 4) tarteko puntuak alde bat- era utzi ditugula eta, ondorioz, soluzio bideragarrien multzoa bi azpimultzotan banatuta gelditu dela. Sortutako problemak independenteki ebazten dira, soluzioak ondokoak izanik.  xiv KAPITULUA 1. OSOKO PROGRAMAZIOA 2.Problema 3.Problema (x∗ 1, x ∗ 2) = (3, 4) (x∗ 1, x ∗ 2) = (4, 2.4) z∗ = 420 z∗ = 428 2. problemaren soluzio optimoa osokoa da eta, helburu-funtzioaren balio op- timoa, z∗ = 420, 1. problemaren balio optimoaren behe-borne bat da, zb = 420, hau da, helburu-funtzioari zb balioa baino txikiagoa ematen dioten soluzioak ez ditugu onartuko. 3. problemaren soluzio optimoa ez da osokoa, x2 aldagaiak 2.4 balioa hartzen duelako. Problema horren helburu-funtzioaren balio optimoa z∗ = 428 da. z∗ = 428 > 420 = zb denez, problema hau adarkatuz agian oraingoz dugun soluzio osoa baino hobea izango den beste bat aurkitu ahal izango dugu. Hori dela eta, x2 aldagaiaren balioak osoko izan behar duenez, x2 ≤ 2 eta x2 ≥ 3 murrizketak erantsiz 3.problema adarkatuko dugu ondoko biak sortzeko. 4.Problema 5.Problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 o.m.m. o.m.m. x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≥ 4 x1 ≥ 4 x2 ≤ 2 x2 ≥ 3 x1, x2 ≥ 0 x1, x2 ≥ 0 Bi problemetarako soluzio optimoak irudian agertzen dira. Graﬁkan ikusten da 5. problema bideraezina dela, problema horren adark- atzea amaitutzat emango dugularik. 4. problemaren soluzio optimoa (x∗ 1, x ∗ 2) = (4.16, 2) da eta z∗ = 422.8. Oraindik z∗ = 422.8 > 420 = zb denez, adark- atu egin beharko dugu. x1 aldagaia osokoa ez denez, prosezua errepikatuko dugu datozen bi problemak sortzeko.  1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK xv 6.problema 7.problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 o.m.m. o.m.m. x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≥ 4 x1 ≥ 4 x2 ≤ 2 x2 ≤ 2 x1 ≤ 4 x1 ≥ 5 x1, x2 ≥ 0 x1, x2 ≥ 0 Bi problemek osoko soluzio optimoak dituztenez, adarkatze prozesua amaituko dugu bietarako. Soluzio optimoak honakoak dira: 6. problemarako, (x∗1, x∗2) = (4, 2), z∗=410. 7. problemarako (x∗ 1, x ∗ 2) = (5, 0), z ∗ =400. Hala ere, aurretik topatutako behe-bornea ﬁnkatu duen soluzio osoak helburu-funtzioari balio hobea ematen dio, eta ondorioz,osoko problemaren soluzio optimoa (x∗1, x∗2) = (3, 4) da eta z∗ = 420. Ondoko zuhaitzean adarkatze-eta bornatze-metodoaren bidez sortutako prob- lema guztien soluzio optimoak ikus ditzakegu. 1.4 Osoko problemak ebazteko metodo algebraikoak Osoko problema linealak ebazteko ondoko metodoak existitzen dira. 1. Zerrendaketa osoaren metodoa Soluzioen kopurua ﬁnitua denez (soluzio-multzoa bornegabea denean ezik), soluzio guztiak kalkula daitezke eta horietan helburu-funtzioak hartzen duen balioak aztertuz, soluzio optimoa zein den erabaki daiteke. Hala ere, metodo hau ez da komenigarria kalkulu gehiegi eskatzen due- lako. Gainera, bideragarritasun eskualdea bornegabea denean ezinezkoa da soluzio guztiak zerrendatzea, soluzioen multzoa ez baita kopuru ﬁnitukoa.  xvi KAPITULUA 1. OSOKO PROGRAMAZIOA Adibidea Har dezagun xii.orrialdeko adibidea. Ondoko irudian osoko problemaren soluzio guztiak agertzen dira. Multzo horren puntu kopurua ﬁnitua da baina multzoa ez da ganbila eta, horregatik, ezin ditugu programazio linealeko ohiko teknikak erabili opti- moa lortzeko. Zerrendaketa osoaren metodoa erabil daiteke. Problemaren 30 soluzioak kalkulatu behar dira eta horietako bakoitzerako z kalkulatu. Horrela er- abakiko dugu zein den soluzio optimoa. 2 2. Zerrendaketa eta hurbilketaren metodoa Metodo hau problema erlaxatuaren ebazpenean oinarritzen da. Lortutako soluzioa osokoa bada, soluzio hori osoko problemaren soluzio optimoa ere bada. Bestela, soluzioa biribilduz hurbilketa guztiak lortzen dira, eta hori- etan helburu-funtzioa ebaluatuz aukeratzen da soluzio onena eta optimoa dela esaten da. Adibidea Aurreko problemari dogokion problema erlaxatuaren soluzio optimoa (x∗ 1, x ∗ 2) = (3.6, 3.4) da. Hurbilketa guztiak hauek dira: (3, 3), (3, 4), (4, 3), (4, 4). Helburu-funtzioaren balioa kalkulatzen badugu puntu guztietan, optimoa (4, 4) puntuan lortzen da. Hala ere, irudian ikus daiteke puntu optimo hori eta hurrengo onena ez direla bideragarri. Metodo honen problema da kalkulatu behar diren hurbilketen kopurua han- dia dela, (aldagaien kopurua n bada 2n hurbilketa posible dago) eta gainera horietariko batzuk bideraezin izan daitezke. 2 3. Mozketa-planoen metodoa Adarkatze- eta bornatze-metodoa bezala bideragarritasun eskualdea bi zati- tan banatzean datza metodo hau. Hori lortzeko murrizketa berriak gehitzen zaizkio problemari osoko soluzioa lortu arte. Hori da praktikan agertu  1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK xvii zen lehenengo metodoa, baina ez da eraginkorra tamaina erdiko problemak ebazteko. 4. Adarkatze- eta bornatze-metodoa Osoko ereduen soluzio graﬁkoan ikusi den bezala, eredu erlaxatuaren soluzio optimoa osokoa ez bada, daukagun problema bi azpiproblematan banatuko dugu (adarkatzea) aldagairen bat bornatuz. Prosezu horrek bideraezinak diren soluzio asko alde batera uzten ditu, eta tamaina erdiko problemak ebazteko egoki gertatzen da metodo hau. Hala ere, kalkulu kopuruaren aldetik oso konplexua da. Horregatik, prak- tikan bilaketa osoa egiten ez duen adarkatze- eta bornatze- algoritmoaren aldaeraren bat erabil daiteke. Soluzio graﬁkoa aztertu dugunean adarkatze- eta bornatze- algoritmoa er- abili dugu. Hurrengo atalean metodoaren urratsak emango ditugu. 1.4.1 Adarkatze- eta bornatze-metodoa Adarkatze- eta bornatze- algoritmoan problema erlaxatuaren kontzeptua eta soluzio- gaiaren kontzeptua erabiltzen dira. Deﬁnizioa 1.4.1 (Problema erlaxatua) Osoko problema lineala emanik, alda- gaiak osoko izatearen murrizketa kenduta lortzen den ereduari problema erlax- atua esaten zaio, hau da Osoko problema Problema erlaxatua max z = cT x max z = cT x o.m.m. o.m.m. Ax ≤ b Ax ≤ b x ≥ 0 eta osokoa x ≥ 0 Problema erlaxatuak osoko problemak baino murrizketa gutxiago ditu. Hor- rek esan nahi du osoko problemaren bideragarritasun eskualdea dagokion proble- ma erlaxatuaren bideragarritasun eskualdearen parte dela, hau da, osoko proble- marako z∗ erlaxatua ≥ z ∗ osokoa betetzen dela maximizatze kasuan.  xviii KAPITULUA 1. OSOKO PROGRAMAZIOA Deﬁnizioa 1.4.2 (Soluziogai) Osoko problema bat izanik, problemaren ebazpenaren iterazio bakoitzean oraingoz lortutako osoko soluzio onenak soluziogai izena hartzen du. Soluziogaia osoko problemaren soluzio optimoa izan daitekeenez gorde egin behar da hobe bat lortu arte. Helburu- funtzioak soluziogaian hartzen duen balioak zb behe-bornea ﬁnkatzen du. Azpiproblema baten helburu-funtzioaren balioa zb baino txikiagoa denean adar hori moztu ahal izango dugu (azkeneko problema). 1.4.2 Adarkatze- eta bornatze-algoritmoa Algoritmo hau erabil daiteke maximizatze-helburua daukaten osoko problemak ebazteko. Adarkatze- eta bornatze-algoritmoaren urratsak ondokoak dira. 1. urratsa: Hasieraketa Osoko problemari dagokion problema erlaxatua ebatzi. – Problema erlaxatuaren soluzio optimoa osokoa bada amaitu eta hori osoko problemaren soluzio optimoa da. – Bestela, soluziogaiari dagokion zb behe-bornea hasieratu; balio ezagu- nik ez badago, zb = −∞ izango da. 2. urratsa: Adarkatzea Azkenekoa ez den azpiproblemaren bat aukeratu. Aukeratutako azpiprob- leman osokoa izan behar duen eta ez den aldagairen bat hautatu1. Problema adarkatu aukeratutako aldagaiaren arabera. Horrela bi azpiproblema berri sortzen dira daukagunari xj ≤  . • Trantsizio-funtzioa x4 = x3 − 300 × d4. • Sarrera egoera-aldagaia. Helburua irabazia maximizatzea denez, furgonetan espazio erabilgarri minimoa uzteko egoera bakoitzerako baxera-garbigailu kopuru maximoa sartzea erabakiko dugu, bestelako erabakiak kontuan hartu gabe; x4 = 0, 100, 200. • Ordainketa. r4(x3, x4) = 4.500 × d4 • Funtzio errekurtsiboa. f ∗ 4 (x4) = max x3 {r4(x3, x4) + f ∗3(x3)} x3 x4 0/12.500100/12.000200/10.000300/8.500400/6.500500/6.000600/4.000700/2.500 900/ 0 f ∗ 4 (x4 ) x ∗ 3 0 12.500 - - 13.000 - - 13.000 - 13.500 13.500 900 100 - 12.000 - - 11.000 - - 11.000 - 11.500 100 200 - - 10.000 - - 10.500 - - - 10.500 500 Azken taulan f ∗ 4 (x4)-ren balio maximoa aukeratuko dugu. Balio hori x ∗ 4 = 0- ri dagokio. Taula horretan balio horri dagokion x∗ 3 = 900 da. Aurreko taulatara  2.6. OHARRAK lix joaz, x∗ 2 = 900 ondorioztatzen da, eta horrela x ∗ 1 = 900 eta x ∗ 0 = 900 lortuko ditugu. Beraz, politika optimoa 3 baxera- garbigailu garraiatzea da, horrekin fur- gonetaren ahalmena era egokienean aprobetxatzen delarik. Ondorengo graﬁkan puntuz adierazi da politika optimoa. 2.6 Oharrak Kapitulu honetan problema dinamiko deterministak aztertu ditugu, etapa bakoitzeko egoera- aldagaien arteko trantsizioak gertaera determinista dela alegia. Hala ere, praktikan badira problemak zeinetan trantsizio horiek probabilitate- banaketa bat- en bidez gertatzen diren. Problema horiek programazio dinamiko estokastikoaren problemak dira. Bestalde, programazio dinamikoaren problema batzuetan erabaki-aldagaiak eta egoera aldagaiak jarraiak dira. Kasu horietan egoera jarraidun programazio dinamikoko problemak ditugu. Horien soluzioa lortzeko teknika bereziak behar dira. Azkenik esan, programazio dinamikoa erabiltzen denean kalkulu-kopuruak sortzen dituen zailtasunak kontuan hartu behar direla. Zenbait problematan egoera- aldagaien kopurua hain handia izateagatik, ebaztea oso zaila gertatzen da, makina handiekin lan eginda ere. Horrek programazio dinamikoaren erabilpena mugatzen du praktikan. Problema hori dimentsionaltasunaren problema da eta, programazio dinamikoaren bidez problemaren soluzioa lortzeko egoera-aldagai bat baino gehi- ago behar denean agertzen da sarritan. Kasu horretan tamainaren handitasuna- gatik programazio dinamikoa erabiltzea ezinezko gertatzen denez, teknika berezi- ak garatu dira. 2.7 Ariketak 1. Enpresa batek 50 m-ko zabaleradun eta 200 m-ko luzeradun paper-bobinak moztu behar ditu ondoko eskaerak betetzeko  lx KAPITULUA 2. PROGRAMAZIO DINAMIKOA Luzera ( li) Eskariak Irabaziak (ci) 50 m 3 80 60 m 3 120 70 m 2 130 80 m 2 150 Lortu behar diren bobinen zabalera estandarra da, hau da, 50 m-koa, eta luzerak taulan aipatutakoak dira. Eskaera guztiak bete ezin daitezkeenez, erabaki ezazu ea zein mozketak sortuko duen irabazi maximoa. 2. Alderdi bat hurrengo hauteskundeetarako kanpaina prestatzen ari da. Ir- ratian eta telebistan (IRTB), karteletan (KAR) eta mitinetan (MIT) inber- titzeko 1.000 milioi pzta dauka. Taulan ematen da inbertitutako kopuru desberdin bakoitzak botuen portzen- taiaren ehuneko zer kopuru igotzea lortzen duen. INBERT. IRTB KAR MIT 100 2 3 - 200 8 9 4 300 12 12 7 400 14 12 10 500 17 13 14 600 18 16 15 700 19 18 15 800 20 19 17 Alderdiak hiru aukeratan inbertitu behar dela erabaki du, gutxienez 100 mil- ioi irrati- telebistan eta karteletan eta 200 milioi mitinetan. Plantea eta ebatz ezazu programazio dinamikoa erabiliz.  2.7. ARIKETAK lxi 3. Ikasle batek 4 praktika bukatzeko 12 egun ditu. Programazio dinamikoan ikasitakoa erabili nahi du ikasteko dituen egunak 4 praktiken artean era egokienean banatzeko, hau da, lortuko dituen puntuen batuketa maximizatzeko. Praktika bakoitza bukatu ahal izateko gutxienez 2 egun eta gehienez 6 er- abili beharko ditu. Praktika bakoitzari ematen dion egun-kopuruaren arabera lor dezakeen pun- tuaketa ondoko taulan ematen da. Egunak 1. prak. 2. prak. 3. prak. 4. prak. 2 1 1 2 2 3 2 2 2 4 4 2 3 3 4 5 3 4 4 5 6 3 5 4 5 Plantea eta ebatz ezazu problema. 4. Enpresa batek produktu-mota bakarra ekoizten du. Datozen lau hilabetee- tarako produktuaren eskaria, ekoizpen-ahalmena eta ekoizpen-kostua on- doko taulan ematen dira. Eskaria Ekoizpen-ahalmena Ekoizpen-kostua Hilabetea ai ei ci 1 10 20 1.300 2 15 35 1.400 3 25 25 1.300 4 20 15 1.500 Hilabete batean saltzen ez diren unitateak biltegiratuak izango dira, biltegiratze- kostua 100 unitatekoa izanik hilabeteko. Hasieran ez dago unitaterik bilte- gian, eta amaierako inbentarioa zero izatea nahi da. Enpresak kostu min- imoko ekoizpen-politika zehaztu nahi du. Problema plantea ezazu.
