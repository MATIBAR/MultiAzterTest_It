                                        2.5AZPIRRUTINAK 2.5.1 SARRERA Aurreko kapituluetan azaldu den moduan, programa baten aginduak ondoz ondoko helbideetan gordetzen dira memorian. Hori dela eta, programak sekuentzialki exekutatzen dira, hots, agindu bat exekutatu ondoren memoriako hurrengo agindua exekutatuko da. Aginduen exekuzio-ordena edo fluxua aldatu ahal izateko, PCaren sekuentzia eteten duten aginduak erabili behar dira: jauzi-aginduak, hain zuzen ere. 2.5.1 irudian ageri den moduan, bi motako jauziak daude: itzulera gabekoa eta itzuleraduna. Orain arte ikusi ditugun jauziak —jmp, beq, ...— itzulera gabekoak dira, programa ez baita itzuliko jauzia egin den puntura. Aldiz, jauzi itzuleradunak exekutatzen direnean, hainbat agindu exekutatu ondoren, programak berreskuratuko du aginduen jatorrizko fluxua (gorde baita jauziaren ondorengo aginduaren helbidea). Kapitulu honen helburua jauzi itzuleradunak lantzea da, hots, azpirrutinak aztertzea. ****** 2.5.1 irudia.Itzulera gabeko jauziak eta itzuleradunak. ****** Goi-mailako programazio-hizkuntzek funtzioak eta prozedurak erabiltzen dituzten modu berean, mihiztadura-hizkuntzek azpirrutinak (azpiprogramak) erabiltzen dituzte. Lan jakin bat burutzen duen makina-hizkuntzako agindu-multzoa da azpirrutina bat, eta programa nagusiaren edo azpirrutina baten edozein puntutatik aktiba, dei, edo exekutarazi daiteke, baita azpirrutinatik bertatik ere. Zentzu horretan, bi aktibazio mota daude: kanpo-aktibazioa —programa nagusitik edo beste azpirrutina batetik aktibatzen denean— eta barne-aktibazioa —azpirrutinatik bertatik aktibatzen denean—. Azpirrutinak erabiltzeak baditu abantailak eta desabantailak. Abantailen artean, hauek dira aipagarrienak: • Programak toki gutxiago behar du memorian. Izan ere, azpirrutinari dagokion kodea behin bakarrik ageri da programan (memorian), nahiz eta programa deitzailearen puntu askotatik aktiba daitekeen; azpirrutinen kodea berrerabili egiten da. • Programaren kodeak egitura argiagoa du. Ondorioz, programa zuzenak lortu arte ezinbestekoak diren zuzenketak, aldaketak eta antzekoak egitea errazagoa da. Horrez gain, programa-liburutegiak erabiltzeko aukera dago. Baina azpirrutinak erabiltzeak baditu desabantailak ere: • Programen exekuzio-denbora hazten da, agindu gehiago exekutatu behar baitira: azpirrutinak deitzeko, programa deitzailera itzultzeko, eta deitzen duen programaren eta azpirrutinaren arteko informazio-trukea egiteko (parametroak pasatu eta emaitza itzuli). • Prozesadorearen konplexutasuna areagotzen da, hardware berezia gehitu behar baita azpirrutinen kudeaketa eraginkorra izan dadin. Izan ere, programen exekuzioak analizaturik, egiaztatu da azpirrutinen kontrolarekin erlazionatutako kodea (deiak eta itzulerak), batez bestean, aginduen %3-%10 tartean dagoela. Hala izanik, azpirrutinen erabilera eraginkorra izateko, garrantzitsua izango da hardwareak eskain dezakeen edozein laguntza. 2.5.2 AZPIRRUTINEN SAILKAPENA Azpirrutinen exekuzioaren analisia egin baino lehen, ikus dezagun azpirrutinen sailkapen nagusia:   • Maila bakarrekoak: azpirrutinaren barnean ez da beste azpirrutinarik aktibatzen. 2.5.2 irudian ageri da adibide bat: azpirrutina bat bi aldiz deitzen da programa nagusitik. Irudian ageri diren zenbakiek exekutatze-ordena denboran zehar adierazten dute.   • Maila anitzekoak: azpirrutinaren barnean beste azpirrutina batzuk aktibatzen dira (2.5.3 irudia).   • Errekurtsiboak: azpirrutinak bere buruari dei egiten dio (2.5.4 irudia) zuzenean, edo, agian, beste azpirrutina baten bidez (zeharka).                             ****** 2.5.2 irudia.Maila bakarreko azpirrutina. ******                             ****** 2.5.3 irudia.Maila anitzeko azpirrutina. ******                                                  2.5.4irudia.                           Azpirrutina errekurtsiboa. Bestalde, erabilerarenarabera, beste sailkapen hau egin daiteke: • Ez-berrabiagarriak: ezin dira berriz aktibatu aurreko aktibazioaren exekuzioa bukatu artean. • Berrabiagarriak: bigarren mota honetan, onartzen da azpirrutina berriz aktibatzea, nahiz eta aurreko aktibazioa oraindik bukatu gabe egon. Halako azpirrutinak oso erabilgarriak dira, esaterako, sistema eragileetarako zein konpiladoreetarako konputagailu multiprogramatuetan (aldi berean programa bat baino gehiago exekutatzea onartzen duten sistemak). Azpirrutina berrabiagarriek baldintza batzuk bete behar dituzte: (a) azpirrutinak ezin du bere kodea aldatu exekuzioaren ondorioz (ohiko ezaugarria egungo edozein programatan); eta (b) azpirrutinaren datuetarako behar den memoria-eremuak desberdina izan behar du exekuzio batetik bestera. 2.5.3 AZPIRRUTINEN EXEKUZIOAREN ANALISIA Azpirrutina bat exekutatzeko, pauso hauek jarraitu behar dira: (a) azpirrutinak erabiliko dituen parametroak edo datuak dagokien tokian idatzi; (b) azpirrutinara jauzi, bere kodea exekutatzeko; eta, azkenik, (c) deia egin duen programara itzuli, haren exekuzioarekin jarraitzeko. Azpirrutinaren exekuzioarekin lotutako informazio guztia (parametroak itzulera-helbideak, ...) aktibazio-bloke izeneko datu-egituran pilatzen da. Azpirrutinak exekutatzeko jarraitu beharreko pauso guztiak aztertuko ditugu, zehatz-mehatz, hurrengo ataletan, kasu sinpleenetik konplexuenera.   2.5.3.1 Deia eta itzulera Deia egiteko, hots, azpirrutinaren kodera jauzi egiteko, agindu berezi bat erabiltzen da; Agindu hori callazpirrutina_izenaizaten da. Agindu horren eginkizuna bikoitza da. Batetik, agindu-sekuentzia eteten du, jauzi bat eginez. Horretarako, ohiko PC:=PC+i egin beharrean, PC:=PC+despl_azpi egiten du, non despl_azpi desplazamendua call aginduan adierazi den azpirrutinara dagoen distantzia baita. PCak adieraziko duen helbide berri horretan hasten da azpirrutinaren kodea. PCa aldatzea da, hain zuzen ere, edozein jauzi-aginduk egiten duena. Baina, bestetik, eta hau da call aginduaren berezitasuna, itzulera-helbidea (@itzulera) gordetzen du, azpirrutinaren exekuzioa amaitzean programa nagusira itzuli ahal izateko. Programa nagusira itzultzeko, beste agindu bat erabili ohi da; retda agindu hori. Aginduaren eginkizuna sinplea da: PC erregistroan kargatu behar du call aginduak gorde duen itzulera-helbidea ( PC:=@itzulera ). Bi agindu horien bidez, 2.5.5 irudian ageri den moduan, exekuzioaren fluxu sekuentziala (PCak hartzen dituen balioak) etetea lortzen da. Adibidean, agindu bakoitzak bi memoria-posizio betetzen ditu.   ****** 2.5.5 irudia.Azpirrutina baten exekuzioa: exekutatzen diren aginduen                            helbideen segida. ****** 2.5.5 irudiko adibidean, azpirrutina bukatzen denean, PCaren edukia 110etik 8ra aldatu behar da, deia egin duen programara itzultzeko. Itzulera-helbide hori call aginduak gorde du, eta horretarako toki jakin bat behar da. Non_gorde daiteke itzulera-helbidea? Aukera bat baino gehiago dago: a.Memoria-posizio edo erregistro finko bat azpirrutina guztientzat. call agindua exekutatzen denean, itzulera-helbidea beti toki berean gordetzen da, dela erregistro jakin batean dela memoria-posizio jakin batean. Hortik hartuko du ret aginduak itzulera-helbidea, azpirrutina bukatzean, programa nagusira itzultzeko. Erregistro bat erabiltzen denean, prozesua azkarragoa da memoria erabiltzen denean baino. Adibidez, IBM 360-ak r14 erregistroa erabiltzen zuen itzulera-helbidea gordetzeko (5.6 irudia). Aukera bera erabiltzen da gaur egun prozesadore askotan (MIPS, PowerPC, ...), halakoek agindu berezi bat erabiltzen baitute, Jump-and-Link (JAL) izenekoa, azpirrutina sinpleak exekutarazteko. Esaterako, MIPS prozesadore-familiak r31 erregistroa erabiltzen du itzulera-helbidea gordetzeko, Jump-and-Link agindua exekutatzen denean. ARM prozesadoreak berriz, BL (branch and link) izeneko agindua erabiltzen du azpirrutinak exekutatzeko eta itzulera helbidea lr (r14) erregistroan gordetzen du. Erregistro bat erabiltzea itzulera-helbidea gordetzeko ez da soluzio orokorra, ez baitu balio azpirrutina mota guztietarako; hala ere, exekuzioa azkarra denez, oso erabilia da arazorik sortzen ez duten kasuetan.      ****** 2.5.6 irudia.Itzulera-helbidearen kudeaketa IBM 360-an. ****** Itzulera-helbidea erregistro batean gordetzeak badu arazo nabarmena maila anitzeko azpirrutinak erabili behar direnean. Azpirrutina bukatu baino lehen beste bat aktibatzen bada, aurrekoaren itzulera-helbidea galduko da, itzulera- helbide berria erregistro berean (adibidean, r14-an) idatziko baita, eta aurrekoa galdu! 2.5.7 irudian ageri da arazo hori: AZP1 azpirrutina exekutatzera jauzi egin denean gorde den itzulera-helbidea, 8, galdu egin da AZP2 deitu denean, une horretan bigarren itzulera-helbide bat idatzi baita, 108. Hori dela eta, ezin izango da AZP1 azpirrutinatik programa nagusira itzuli. ****** 2.5.7 irudia.Maila anitzeko azpirrutinentzat (a) soluzioak duen arazoa.                                     ******   Maila anitzeko azpirrutinak exekutatu ahal izateko, aurreko call aginduarekin gorde den itzulera-helbidea lekuren batean (memorian edo beste erregistro batean) salbatu beharko da hurrengo deia egin aurretik; itzuli ondoren, lehenengo itzulera-helbidea berreskuratu beharko da, gorde den tokitik. Arazoa hala konpontzen denean, “software irtenbidea” erabili dela esaten da. IBM 360- an adibidez, 2.5.8 irudian ageri den moduan egiten zen. ******   ****** ******   ****** ******   ******                                     ******                                       ****** ******   ****** ******   ******   ****** 2.5.8 irudia. Maila anitzeko azpirrutinen kudeaketa IBM 360 makinan.                                     ****** b.Memoria-posizio (edo erregistro) desberdin bat azpirrutina bakoitzarentzat. Azpirrutina bakoitzak memoria-posizio edo erregistro finko bat erabiltzen du dagokion itzulera-helbidea gordetzeko. HP 2100-ean adibidez, azpirrutinaren lehenengo memoria-posizioan (kodearen aurrean) gordetzen zen itzulera-helbidea, eta hortik eskuratzen zuen geroago ret aginduak. 2.5.9 irudian, estrategia hori erabili da maila anitzeko azpirrutina bat (AZP1) exekutatzeko.  ****** 2.5.9 irudia.Maila anitzeko azpirrutinen kudeaketa, itzulera-helbidea            azpirrutina bakoitzaren hasieran gordetzen denean. ****** Gauza bera egin daiteke erregistroak erabiliz. PDP-11 konputagailuan, esaterako, azpirrutinaren deian bertan adierazten zen itzulera-helbidea gordetzeko erabili behar zen erregistroa. Ikusi dugun moduan, metodo honek maila bakarreko eta maila anitzeko azpirrutinak onartzen ditu, baina, hala ere, ezin da erabili azpirrutina errekurtsiboak antolatzeko (azpirrutina errekurtsiboak bere burua deitzen du). Izan ere, dei errekurtsibo bakoitzaren ostean, aurreko deiaren itzulera- helbidea (adibidean, 8) galdu egiten da, memoriako helbide berean idazten baita beti (2.5.10 irudia). Errekurtsibitatea erabili nahi bada, beste teknikaren bat erabili beharko da.     ****** 2.5.10 irudia.(b) teknika erabiliz, errekurtsibitatea kudeatzeko                                 arazoak. ****** c. Memoriako pila. Pila izeneko datu-egitura, Datu-biltegi berezi bat besterik ez da. Eskuarki, memoriako zati bat. Datuak pilan uzten dira eta pilatik hartzen dira, baina biltegi hori modu berezian kudeatzen da, LIFO (Last In First Out) moduan: gorde den azkeneko datua da aurrena ateratzen. Memoriako zati horretan, pilan, idazteko edo irakurtzeko, erakusle berezi bat erabiltzen da, SPa (pilaren erakuslea, Stack Pointer), eta agindu bereziak ere bai: push eta pop. Azpirrutinen itzulera-helbidea gordetzeko hirugarren aukera pila da, hain zuzen ere. Hala egiten denean, azpirrutinak habira daitezke, bata bestearen gainean metatuko baitira itzulera-helbideak pilan, batere informaziorik galdu gabe. SP erakusleak erakutsiko du non gorde helbide horiek. Beraz, maila bakarreko azpirrutinak, maila anitzekoak, eta errekurtsiboak exekuta daitezke arazorik gabe (2.5.11 irudia).        ****** 2.5.11 irudia.Itzulera-helbidea pilan gordetzen da. ****** Ia prozesadore guztiek egiten duten moduan, ARM prozesadoreak ere pila erabiltzen du itzulera-helbideak gordetzeko. Hala ere, lehen aipatu den bezala, ARMko mihiztadura lehengoaian call motako agindu baten ordez bl agindua erabiltzen da azpirrutineri deitzeko eta ez dago ret bezalako agindurik. • bl, azpirrutina bat deitzeko agindua: bl#@ r14 =PC+4 {itzulera-helbidea r14 erregistroan gordetzen da} PC:=@ {azpirrutinaren helbidea PCan kargatzen da}     Maila anitzeko eta azpirrutina errekurtsiboen arazoa konpontzeko, azpirrutina baten exekuzioaren hasieran r14 edo lr erregistroa pilan gordetzen da, eta azpirrutinaren exekuzioaren bukaeran bere balioa berreskuratzen da pilatik. ARM prozesadorean r13 erregistroa erabiltzen da SP erakuslea gordetzeko eta push agindua erabiltzen da parametroak pilan sartzeko.     • pushagindua: push{r1,r2...rn} sp =sp-4; M   buk: pop r3 pop r2 pop r1 pop r30 ret  .endp FAKT .end    Mihiztadura-hizkuntzako programan ikus daitekeen moduan, programa nagusia ez da aldatu aurreko adibidetik hona.FAKTazpirrutinan, berriz, dei errekurtsiboa {2*} egin aurretik, tokia erreserbatu da pilan,FAKTen aktibazio berriaren emaitza gorde ahal izateko {1*}. Aktibazioa amaitutakoan, itzulitako balioa hartu {3*}, funtzioaren emaitza kalkulatu —iFAKT(i–1)—, eta emaitza dagokion tokian utziko da {4*}.   1 Pilaren edukia ez da, berez, ezabatzen. Edukia desagerrarazteko, pilaren tontorra markatzen duen erakuslea, SPa, gutxiagotzen da, besterik ez.                                        1
