        2.7 PROGRAMEN MIHIZTATZEA, ESTEKATZEA ETA KARGA Programa bat idatzi ondoren, hainbat prozesu bete behar dira programa hori exekutatu ahal izateko. Batetik, mihiztadura-hizkuntzaz idatzita dagoen programa makina-hizkuntzara itzuli behar da (konputagailuak ulertzen duen hizkuntza bakarra). Gero, programa osatzen duten modulu1 guztiak estekatu (elkartu,tolink) behar dira; azkenik, programa exekutatzeko, memoria nagusian kargatu behar da. Atal honetan, prozesu horiek aztertuko ditugu. 2.7.1 Programa mihiztatzailea Konputagailuek makina-kodean dauden programak bakarrik exekutatzen dituzte. Beraz, mihiztadura-hizkuntzaz zein goi-mailako hizkuntzaz idatzita dauden programak makina-kodera itzuli behar dira. Mihiztadura-hizkuntzaz idatzita dauden programak itzultzeko, mihiztatzaileizeneko programa berezia erabili behar da (goi-mailako hizkuntzak itzultzeko, konpiladoreak erabiltzen diren moduan). Mihiztadura-hizkuntza bakoitzari mihiztatzaile desberdina dagokio. Programa mihiztatzaileak, beraz, makina-kodera itzultzen ditu mihiztadura- hizkuntzaz idatzitako agindu eta datuak. Itzulpen-prozesuan zehar, aldagaien eta aginduen helbideak kalkulatu behar dira, aldagaien hasierako balioak esleitu, etiketek adierazten dituzten helbideak lortu, eta abar. Oro har, itzulpena bi fase edo pasalditan egiten da, hau da, bi aldiz analizatzen da programa. Prozesua ulertzeko, azter dezagun nola egiten den modulu edo fitxategi bakarreko programa baten mihiztatze-prozesua. 2.7.1 irudian, prozesuaren eskema orokorra ageri da. 2.7.1.1 Lehenengo pasaldia Lehenengo fasean, programaren aginduak irakurri ahala, banan-banan, sintaxia egiaztatzen da, eta moduluari (fitxategiari) dagokionsinbolo-taulasortzen. Taula horretan gordetzen dira: programan agertzen diren sinboloak (aldagaien izenak, etiketak, ...), dagozkien helbide erlatiboak (programaren hasierarekiko), eta aldagaien hasiera-balioak. Bi atal bereizten dira sinbolo- taulan: datuei dagokiena (aldagaiak), eta etiketei dagokiena. Oro har, mihiztatzaileak ezin izango du etiketa guztiak itzuli lehenengo pasaldian (ezin izango die helbide bat esleitu); kasu honetan, esaterako:    ... jmp et1 {et1etiketaagerida} ... et1:addi r1, r1, #1 {et1etiketakdefinitzenduenhelbidea} ...    Hain zuzen ere, bere definizioa baino lehen ageri da et1 etiketa konpilazioko lehenengo pasaldian, eta oraindik ez dakigu zein den adierazten duen helbidea. Beraz, sinbolo-taulan idazten dira sinbolo horiek, besterik gabe, eta bigarren pasaldirako uzten da haien ebazpena (ikus 2.7.1 adibidea). Horrez gain, moduluak behar duen memoria kopurua ere erabakitzen da lehen pasaldian. 2.7.1.2 Bigarren pasaldia Lehenengo pasaldia egin ondoren, mihiztatzailea prest dago objektu-kodea sortzeko, hots, jatorrizko programa makina-hizkuntzaz, bitarrez, emateko. Izan ere, kode hori lehenengo fasean ere sor daiteke agindu askotarako; ez, ordea, guztietarako. Beraz, mihiztaketaren bigarren fasean, aginduak berrirakurtzen dira eta dagokien makina-kodea sortzen da, 1ekoen eta 0koen segidak, hain zuen ere (eragiketa-kodeak, eragigaiak, helbideak, ...). Eragiketa-kodea itzultzeko, aurredefinitutako taula bat erabiltzen da; taula horretan daude mihiztadura- hizkuntzako mnemoteknikoei (add, ld, ...) dagozkien kode bitarrak. Gero, eragigaiak adierazi behar dira, bitarrez. Hiru aukera besterik ez dago: berehalako datu bat (arazorik ez bitarrez adierazteko); erregistro bat (haren kode bitarra eman behar da); edota memoria-helbide bat (helbidea absolutua bada, nahikoa da bitarrez ematea; aldagai baten izena bada, lehen fasean sorturiko sinbolo-taulan egongo da haren helbidea). Hala, agindu bakoitzari dagokion makina-kodea, kode bitarra sortu da. Tartean, kode-taulan ez dagoen agindu bat edo sinbolo-taulan ez dagoen sinbolo bat detektatzen bada, erroretzat jo, abisu bat eman, eta prozesua bertan behera utziko da.                                         2.7.1irudia.Mihiztatze-prozesua bi pasalditan.   Bigarren pasaldian sortzen den objektu-moduluak honako informazio hau jasoko du: (a) moduluaren izena eta luzera; (b) sarrera-puntua edo programaren lehenengo aginduaren helbidea; (c) kanpo-erreferentziak, hau da, beste objektu- modulutan definituta dauden aldagaien edo errutinen erreferentziak; (d) programaren datuak, datu-blokearen 0 helbidetik aurrera, eta (e) makina- hizkuntzako aginduak, agindu-blokearen 0 helbidetik aurrera. Hau da, programa exekutatzeko behar den informazio guztia. Gainera, objektu-programa birkokagarria da, hau da, programaren aginduei ez zaizkie memoria-posizio finkoak esleitu, erlatiboak baizik. Izan ere, programa memorian kargatzen denean erabakiko dira helbide fisiko absolutuak. Gauza bera gertatzen da helbide bat adierazten duten eragigaiekin (helbideratze absolutua zein indexatua erabiltzen dutenak). BIRD konputagailurako diseinatu den mihiztatzaileak ere bi pasalditan betetzen du bere lana. Lehenengo pasaldiak sinbolo-taula eta behin-behineko listatu bat sortzen ditu, non agindu batzuk dagoeneko itzuli baitira. Gainerako aginduak bigarren pasaldian itzultzen dira, aurreko faseko sinbolo-taula erabiliz, eta, hala, behin-betiko listatua sortuko du. Listatu horretan, datuen zein aginduen helbideak erlatiboak dira, dagozkien blokeekiko (ikus 2.7.1 adibidea). 2.7.2 Programa estekatzailea(linker) Oro har, hainbat errutinatan edo azpiprogramatan banatzen dira programak. Fitxategi desberdinetan, hots, iturburu-modulu desberdinetan egon ohi dira halako errutinak, eta banaka mihiztatzen dira; ondorioz, fitxategi desberdinetan izango dira dagozkien objektu-moduluak. Beraz, ohikoa da, modulu baten barruan, beste modulu edo fitxategietan dauden errutinak erreferentziatzea, eta, halaber, errutina horiek erabiltzea haien moduluetan definituta ez dauden aldagai globalak. Kanpo-erreferentzien arazoa deritzo horri. Programatzaileen azpirrutinez gain, ohikoa da, eta lagungarria, aurredefinitutako errutinak (matematikakoak, gailuak kontrolatzekoak, ...) erabiltzea programak osatzeko. Errutina komun horiek liburutegietan biltzen dira, programatzaileek erabil ditzaten behin eta berriz idatzi behar izan gabe. Programatzaileen lana errazteaz gain, programazio-erroreak gutxitzen ditu liburutegiak erabiltzeak, eta kode optimizatuagoa sortzen du. Objektu- liburutegiak deritze liburutegi horiei. Aurreko errutinak bezala, errutina horiek ere ez daude definituta erabiltzailearen fitxategiaren barruan. Estekatzailearen egitekoa, hain zuzen ere, hainbat objektu-modulutatik abiatuta moduluexekutagarribakarra sortzea da. Hori lortzeko, bi lan bete behar ditu. Batetik, modulu bakoitzeko erreferentziei dagozkien helbide erlatibo berriak sortu, modulu bakarraren hasiera-helbidea kontuan harturik; eta, bestetik, estekatu behar dituen moduluen kanpo-erreferentziak ebatzi. 2.7.2 irudian ageri da estekatzailearen egitekoa.                         2.7.2irudia. Estekatzailearen egitekoa. 2.7.3 Programa kargatzailea Azkenik, programa bat mihiztatu eta estekatu ondoren, memorian kargatu eta abiarazi behar da. Kargatzaileak betetzen du ataza hori. Kanpo-memoria batean (disko batean, esaterako) dagoen modulu exekutagarria hartu, eta memoria nagusian kopiatuko du; moduluaren hasiera-helbidea kargatuko du PC erregistroan, eta, azkenik, helbideratze absolutua edo indexatua erabiltzen den kasuetan, benetako helbide fisikoak kalkulatuko ditu. Azkenik, programa abiaraziko du, lehenengo agindua —sarrera-puntukoa— exekutatuz.   2.7.1 Adibidea  Mihiztatzailearen eginkizunak ulertzeko asmoz, azter dezagun nola mihiztatzen den programa hau, pausoz pauso, BIRD simuladorean (ikus aginduen formatua A eranskinean). Prozesua argitzeko, lerroak zenbakituta daude.  1. .title ADIBIDEA  2. ALD1: .word 1; 3. ALD2: .value 5;  4. .proc main  5. sub r1, r1, r1 6. st r1, ALD1 7. ld r2, ALD2 8. beg: sub r3, r2, r1 9. beq r3, buk  10. subi r2, r2, #1 11. jmp beg  12. buk: retm  13. .endp main 14. .end  ç Mihiztatze- prozesuabipasalditanegitenda.Honazeregitenduenmihiztatzaileak,urratsbakoitzean,iturburu- programalerrozlerroirakurtzenduenean:   Lehenengopasaldia. 1. ler. Analisi sintaktikoa. 2.ler.ALD1etiketasinbolo-taulangordetzenda,etadagokionhelbideaesleitzenzaio (0helbidetikabiatuta). 3.ler. Eragiketaerrepikatzenda,bainaALD2aldagaiarekin. Une horretan, sinbolo-taularen edukia (datuak) hau izango da: Datua Helbidea Balioa ALD10000H - ALD20001H 5 4. ler. Moduluaren sarrera-puntua identifikatzen da. 5. ler. Analisi sintaktikoa. 6.ler. Analisisintaktikoa.ALD1enordez,sinbolo- taulandagoenharenhelbideaidaztenda(beti0helbidetikhasita). 7.ler. Analisisintaktikoa.ALD2renordez,sinbolo- taulandagoenharenhelbideaidaztenda. 8.ler.begetiketasinbolo-taulangordetzenda,etadagokionhelbideaesleitzenzaio (programarenhasiera-helbidearenarabera,0tikabiatuta).Analisisintaktikoa. 9.ler. Sinbolo- taulanezdagoenerreferentziabataurkituda,buk.Izanere,12.lerroraarteezdaagertukoetiketahorrendefinizioa.Bitartean,honelageratukodasinbolo- taula(etiketak): Etiketa Helbidea beg0006H buk? 10. ler. Analisi sintaktikoa. 11.ler.begetiketarenerreferentzialehenengopasaldihonetanebatzdaiteke,sinbolo- taulanbaitago.Halaere,mihiztatzailehonekbigarrenpasaldianebaztendituetiketaguztiak,denakdefinitutadaudenean.Analisisintaktikoa. 12.ler.buketiketasinbolo- taulangordetzenda,etadagokionhelbideaesleitzenzaio.Analisisintaktikoa. Bukaeran, honela geratuko dira programaren etiketak sinbolo-taulan: Etiketa Helbidea beg0006H buk000EH 13. Moduluaren bukaera. 14. Mihiztaketaren lehen pasaldia bukatzen da.       INFORMATIKA FAKULTATEA DONOSTIA - KONPUTAGAILUEN ARKITEKTURA ETA TEKNOLOGIA      FACULTADINFORMATICASANSEBASTIAN-ARQUITECTURAYTECNOLOGIADECOMPUTADORES ==================================================================================                                 .title ADIBIDEA   DATU-DEFINIZIOA / DEFINICION DE DATOS -------------------------------------------------------------- @0000-> ald1: .word 1; @0001-> ald2: .value 5;   ******************************************************************************************** PROGRAMAREN LISTATUA / LISTADO DEL PROGRAMA ------------------------------------------------------------------------------- .proc main @0000: 001011 00001 00001 ------------------00001 sub r1, r1, r1 @0002: 000011 00001 -------- 0000000000000000 st r1, ALD1 @0004: 000000 00010 -------- 0000000000000001 ld r2, ALD2 @0006: 001011 00011 00010 ------------------00001 beg: sub r3, r2, r1 &@0008: 01101000011--------&bukbeq r3,buk @000A: 001100 00010 00010 0000000000000001 subi r2, r2, #1 &@000C: 011001----------------&begjmp beg @000E: 100000 -------- -------- --------------------------- buk: retm .endp main .end  2.7.3irudia.Mihiztaketaren lehen pasaldian sortutako behin-behineko listatua                                   (tmp.lis). Analisisintaktikoarekinbatera,etaerroresintaktikorikezbada,agindueidagokienmakina- kodeaeresortzenda,sinbologuztiakdefinitutaegonezgero.Adibidean,aginduguztienkodeasordaitekelehenengopasaldian,bikasuetanizanezik: 9.eta11.lerrokoaginduak,etiketakerreferentziatzenbaitituzte.Bigarrenpasaldianebatzikodiraetiketahoriek.Behin- behinekoemaitzaedolistatuhoritmp.lisfitxategianuztenda.2.7.3irudian,fitxategihoriagerida.Ikusdaitekeenez,buketabegetiketakezdiraoraindikebatzi.   Bigarrenpasaldia. Etiketa guztiak definituta daude, dagoeneko, sinbolo-taulan; beraz, aginduen kodea osa daiteke. 9.ler.buketiketaordezkatzendadagokiondesplazamenduaz(sinbolo- taulandagoeninformazioaerabiliz). 11.ler.begetiketaordezkatzendadagokiondesplazamenduaz. 12. ler. Mihiztaketaren bigarren pasaldia bukatzen da.   Bigarrenpasaldianaurkidaitezkeenerroreaketiketendefinizio- ezagatiketorrikodira,ezdagobesteaukerarik.Errorerikezean,programaridagokionbehin- betikolistatuasortuda,izena.lisizenekofitxategian(iturburu- programaizena.asmfitxategianzegoen). 2.7.4 irudian, adibideko programari dagokion behin-betiko listatua ageri da. Etiketa guztiak ebatzita daude: haien ordez, desplazamenduak ageri dira.       INFORMATIKA FAKULTATEA DONOSTIA - KONPUTAGAILUEN ARKITEKTURA ETA TEKNOLOGIA      FACULTADINFORMATICASANSEBASTIAN-ARQUITECTURAYTECNOLOGIADECOMPUTADORES =================================================================================                                 .title ADIBIDEA   DATU-DEFINIZIOA / DEFINICION DE DATOS ------------------------------------------------------------ @0000-> ald1: .word 1; @0001-> ald2: .value 5;   ******************************************************************************************* PROGRAMAREN LISTATUA / LISTADO DEL PROGRAMA ------------------------------------------------------------------------------ .proc main @0000: 001011 00001 00001 ------------------00001 sub r1, r1, r1 @0002: 000011 00001 -------- 0000000000000000 st r1, ALD1 @0004: 000000 00010 -------- 0000000000000001 ld r2, ALD2 @0006: 001011 00011 00010 ------------------00001 beg: sub r3, r2, r1 @0008: 01101000011--------0000000000000110beq r3,buk @000A: 001100 00010 00010 0000000000000001 subi r2, r2, #1 @000C: 011001----------------1111111111111010jmp beg @000E: 100000 -------- -------- --------------------------- buk: retm .endp main . end 2.7.4irudia.Mihiztaketaren bigarren pasaldian sortutako behin-betiko listatua. Helbide guztiak, datuenak zein aginduenak, erlatiboak dira, dagokien hasierako                                  blokearekiko. Horrezgain,izena.binfitxategiaeresortuda(konputagailuerrealetanobjektu- kodeasortzendenmoduberean);fitxategihorierabilikodugerosimuladoreakprogramarenexekuzioasimulatzeko.             1Programa bat hainbat modulutan (fitxategitan) bana daiteke. Modulu guztiak itzuli behar dira makina-hizkuntzara, kontuan harturik erreferentzia egingo diotela elkarri.                                        6
