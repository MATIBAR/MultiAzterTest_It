                               PROGRAMAZIOAREN_METODOLOGIA                                     3._GAIA                              PROGRAMEN_EGIAZTAPENA   3.1._Programen_egiaztapenera_sarrera_2 3.1.1._Helburua_2 3.1.2._Adibidea:_Programa_zuzen_bat_2 3.1.3._Adibidea:_Zuzena_ez_den_programa_bat_2 3.1.4._Zuzentasun_partziala,_amaiera_eta_zuzentasun_osoa_3 3.2._Hoare-ren_kalkulua_4 3.2.1._Jarraitu_beharreko_urratsak_4 3.2.2._Esleipenaren_Axioma_(EA)_eta_Ondorioaren_Erregela_(OE)_5 3.2.2.1._Esleipenaren_Axioma_(EA)_5 3.2.2.2._Lehenengo_adibidea_6 3.2.2.3._Bigarren_adibidea_7 3.2.2.4._Hirugarren_adibidea_8 3.2.2.5._Ondorioaren_Erregela_(OE)_8 3.2.2.6._Hirugarren_adibidea_(jarraipena)_9 3.2.2.7._Laugarren_adibidea_10 3.2.2.8._Bosgarren_adibidea_11 3.2.2.9._Seigarren_adibidea_12 3.2.2.10._Zazpigarren_adibidea_13 3.2.2.11._Zortzigarren_adibidea_15 3.2.3._Konposizioaren_erregela_(KE)_17 3.2.3.1._Bederatzigarren_adibidea_18 3.2.4._While-aren_Erregela_(WE)_21 3.2.4.1._Hamargarren_adibidea_22 3.2.4.2._Hamaikagarren_adibidea_29 3.2.4.3._Hamabigarren_adibidea_30 3.2.4.4._Hamairugarren_adibidea_36 3.2.4.5._Hamalaugarren_adibidea_42 3.2.4.6._Hamabosgarren_adibidea_50 3.2.4.7._Hamaseigarren_adibidea_57 3.2.4.8._Hamazazpigarren_adibidea_58 3.2.4.9._Hamazortzigarren_adibidea_60 3.2.4.10._Hemeretzigarren_adibidea_63 3.2.4.11._Hogeigarren_adibidea_65 3.2.4.12._Hogeita_batgarren_adibidea_69     3.1._Programen_egiaztapenera_sarrera   3.1.1. Helburua Programa bat eta hasierako eta bukaerako baldintzen bidez emandako espezifikazioa emanda, programa hori espezifikazio horrekiko zuzena al den erabakitzea da helburua.  Beste era batera esanda, honako galdera honi erantzun behar zaio:  Hasierako baldintza betetzen duen egoera batetik abiatzen bagara, P programa burutu ondoren bukaerako badintza beteko al da?                                       {}                                      P                                      {}  Hasierako baldintza {} bezala adieraziko da normalean eta bukaerako baldintza {} bezala adieraziko da.  3.1.2. Adibidea: Programa zuzen bat                               {}{x =aÙy = b}                              lag : = x;                              x : = y;                              y : = lag;                              {}{x = bÙy =a}  {} eta {} formulen bidez emandako espezifikazioak programaren hasieran x aldagaiaren balioa a baldin bada eta y-rena b baldin bada, programa burutu ondoren x-en balioa b eta y-rena a izango direla adierazten du.  Gai honetan programa hori espezifikazio horrekiko zuzena dela nola frogatzen den erakutsiko da.   3.1.3. Adibidea: Zuzena ez den programa bat                               {}{x =aÙy = b}                              y : = x;                              x : = y;                              {}{x = bÙy =a}  Adibide honetan ere {} eta {} formulen bidez emandako espezifikazioak programaren hasieran x aldagaiaren balioa a baldin bada eta y-rena b baldin bada, programa burutu ondoren x-en balioa b eta y-rena a izango direla adierazten du.   Gai honetan ikusiko dugun metodoa erabiliz, programa hori espezifikazio horrekiko zuzena dela frogatu ahal izango dugu.   3.1.4. Zuzentasun partziala, amaiera eta zuzentasun osoa  P programa {} eta {} formulen bidez emandako espezifikazioarekiko partzialki zuzena dela esateak honako hau adierazten du:  P programaren exekuzioa hasierako baldintza den {j} formula betetzen duen egoera batetik abiatzen bada eta P programa bukatzen baldin bada, orduan amaieran bukaerako baldintza den {y} formula beteko da.  Beraz P programa {j} eta {y} formulen bidez emandako espezifikazioarekiko partzialki zuzena dela esaten denean, ez da bermatzen P bukatuko denik. Gerta daiteke P inoiz ez bukatzea.  Esate baterako jarraian datorren programa hor agertzen diren {j} eta {y} formulekiko partzialki zuzena da baina gerta daiteke inoiz ez bukatzea ere:                             {}{x =aÙy = b}                            while y ¹ 0 loop                            x : = x + 1;                            y : = y – 1;                            end loop;                            {}{x =a+ bÙy = 0}  Partzialki zuzena dela froga daiteke, hau da, hasieran {x = a Ù y = b} betetzen baldin bada eta while hori exekutatzen badugu eta while hori bukatzen baldin bada, orduan {x = a + b Ù y = 0} beteko da. Baina gerta daiteke while hori inoiz ez bukatzea, izan ere, hasieran y-ren balioa negatiboa bada, hau da, b negatiboa bada, orduan while-a ez da inoiz amaituko.  P programa {} eta {} formulen bidez emandako espezifikazioarekiko guztiz zuzena dela esateak honako hau adierazten du:  P programaren exekuzioa hasierako baldintza den {j} formula betetzen duen egoera batetik abiatzen baldin bada, orduan P programa amaitu egingo da eta amaieran bukaerako baldintza den {y} formula beteko da.  Beraz P programa {j} eta {y} formulen bidez emandako espezifikazioarekiko guztiz zuzena dela esaten denean, P programa bukatu egingo dela bermatzen da.  Esate baterako jarraian datorren programa hor agertzen diren {j} eta {y} formulekiko guztiz zuzena da:                         {}{x =aÙy = bb0}                         while y ¹ 0 loop                         x : = x + 1;                         y : = y – 1;                         end loop;                         {}{x =a+ bÙy = 0}  Programa hori {x = a Ù y = b Ù b ³ 0} betetzen den egoera betetik abiatzen baldin bada eta while hori exekutatzen badugu, orduan programa bukatu egingo dela ziurta dezakegu eta gainera {x = a + b Ù y = 0} beteko da.  P programa {j} eta {y} formulen bidez emandako espezifikazioarekiko guztiz zuzena dela frogatzeko, partzialki zuzena dela eta gainera beti bukatuko dela frogatu beharko da.                 Zuzentasun osoa = zuzentasun partziala + bukatzea  Esleipenaren eta baldintzazko aginduen kasuan zuzentasun partziala eta zuzentasun osoa gauza bera dira, esleipena eta baldintzazko aginduak beti bukatzen baitira. Agindu iteratiboen kasuan (while-loop, loop-exit-when, ...) iterazioa inoiz ez bukatzea gerta daitekeenez, zuzentasun partziala frogatzeaz gain iterazioa bukatu egiten dela ere frogatu egin beharko da.    3.2._Hoare-ren_kalkulua  Hoare-ren kalkuluan programen zuzentasuna frogatzeko balio duten axiomak eta erregelak erabiltzen dira.  Jarraian datozen ataletan programazio-lengoaietako agindu ohikoenentzat Hoare- ren kalkula nola erabiltzen den erakutsiko da: - Esleipena. - Konposizioa. - Iterazioa (while).   3.2.1. Jarraitu beharreko urratsak  P programa bat {} eta {} formulen bidez emandako espezifikazioarekiko guztiz zuzena al den galdetzen digutenean, Hoare-ren kalkulua erabiliz programa guztiz zuzena al den erabakitzen saiatuko gara:      * Guztiz zuzena dela ateratzen bada, zuzentasun osoaren froga formala eman       beharko da.      * Partzialki zuzena dela ateratzen bada, hasteko zuzentasun partzialaren       froga formala eman beharko da eta gero batzutan programa ez dela bukatuko       erakusten duen adibide konkretu bat eman beharko da.      * Partzialki zuzena ez dela ateratzen bada, {} baldintza betetzen duen       egoera batetik abiatuta, {} betetzen ez duen egoera batean bukatzen den       adibide bat eman beharko da.   3.2.2. Esleipenaren Axioma (EA) eta Ondorioaren Erregela (OE)   3.2.2.1. Esleipenaren Axioma (EA)  Hasteko, Hoare-ren kalkulua erabiliz esleipenaren zuzentasuna nola egiaztatzen den ikusiko dugu.                                     {}                                    x : = t;                                    {}  x : = t; erako esleipen bat {j} hasierako baldintza eta {y} bukaerako baldintzarekiko zuzena izango da honako fhau betetzen bada                              {j} º {def(t) Ù yxt}.  Beste era batera esanda, honako hau zuzena da:                      Esleipenaren Axioma (EA) {def(t)Ùyxt}                                              x : = t;                                              {}  def(t) formula bat izango da eta t espresioa definituta egoteko zein baldintza bete behar den adieraziko du. Bestalde, yxt formula yformulan x-en agerpen denak t espresioaz ordezkatuz lortzen den formula da.  Esleipenaren axiomak honako hau dio:  Bukaeran x-ek y formulak dioena betetzea nahi baldin badugu eta bukatu baino lehen x algaiari t espresioaren balioa esleitu behar badiogu, t espresioak kalkulagarria izan beharko duela (def(t)) eta gainera hasieran, esleipena burutu baino lehen, t espresioak bukaeran x aldagaiak bete beharko duena bete dezala (yxt).    3.2.2.2. Lehenengo adibidea  Honako programa hau zuzena al da?                            {}{1£i£nÙA(i) > 0}                           x : = A(i);                           {}{x > 0}  Bi gauza egin behar dira:     * {def(t) Ù yxt} formula kalkulatu. Formula berri horri {1} deituko diogu.       Hor teoriako t espresioaren ordez A(i) daukagu.     * {j} eta {def(t) Ù yxt} berdinak al diren egiaztatu.                                                                                                                   {}{1£i£nÙA(i) > 0} E                                                                                                          – 1 < v  -gatik  y aldagaiaren balioa v aldagaiaren balioaren berdina bada, y – 1 balioa v – 1 balioaren berdina izango da eta ondorioz v baino txikiagoa izango da.      * Zuzentasun_osoaren_froga:        I      1.   INB        II     1. INB  def(B)        III    1. (INB  B)  2              2. {2} x : = x + 1; {1} (EA)              3. {INB  B} x : = x + 1; {1} (OE 3, 4)              4. {1} y : = y – 1; {INB} (EA)              5. {INB  B}           x : = x + 1;           y : = y – 1;           {INB} (KE 5, 6)        IV     1. (INB  ¬B)          V      1. (INB  B)  E > 0        VI     1. (INB  B  E = v)  4              2. {4} x : = x + 1; {3} (EA)              3. {INB  B  E = v} x : = x + 1; {3} (OE 10, 11)              4. {3} y : = y – 1; {E < v} (EA)              5. {INB  B  E = v}           x : = x + 1;           y : = y – 1;           {E < v} (KE 12, 13)               1. {}           while {INB} i  n loop           x : = x + 1;           y : = y – 1;           end loop;           {} (WE 1, 2, 7, 8, 9, 14)  1  
