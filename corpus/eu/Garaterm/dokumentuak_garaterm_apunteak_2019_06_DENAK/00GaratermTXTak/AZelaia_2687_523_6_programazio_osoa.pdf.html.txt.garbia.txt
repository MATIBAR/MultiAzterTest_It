   6. Kapitulua Programazio osoa Kapitulu honetan, aztergai izango ditugun problema linealetan aldagai batzuek edo guztiek balio osoak hartu behar dituzte. Mota horretako problema linealak ebazteko, programazio osoaren teknikak garatu dira eta, ikusiko dugunez, pro- blema osoaren soluzio optimoa lortzeko, programazio linealeko zenbait problema ebatzi beharko dira. Aldagai errealeko eredu linealak ebazteko ezagutzen dugun simplex algorit- moa soluzioen multzoaren ganbiltasunean oinarritzen da. Multzo ganbilen mutur- puntu kopurua ﬁnitua da eta, frogatu dugunez, soluzio optimoa horietariko mutur- puntu batean aurkitzen da. Aldagaiak osoak izateko murrizketak soluzioen mul- tzoa murrizten badu ere, problemaren soluzio optimoaren kalkulua zaildu egiten du. Aldagaien balioak kontuan hartuz, eredu lineal osoak hiru motakoak izan dai- tezke. • Programazio oso mistoan aldagaiak bai oso eta bai erreal izan daitezke. • Programazio oso hutsean aldagai guztiak osoak dira. • 0-1 programazio osoko ereduetan aldagai guztiak bitarrak dira. 6.1 Programazio osoaren aplikazio batzuk Atal honetan programazio osoaren eta 0-1 programazio osoaren zenbait adibide azalduko dugu. 1. Adibidea. Postetxe bulego batean asteko egun bakoitzerako langile kopuru desberdinak behar dira (ikus taula). 201  202 6. Programazio osoa Eguna Langileak 1. Astelehena 15 2. Asteartea 13 3. Asteazkena 15 4. Osteguna 18 5. Ostirala 14 6. Larunbata 16 7. Igandea 10 Langile bakoitzak bost egunez jarraian lan egin behar du eta gero bi egunez atsedena hartu. Erabaki behar da asteko egun bakoitzean lanean hasiko den langile kopurua zein izango den, postetxeko eguneroko langile beharrak asetuko direlarik. Problemaren helburua postetxeko langile beharrei aurre egitea da, langile kopuru minimoa kontratatuz. Eredu lineala idazteko ondoko erabaki-aldagaiak deﬁnitzen dira: xj : j egunean lanean hasiko den langile kopurua, j = 1, . . . , 7. Asteko egun bakoitzerako murrizketa bat idatziko da, egun horretan lanean dagoen langile kopuruak langile- beharra asetzen duela ziurtatzeko. Eredu lineala ondokoa da: min z = x1 + x2 + x3 + x4 + x5 + x6 + x7 hauen mende x1 + x4 + x5 + x6 + x7 ≥ 15 x1 + x2 + x5 + x6 + x7 ≥ 13 x1 + x2 + x3 + x6 + x7 ≥ 15 x1 + x2 + x3 + x4 + x7 ≥ 18 x1 + x2 + x3 + x4 + x5 ≥ 14 x2 + x3 + x4 + x5 + x6 ≥ 16 x3 + x4 + x5 + x6 + x7 ≥ 10 x1, x2, x3, x4, x5, x6, x7 ≥ 0 eta osoak OpenCourseWare, UPV/EHU  6.1. Programazio osoaren aplikazio batzuk 203 2. Adibidea. Motxilaren problema. Gehienez 12 kg eramateko ahalmena duen motxila bat zenbait objektuz bete nahi dugu. Lau objektu ditugu, eta hauen balioa eta pisua ondoko taulakoak dira: 1 2 3 4 Pisua (kg) 3 6 5 5 Balioa (euro) 15 25 12 10 Erabaki behar da zein objektu sartu motxilan bere balio-totala maximizatzeko. Problema eredu lineal baten bidez adierazteko, ondoko erabaki-aldagaiak deﬁni- tuko ditugu j objektuetarako, j = 1, 2, 3, 4. xj =    1 baldin j objektua motxilan sartzen bada 0 kontrako kasuan Eredu lineala ondokoa da: max z = 15x1 + 25x2 + 12x3 + 10x4 hauen mende 3x1 + 6x2 + 5x3 + 5x4 ≤ 12 x1, x2, x3, x4 = 0 edo 1 Antzeko planteamendua egin daiteke murrizketa gehiagorekin, adibidez, objek- tuaren bolumena kontuan hartuz. 3. Adibidea. Eskualde batean 6 hiri daude. Hiriak elkarren artean komunika- tuak egon daitezen, tren-geltokiak eraiki nahi dira. Tren- geltoki horien kokapena erabaki nahi da, beti ere, edozein hiritatik abiatuta ere, 30 minutuan edo gutxia- gotan tren-geltoki bat izango dela ziurtatu behar delarik eta ahalik eta tren- geltoki gutxienak eraiki nahi direlarik. Hiri bakoitzetik gainerakoetara joateko behar den denbora ondoko taulan agertzen da: Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  204 6. Programazio osoa 1 2 3 4 5 6 1 0 35 20 40 30 60 2 35 0 45 35 20 70 3 20 45 0 15 55 20 4 40 35 15 0 65 35 5 30 20 55 65 0 40 6 60 70 20 35 40 0 Ondoko aldagai bitarrak deﬁnitzen ditugu j hirietarako, j = 1, . . . , 6: xj =    1 baldin j hirian tren-geltokia eraikitzen bada 0 kontrako kasuan Eredu lineala ondokoa da: min z = x1 + x2 + x3 + x4 + x5 + x6 hauen mende x1 + x3 + x5 ≥ 1 x2 + x5 ≥ 1 x1 + x3 + x4 + x6 ≥ 1 x3 + x4 ≥ 1 x1 + x2 + x5 ≥ 1 x3 + x6 ≥ 1 x1, x2, x3, x4, x5, x6 = 0 edo 1 Murrizketa bakoitza hiri bati dagokio, eta ziurtatzen du hiri horretatik gehie- nez 30 minutura badagoela tren-geltoki bat. Adibidez, lehenengo murrizketak lehenengo hiritik 30 minutura edo gertuago tren-geltoki bat egongo dela ziurta- tzen du. 6.2 Problema osoen ebazpena Hasteko, eredu lineal oso baten soluzio optimoa kalkulatzerakoan sortzen diren zailtasunak adibide baten bidez erakutsiko ditugu. OpenCourseWare, UPV/EHU  6.2. Problema osoen ebazpena 205 Izan bedi ondoko eredu lineala: max z = 80x1 + 45x2 hauen mende x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 x1, x2 ≥ 0 eta osoak Ondoko graﬁkoan adierazten da eredu lineal osoaren soluzioen multzoa: x1 + x2 = 7 12x1 + 5x2 = 60 x1 x2 max Soluzioen multzoan puntu kopuru ﬁnitua dago, eta ondorioz, puntu guztiak kalkula daitezke eta horietako bakoitzean helburu funtzioaren balioa aztertu, op- timoa aurkitzeko. Baina, metodo hori ez da eraginkorra aldagai asko dituzten problematan, soluzioen multzoan egon daitekeen puntu kopuruagatik. Kapitulu honetan ikusiko dugu problema osoaren soluzio optimoa kalkulatze- ko askoz ere kalkulu gehiago egin beharko dugula, nahiz eta jatorrizko problemari oso izatearen murrizketa kenduta geratzen den problemaren soluzio kopurua txi- kiagoa izan. Horren arrazoia hau da: problema lineal osoaren soluzioen multzoa ez dela multzo ganbila, problema lineal orokorretan, aldiz, bai. Ganbiltasunaren propietateari esker, 2. Kapituluan garatutako teoria aplika daiteke. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  206 6. Programazio osoa Ereduaren soluzio optimoa aurkitzeko beste modu bat problema ebaztea da, al- dagaiak osoak izateko murrizketa kontuan hartu gabe, eta behin soluzio optimoa kalkulatu denean, soluzio horretatik gertuen dagoen soluzio osoa problema osoa- ren soluziotzat hartzea. Adibidearekin jarraituz, aldagaiek osoak izateko duten murrizketa kenduko diogu problemari; problema horri problema erlaxatua esaten zaio, eta P E laburduraz adieraziko dugu aurrerantzean. Ondoko graﬁkoan dago problema erlaxatuaren ebazpena: x1 + x2 = 7 12x1 + 5x2 = 60 x1 x2 xP E = ( 25 7 , 24 7 ) max Problema erlaxatuaren soluzio optimoa xP E = ( 25 7 , 24 7 ) = (3.571, 3.428) da, eta helburu funtzioaren balio optimoa puntu horretan zP E = 440. Dena den, puntu hori ez da problema osoaren soluzio optimoa, aldagaien balio optimoak ez direlako osoak. Aldagaien balioak biribilduz, problema erlaxatuaren puntu optimoaren inguruko beste lau puntu lortzen dira: (3, 3), (3, 4), (4, 3), (4, 4), eta helburu funtzioaren balioa kalkula dezakegu lau puntu horietan. Kasu honetan, optimoa (4, 4) puntuan dago, baina ondoko graﬁkoan ikus daitekeen bezala, puntu hori ez dago soluzioen multzoan: OpenCourseWare, UPV/EHU  6.3. Problema osoen ebazpide graﬁkoa 207 x1 + x2 = 7 12x1 + 5x2 = 60 x1 x2 max Metodo hau ere ez da oso egokia problema handietan aplikatzeko, hurbilke- ta posible asko egon daitekeelako, eta ikusi dugun bezala, hurbilketa horietako batzuk soluzioen multzotik kanpo egon daitezkeelako. Gainera, problema handie- tarako hurbilketa asko kalkulatu beharko dira. Arrazoi horiengatik problema osoak ebazteko teknika bereziak garatu dira. Kapitulu honetan adarkatzearen eta bornatzearen teknika azaltzen da. 6.3 Problema osoen ebazpide graﬁkoa Adarkatze- eta bornatze-algoritmoaren arabera, eredu erlaxatua ebazten da, eta lortutako soluzioa osoa ez bada, problema erlaxatua bitan banatzen da (adarka- tzea), soluzioen multzoari problema osoaren soluzio optimoa barnean ez duen zati bat kentzeko. Sortutako bi problemak ebazten dira, eta soluzioa osoa ez bada adarkatu egiten da. Adarkatzearen ondorioz lortzen diren problemek, erlaxatuak bezala, ez dute aldagaiak osoak izatearen murrizketa, eta ondorioz, simplex algo- ritmoa erabiliz ebatziak izango dira. Atal honetan, adarkatze- eta bornatze-algoritmoa azalduko dugu 205. orrialde- ko problema graﬁkoki ebatziz. Har ditzagun adibideko eredu lineala eta dagokion eredu erlaxatua. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  208 6. Programazio osoa Problema Osoa: PO Problema Erlaxatua: PE max z = 80x1 + 45x2 max z = 80x1 + 45x2 hauen mende hauen mende x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1, x2 ≥ 0 eta osoak x1, x2 ≥ 0 Eredu erlaxatuaren soluzio optimoa xP E = (3.571, 3.428) puntuan dagoe- la ikusi dugu 206. orrialdeko graﬁkoan. Problema erlaxatuaren balio optimoa zP E = 440 da. Aldagaiek ez dituzte balio osoak hartzen. Ikusiko dugu pro- blema osoaren soluzio optimoa kalkula daitekeela zenbait problema erlaxaturen ebazpenaren bitartez. Horretarako, problema bitan banatuko da, problema osoa- ren soluzioa izango ez duen problema erlaxatuaren soluzioen multzoaren zati bat kenduz; adarkatuz, alegia. Problema adarkatzeko, soluzio optimoan balio osoa izan behar duen eta ez duen aldagai bat aukeratu behar da; kasu honetan, bai x1 eta bai x2 aukeratuak izan daitezke. x1 aukeratuko dugu, eta soluzio optimoan 3.571 balioa hartzen duela ikusten dugunez, esan dezakegu aldagai horrek ezin duela 3 < x1 < 4 tarteko baliorik hartu, osoak ez direlako. Hortaz, problema erlaxatuaren soluzioen multzoa bitan banatuko dugu x1 aldagairako balioen tarte hori kenduz, hau da, x1 aldagairako balioak bornatuz ondoko murrizketak erabiliz: x1 ≤ 3 eta x1 ≥ 4. Horrela lortzen dira ondoko bi problemak: P2 problema P3 problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 hauen mende hauen mende x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≤ 3 x1 ≥ 4 x1, x2 ≥ 0 x1, x2 ≥ 0 Sortu berri ditugun P2 problema eta P3 problema graﬁkoki ebatziz, 209. orrial- deko graﬁkoan ikusten da hasierako problema erlaxatuaren soluzioen multzotik x1 OpenCourseWare, UPV/EHU  6.3. Problema osoen ebazpide graﬁkoa 209 aldagairako 3 eta 4 arteko balio erreal ez-oso guztiak desagertu direla. P2 proble- mari eta P3 problemari dagozkien soluzioen multzoak grisez marraztuta ikusten dira graﬁkoan. Bi problema horiek modu independentean ebatzi behar dira. Gra- ﬁkoki ebatziz lortzen diren soluzio optimoak ondokoak dira: • P2 problema: Soluzio optimoa xP 2 = (3, 4) eta zP 2 = 420. • P3 problema: Soluzio optimoa xP 3 = (4, 12 5 ) eta zP 3 = 428. P2 problemaren soluzio optimoa osoa denez, problema ez da adarkatua izango, eta azkeneko problema dela esaten da. xP 2 =  (3, 4) soluzioari soluziogai esaten zaio, eta bera izango da problema osoaren soluzio optimoa, beste hobe bat aurki- tzen ez badugu. Problema horren helburu funtziorako balio optimoa zP 2 = 420 da eta problema osorako behe-bornea ﬁnkatzen du: zb = 420. x1 + x2 = 7 12x1 + 5x2 = 60 x1 = 3 x1 = 4 x1 x2 (3, 4) (4, 12 5 ) max P2 problema P3 problema P3 problemaren soluzioa ez da problema osoaren soluzioa, ez delako osoa; x2 aldagaiak 12 5 = 2.4 balioa hartzen du. Helburu funtzioak puntu horretan zP3 = 428 balioa hartzen du, eta zP3 > zb betetzen denez, problema adarkatu egingo dugu, P2 problemaren ebazpenetik lortu dugun soluziogaia baino hobea den beste soluzio oso bat aurkitzeko aukera dagoelako. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  210 6. Programazio osoa Adarkaketa egiteko, x2 aldagaia aukeratuko dugu, aldagaia osoa izanik orain- dik ez duelako balio osorik optimoan. P3 problema adarkatuz, hau da, bere solu- zioen multzotik 2 < x2 < 3 balioak kenduz, P4 problema eta P5 problema lortzen dira. P4 problema P5 problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 hauen mende hauen mende x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≥ 4, x2 ≤ 2 x1 ≥ 4, x2 ≥ 3 x1, x2 ≥ 0 x1, x2 ≥ 0 Hurrengo graﬁkoan P4 problemaren eta P5 problemaren soluzio optimoak kal- kulatu dira, eta ikusten den bezala, P5 problemak ez du soluziorik; ondorioz, az- keneko problema da, eta ez da problema horretatik abiatuta adarkaketa gehiagorik egingo. x1 + x2 = 7 12x1 + 5x2 = 60 x1 = 4 x2 = 3 x2 = 2 x1 x2 (4.16, 2) max P4 problema P5 problema OpenCourseWare, UPV/EHU  6.3. Problema osoen ebazpide graﬁkoa 211 P4 problemaren soluzio optimoa xP 4 = ( 25 6 , 2) = (4.166, 2) da, eta helburu funtzioaren balio optimoa zP 4 = 1270 3 = 423.33. Balio hori behe-bornearekin konparatuz, zP 4 > zb = 420 betetzen dela ikusten da. Hori dela eta, P4 problema ez da azkeneko problema eta adarkatzea erabakitzen da; x1 aldagaia aukeratuz eta problemari x1 ≤ 4 eta x1 ≥ 5 murrizketak gehituz sortzen dira P6 problema eta P7 problema. P6 problema P7 problema max z = 80x1 + 45x2 max z = 80x1 + 45x2 hauen mende hauen mende x1 + x2 ≤ 7 x1 + x2 ≤ 7 12x1 + 5x2 ≤ 60 12x1 + 5x2 ≤ 60 x1 ≥ 4, x2 ≤ 2, x1 ≤ 4 x1 ≥ 4, x2 ≤ 2, x1 ≥ 5 x1, x2 ≥ 0 x1, x2 ≥ 0 x1 + x2 = 7 12x1 + 5x2 = 60 x1 = 4 x2 = 2 x1 = 5 x1 x2 (4, 2) (5, 0) max P6 problema P7 problema P6 problemaren soluzioen multzoa segmentu bat da, eta xP 6 = (4, 2) puntua da soluzio optimoa, zP 6 = 410 delarik. zP 6 < zb = 420 betetzen denez, problema azkenekoa da. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  212 6. Programazio osoa P7 problemaren soluzioen multzoan puntu bat besterik ez dago, eta bera da problemaren soluzio optimoa: xP 7 = (5, 0). Helburu funtzioak bertan hartzen duen balioa zP 7 = 400 izanik, zP 7 < zb = 420 betetzen denez, problema azkene- koa da. Hortaz, biak azkeneko problemak dira, eta ez da adarkaketekin jarraitu behar. Problema osoaren soluzio optimoa P2 problema ebatziz lortutako soluziogaia da, x∗ P O = xP 2 = (x ∗ 1 , x ∗ 2) = (3, 4) eta z∗ P O = zb = 420. Adibide honen ebazpen osoaren diagrama 6.1 Irudian dago. Bertan ikus daitez- ke adarkatze- eta bornatze-algoritmoa erabiliz sortutako problema erlaxatu guz- tien soluzio optimoak. Problema erlaxatu bakoitzerako kalkulatutako helburu funtzioaren balio optimoa problema osoaren goi-borne bat da ebazpenaren adar horretan. PE problema P2 problema P3 problema P4 problema P5 problema P6 problema P7 problema xP E = (3.571, 3.428) xP 2 = (3, 4) xP 3 = (4, 2.4) xP 4 = (4.166, 2) Bideraezina xP 6 = (4, 2) xP 7 = (5, 0) zP E = 440 zP 2 = 420 zP 3 = 428 zP 4 = 423.33 zP 6 = 410 zP 7 = 400 zb = 420 x1 ≤ 3 x1 ≥ 4 x2 ≤ 2 x2 ≥ 3 x1 ≤ 4 x1 ≥ 5 Soluziogaia Azkenekoa Azkenekoa Azkenekoa Azkenekoa 6.1. Irudia: Adibideko eredu osoaren ebazpenaren diagrama. OpenCourseWare, UPV/EHU  6.4. Adarkatze- eta bornatze-metodoa 213 6.4 Adarkatze- eta bornatze-metodoa Aurreko atalean graﬁkoki ikusi dugun adarkatze- eta bornatze-algoritmoan pro- blema erlaxatua, soluziogaia eta azkeneko problema kontzeptuak erabili ditugu. 6.4.1 Deﬁnizioa. (Problema erlaxatua) Problema lineal oso bat emanik, alda- gaiak osoak izatearen murrizketa kenduta lortzen den ereduari problema erlaxa- tua esaten zaio. Problema Osoa: PO Problema Erlaxatua: PE max z = cT x max z = cT x hauen mende hauen mende Ax ≤ b Ax ≤ b x ≥ 0 eta osoa x ≥ 0 Problema erlaxatuak problema osoak baino murrizketa gutxiago ditu. Horrek esan nahi du problema osoaren bideragarritasun-eskualdea dagokion problema er- laxatuaren bideragarritasun- eskualdearen parte dela, hau da, maximizatze kasura- ko balio optimoen artean honako erlazioa betetzen da: z∗ P E ≥ z ∗ P O. 6.4.2 Deﬁnizioa. (Soluziogaia) Problema oso bat izanik, problemaren ebazpena- ren iterazio bakoitzean ordura arte lortutako soluzio oso onenak soluziogai izena hartzen du. Soluziogaia problema osoaren soluzio optimoa izan daitekeenez gorde egin behar da, hobea izango den beste bat lortu arte. Helburu funtzioak soluziogaian hartzen duen balioak problema osorako zb behe-bornea ﬁnkatzen du. Ebazpe- nean problema baten helburu funtzioaren balioa zb baino txikiagoa edo berdina denean, adar hori moztu egingo dugu, eta problema ez da gehiago adarkatua izan- go, problema osoaren soluzio optimoa adar horretatik ezin izango delako lortu. Adarkatua izango ez den problema horri azkeneko problema esaten zaio eta hone- la deﬁnitzen da. 6.4.3 Deﬁnizioa. (Azkeneko problema) Problema oso bat ebazterakoan, ondo- ko baldintzetako bat betetzen duen problema erlaxatu oro azkeneko problema dela esaten da: (1) bideraezina bada, (2) helburu funtzioaren balio optimoa zb behe- bornea baino txikiagoa edo berdina bada, (3) soluzioa osoa bada. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  214 6. Programazio osoa Adibidez, 6.1 Irudian P2 problema, P5 problema, P6 problema eta P7 proble- ma azkeneko problemak dira. Adarkatze- eta bornatze-algoritmoan, problema erlaxatu bakoitzaren helburu funtzioaren balio optimoa zg notazioaz adieraziko dugu, esan bezala, problema osoaren balio optimorako goi-borne bat ﬁnkatuko duelako adarrean. 6.4.1 Adarkatze- eta bornatze-algoritmoa Algoritmo hau maximizatze-helburua duten programazio osoko problemak ebaz- teko diseinatua izan da. Algoritmoaren urratsak ondokoak dira: 1. urratsa. Hasieraketa Problema osoari dagokion problema erlaxatua ebatzi. – Problema erlaxatuaren soluzio optimoa osoa bada, hori izango da pro- blema osoaren soluzio optimoa. Amaitu. – Bestela, problema osoaren helburu funtziorako zb behe-bornea hasie- ratu. Problema osorako soluziogairik ez bada ezagutzen, zb = −∞ hasieratuko da. 2. urratsa. Adarkatzea Azkenekoa ez den problema bat aukeratu. Aukeratutako probleman osoa izan behar duen eta problemaren soluzio optimoan ez den xj aldagai bat aukeratu. Problema adarkatu, xj ≤   balioa xj aldagaiaren zati osoa da 2Ebazteko sentikortasunaren analisia erabiltzen da, eta simplex dual algoritmoa aplikatzen da. OpenCourseWare, UPV/EHU  6.4. Adarkatze- eta bornatze-metodoa 215 (2) zg ≤ zb. (3) Problemaren soluzioa osoa da eta zg > zb. Behe-bornea eguneratu zb =zg eginez; soluzio oso hori soluziogaia da. Azkeneko ez den problemarik existitzen bada, algoritmoaren 2. urratsean jarraitu behar da adarkatze berri batekin. Problema guztiak azkeneko ba- dira, soluziogaia problema osoaren soluzio optimoa da. Soluziogairik ez badago, problema osoa bideraezina da. Problema oso baten soluzio optimoaren bilaketa adarkatze- eta bornatze-algo- ritmoaren bidez egiteak kalkulu asko eskatzen badu ere, algoritmo hau da proble- ma osoak, bai hutsak eta bai mistoak, ebazteko gehien erabiltzen dena. Algoritmoaren 2. urratsean adarkatua izango den problema eta bornatua izan- go den aldagaia irizpideren baten arabera aukeratzen badira, soluzio optimoaren bilaketan algoritmoaren zenbait iterazio aurreztu ahal izango dira. Adarkatua izango den problema aukeratzeko irizpide erraz bat azkenekoa ez den zg handie- neko problema aukeratzea da. Bornatua izango den aldagaia aukeratzeko, aldiz, irizpideak konplexuagoak dira. Ondoko adibidean zoriz, hau da, irizpiderik jarrai- tu gabe, aukeratuko dugu aldagaia. Adibidea. 205. orrialdeko problema osoaren soluzio optimoa kalkulatuko dugu adarkatze- eta bornatze-algoritmoa erabiliz. Lehenengo iterazioa 1. urratsa. Hasieraketa. PE problema erlaxatua ebatzi. Taula optimoa ondo- koa da: x1 x2 x3 x4 0 0 20 5 440 a2 0 1 12 7 − 1 7 24 7 a1 1 0 − 5 7 1 7 25 7 Behe-bornea hasieratuko dugu, zb = −∞. 2. urratsa. Adarkatzea. PE problema erlaxatuaren soluzioa ez da osoa. Adarkatzeko aldagai bat aukeratuko dugu, x1, eta bi problema berri sortuko ditu- gu: P2 problema eta P3 problema (ikus 208. orrialdea). 3. urratsa. Bornatzea. Sentikortasunaren analisia erabiliz, bi problema ho- riek ebatziko ditugu. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  216 6. Programazio osoa • P2 problemaren ebazpena. x1 ≤ 3 murrizketari dagokion nasaitze-aldagaia gehitu eta P1 problemari dagokion taula optimoan sartu. Ondoko taula lor- tzen da: x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 1 0 0 0 1 3 Taulako 3. errenkada egokitzeko, 3. errenkada − 2. errenkada eragiketa egingo dugu. x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 0 0 5 7 − 1 7 1 − 4 7 Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika- tuz, P2 problemarako optimoa den taula lortzen da. x1 x2 x3 x4 x5 0 0 45 0 35 420 a2 0 1 1 0 −1 4 a1 1 0 0 0 1 3 a4 0 0 −5 1 −7 4 • P3 problemaren ebazpena. x1 ≥ 4 murrizketa −1 balioaz biderkatuko dugu P1 problemaren taula optimoan sartzeko, −x1 ≤ − 4, eta ondoren, x5 nasaitze-aldagaia gehituko dugu. Hau da lortuko dugun taula: OpenCourseWare, UPV/EHU  6.4. Adarkatze- eta bornatze-metodoa 217 x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 − 1 0 0 0 1 − 4 3. errenkada eguneratu, 3. errenkada + 2. errenkada eragiketa eginez. x1 x2 x3 x4 x5 0 0 20 5 0 440 a2 0 1 12 7 − 1 7 0 24 7 a1 1 0 − 5 7 1 7 0 25 7 a5 0 0 − 5 7 1 7 1 − 3 7 Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika- tuz, P3 problemarako taula optimoa lortzen da. x1 x2 x3 x4 x5 0 0 0 9 28 428 a2 0 1 0 1 5 12 5 12 5 a1 1 0 0 0 −1 4 a3 0 0 1 − 1 5 − 7 5 3 5 Horrela, P2 problema eta P3 problema ebatzi dira  (ikus soluzioak 212. orrialdeko 6.1 Irudian). 4. urratsa. Azkeneko problemak. P2 problema azkenekoa da zg = 420 > zb izanik soluzioa osoa delako: x1 = 3 eta x2 = 4. Oraingoz kalkulatu den soluzio osorik onena izateagatik soluziogaia da, eta behe-bornea eguneratu egin behar da: zb = zg = 420. P3 problema ez da azkenekoa, ez duelako 4. urratseko irizpide bat bera ere betetzen. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  218 6. Programazio osoa Problema guztiak azkenekoak ez direnez, algoritmoaren iterazio berri bat egin behar da 2. urratsean jarraituz. Bigarren iterazioa 2. urratsa. Adarkatzea. Azkenekoa ez den problema bakarra aukeratuko dugu: P3 problema. Bertan, x2 aldagaia aukeratuko dugu bornatua izateko. Pro- blema adarkatuko dugu P3 problemari x2 ≤ 2 murrizketa erantsiz P4 problema sortzeko, eta x2 ≥ 3 erantsiz P5 problema sortzeko (ikus 210. orrialdea). 3. urratsa. Bornatzea. Sortutako bi problemak ebatzi. Aurreko iterazioan egin bezala, sentikortasunaren analisia eta simplex dual algoritmoa aplikatuko di- tugu. Kasu honetan, P3 problemaren taula optimotik abiatuko gara P4 proble- maren eta P5 problemaren soluzio optimoak kalkulatzeko (ikus soluzioak 212. orrialdeko 6.1 Irudian). 4. urratsa. Azkeneko problemak. P5 problema azkenekoa da bideraezina delako. P4 problemaren soluzio optimoa ez da osoa, eta zg = 423.33 > 420 = zb betetzen da. Hortaz, problema ez da azkenekoa. 2. urratsera joan behar da algo- ritmoaren iterazio berri bati ekiteko. Hirugarren iterazioa 2. urratsa. Adarkatzea. Oraingoan, P4 problema da azkenekoa ez den baka- rra, eta adarkatua izateko aukeratuko dugu. Bertan, x1 aldagaia aukeratuko dugu. Bi problema berri sortuko ditugu: P6 problema eta P7 problema (ikus ereduak 211. orrialdean). 3. urratsa. Bornatzea. Sortutako bi problema berriak ebatzi, aurreko urra- tsetan egin bezala. Kasu honetan, P4 problemaren taula optimotik abiatuko gara (ikus soluzio optimoak 212. orrialdeko 6.1 Irudian). 4.urratsa. Azkeneko problemak. P6 problema azkenekoa da, zg = 410 < 420 = zb betetzen delako. P7 problema ere azkenekoa da, zg = 400 < 420 = zb betetzen delako. Problema guztiak azkeneko bihurtu direnez, algoritmoaren aplikazioa amaitu da. Problema osoaren soluzio optimoa, P2 problemaren ebazpenetik lortu den soluziogaia da. x∗ 1 = 3, x∗ 2 = 4, z∗ P O = zb = 420. 2 OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 219 6.5 0-1 programazio osoa Praktikan aldagai bitarrak besterik ez dituzten problemak existitzen dira. Mota horretako problemak ebazteko, algoritmo desberdinak garatu izan dira. Atal ho- netan, funtsean adarkatze- eta bornatze- algoritmoaren egitura bera duen algoritmo horietako bat azalduko dugu. Aztertuko dugun algoritmoa erabiltzeko, 0-1 eredu lineal osoaren helburu fun- tzioaren koeﬁzienteek ondoko baldintza bete behar dute: 0 ≤ c1 ≤ c2 ≤ · · · ≤ cn (6.1) Eredu lineala beti idatz daiteke  (6.1) baldintza beteko duen idazkeran; hori hala izan dadin, beharrezkoak diren aldaketa linealak egin beharko dira. Adibidea. Izan bedi ondoko 0-1 eredu lineal osoa: max z = 6x1 − 4x2 hauen mende 3x1 + 2x2 ≤ 10 − x1 + x2 ≤ 17 x1, x2 = 0 edo 1 Helburu funtzioaren koeﬁzienteek (6.1) baldintza betetzen ez dutenez, ondoko aldaketa lineala egin behar dugu: helburu funtzioan koeﬁziente minimoa aukera- tuko dugu balio absolutuan, c2 kasu honetan. x2 = y1 egingo dugu baldin koeﬁ- zientea positiboa bada, eta x2 = 1 − y1 baldin c2 negatiboa bada. Kasu honetan c2 negatiboa denez, x2 = 1 − y1 aldagai-aldaketa egingo dugu. Hurrengo koeﬁziente txikiena balio absolutuan c1 da; positiboa denez, x1 = y2 egingo dugu. Aldagai-aldaketa eginez lortzen den eredu linealean helburu funtzioaren koe- ﬁzienteek  (6.1) baldintza betetzea lortzen dugu, hau da, positiboak izatea eta go- ranzko ordenean egotea. max z = 4y1 + 6y2 − 4 hauen mende − 2y1 + 3y2 ≤ 8 − y1 − y2 ≤ 16 y2, y2 = 0 edo 1 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  220 6. Programazio osoa 2 6.5.1 Deﬁnizioa. (Problema erlaxatua) 0- 1 eredu lineal bat izanik, dagokion pro- blema erlaxatua lortzeko problemari murrizketa guztiak kendu behar zaizkio, al- dagaiak bitarrak izatearena izan ezik. 6.5.2 Deﬁnizioa. (Soluzio partziala) 0- 1 eredu lineal bat emanik, aldagairen bat balio ﬁnkorik gabe duen soluzioari eredu linealaren soluzio partziala deitzen zaio. 6.5.3 Deﬁnizioa. (Soluzio partzial baten osaketa) 0- 1 eredu lineal oso baten so- luzio partzial bat emanik, ﬁnkatu gabe dauden aldagaiei balio ﬁnkoa ematen zaie- nean lortzen den soluzioa soluzio partzialaren osaketa dela esaten da. Adibidea. Izan bedi ondoko 0-1 eredu lineala: max z = x1 + 2x2 + 4x3 hauen mende x1 + x2 + 2x3 ≤ 4 3x1 + x2 + 2x3 ≤ 5 x1, x2, x3 = 0 edo 1 Dagokion problema erlaxatua ondokoa da: max z = x1 + 2x2 + 4x3 hauen mende x1, x2, x3 = 0 edo 1 Adibidez, x = (1, 1, −) soluzioa problema erlaxatuaren soluzio partzial bat da. Soluzio horrek bi osaketa posible ditu: (1, 1, 0) eta (1, 1, 1). x = (0, −, −) soluzioa ere problema erlaxatuaren soluzio partzial bat da, eta lau osaketa posible ditu: (0, 1, 1), (0, 1, 0), (0, 0, 1) eta (0, 0, 0). Problema erlaxatua ebaztea erraza gertatzen da, jakinda problemari murrizketa guztiak kendu zaizkiola, aldagaiak bitarrak izatearena izan ezik. Gainera, helbu- ru funtzioaren koeﬁziente guztiak positiboak direnez, garbi ikusten da problema erlaxatuaren soluzio optimoa x∗ = (1, 1, 1) dela. Soluzio horrek 0-1 problema osoaren murrizketak beteko ez balitu, helburu funtzioaren koeﬁzienteak txikiene- tik handienera ordenatuta daudenez, problema erlaxatuaren hurrengo soluziorik OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 221 onenarekin, hau da, x = (0, 1, 1) soluzioarekin probatuko genuke, eta gero hu- rrengoarekin x = (1, 0, 1), eta abar. Problema erlaxatuaren soluzioak onenetik okerrenera ordena ditzakegu, eta ordena horretan 0-1 problema osoaren murrizke- ta betetzen duten egiaztatu, betetzen duen bat aurkitu arte. 2 Ondoko atalean azaltzen den 0-1 adarkatze- eta bornatze- algoritmoak, hain zuzen ere, hori egiten du: algoritmoa problema erlaxatuaren soluzio optimotik hasten da, eta 0-1 problema osoaren murrizketak betetzen dituen egiaztatzen du. Problemak adarkatuz, 0-1 problema osorako soluzio optimoa aurkituko da. Eba- tzitako problema guztiak erlaxatuak dira. 6.5.1 0-1 adarkatze- eta bornatze-algoritmoa Algoritmo hau helburua maximizatzea duten 0-1 problema linealak ebazteko di- seinatua izan da. Helburu funtzioaren koeﬁzienteek 0 ≤ c1 ≤ c2 ≤ · · · ≤ cn baldintza bete behar dute algoritmoa aplikatzen hasi aurretik. 1. urratsa. Hasieraketa Problema erlaxaturako soluzio optimoa den x = (1, . . . , 1) soluzioak 0-1 problema osoaren murrizketak betetzen dituen egiaztatu. Hala bada, (1, . . . , 1) soluzioa optimoa da. Amaitu. Bestela, aztertu ea murrizketak betetzen diren x = (0, 1, . . . , 1) balioetara- ko. Hala bada, (0, 1, . . . , 1) soluzioa optimoa da. Amaitu. Bestela, zb = z(x) behe-bornea hasieratu, non x = (0, . . . , 0) den. zg = z(xg) da, non xg = (0, 1, . . . , 1) den. Problemari k = 1 indizea esleitu. 2. urratsa. Adarkatzea Azkenekoa ez den problema bat aukeratu. Aukeratutako problema adarkatu, xk = 0 eta xk = 1 murrizketak erantsiz, bi problema berri sortzeko. 3. urratsa. Bornatzea Bi problema berri horietarako k + 1 osagaia 0 duten eta hurrengoak 1 di- tuzten xg osaketak egin. Bi problemek osaketa horietan hartzen dituzten zg balioak kalkulatu. Problema berri horiei k = k + 1 indizea esleitu. Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  222 6. Programazio osoa 4. urratsa. Azkeneko problemak Azkeneko ez diren problema guztiak aztertu. Azkeneko dira ondoko bal- dintzetako bat betetzen dutenak: (1) zg ≤ zb. (2) zg > zb bada, eta xg soluzioak problema osoaren murrizketak betetzen baditu, xg soluziogaia da, eta zb = zg eguneratuko da. (3) Problemaren murrizketa guztiak aldi berean beteko dituen osaketarik ez da existitzen. Problema bideraezina da. Problema guztiak azkenekoak badira, amaitu. Problema osoaren soluzio optimoa zb behe-borneak erakutsitako soluziogaia da. Bestela, 2. urratsera joan. Adibidea. 203. orrialdeko motxilaren problema ebatziko dugu 0-1 adarkatze- eta bornatze-algoritmoa erabiliz. max z = 15x1 + 25x2 + 12x3 + 10x4 hauen mende 3x1 + 6x2 + 5x3 + 5x4 ≤ 12 x1, x2, x3, x4 = 0 edo 1 Helburu funtzioaren koeﬁzienteak ordenatzeko, ondoko aldagai-aldaketa egin behar da: x4 = y1, x3 = y2, x1 = y3 eta x2 = y4. Beste 0-1 problema osoa eta dagokion eredu erlaxatua ondokoak dira: 0-1 Problema Osoa: PO Problema Erlaxatua: PE max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende 5y1 + 5y2 + 3y3 + 6y4 ≤ 12 y1, y2, y3, y4 = 0 edo 1 y1, y2, y3, y4 = 0 edo 1 OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 223 226. orrialdeko 6.2 Irudiko diagraman laburbilduko ditugu 0-1 problema osoaren soluzio optimoaren bilaketarako 0-1 adarkatze- eta bornatze- algoritmoa aplika- tzean lortutako problema erlaxatu guztiak, eta bertan zehaztuko ditugu problema bakoitzerako soluzio partzial bat eta problemarako goi- borne bat kalkulatzeko ba- lioko digun osaketa. Lehenengo iterazioa 1. urratsa. Hasieraketa. Problema erlaxatuaren (1, 1, 1, 1) soluzio optimoak ez du 0-1 problema osoa- ren murrizketa betetzen. Problema erlaxatuaren hurrengo soluzio onena den (0, 1, 1, 1) soluzioak ere ez du 0-1 problema osoaren murrizketa betetzen. Soluzio horri dagokion helburu funtzioaren balioa zg = 52 da. Problemari k = 1 indizea esleitu eta behe-bornea zb = 0 balioarekin hasiera- tuko dugu. 2. urratsa. Adarkatzea. PE problema erlaxatua bi problematan adarkatuko dugu, y1 = 0 eta y1 = 1 murrizketak erantsiz. Horrela lortuko ditugu P2 problema eta P3 problema, hurrenez hurren. P2 problema P3 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 0 y1 = 1 y2, y3, y4 = 0 edo 1 y2, y3, y4 = 0 edo 1 3. urratsa. Bornatzea. yg = (0, 0, 1, 1) osaketarekin P2 problemaren helburu funtzioak zg = 40 ba- lioa hartzen du; balio hori problema osorako goi- borne bat izango da adar honetan. yg = (1, 0, 1, 1) osaketarekin P3 problemaren helburu funtzioak zg = 50 ba- lioa hartzen du; balio hori problema osorako goi- borne bat izango da adar honetan. Problema hauei k = 2 indizea esleituko diegu. 4. urratsa. Azkeneko problemak. P2 problemarako dugun yg = (0, 0, 1, 1) osaketak 0-1 problema osoaren mu- rrizketa betetzen du. Gainera, zg = 40 > 0 = zb betetzen denez, soluzio hori Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  224 6. Programazio osoa soluziogai bihurtuko da, eta P2 problema azkeneko. Behe-bornea eguneratuko dugu, zb = 40. P3 problemaren yg = (1, 0, 1, 1) osaketak, aldiz, ez du 0-1 problema osoaren murrizketa betetzen. Gainera, P3 problema ez da bideraezina, existitzen delako 0-1 problema osoaren murrizketa beteko duen osaketaren bat, y = (1, 0, 0, 0) adibidez. zg = 50 > zb izanik, ez da azkeneko problema izateko bete behar den baldintzarik betetzen. Beraz, P3 problema ez da azkenekoa, eta algoritmoaren iterazio berri bati ekin behar zaio. Bigarren iterazioa. P3 problema adarkatuko dugu, y2 = 0 murrizketa erantsiz P4 problema sor- tzeko eta y2 = 1 murrizketa erantsiz P5 problema. P4 problema P5 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 1 y1 = 1 y2 = 0 y2 = 1 y3, y4 = 0 edo 1 y3, y4 = 0 edo 1 Algoritmoan zehazten diren osaketak eta osaketa horietarako helburu funtzioa- ren balioak kalkulatuko ditugu bi problematarako: P4 problemarako yg = (1, 0, 0, 1) eta zg = 35 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. P5 problemarako yg = (1, 1, 0, 1) eta zg = 47 ditugu. Problema ez da azkene- koa. Problema hauei k = 3 indizea esleituko diegu. P5 problema azkenekoa ez denez, 2. urratsera joan eta algoritmoaren iterazio berri bati ekingo diogu. Hirugarren iterazioa. P5 problema adarkatuko dugu, y3 = 0 murrizketa erantsiz P6 problema sor- tzeko eta y3 = 1 erantsiz P7 problema sortzeko. OpenCourseWare, UPV/EHU  6.5. 0-1 programazio osoa 225 P6 problema P7 problema max z = 10y1 + 12y2 + 15y3 + 25y4 max z = 10y1 + 12y2 + 15y3 + 25y4 hauen mende hauen mende y1 = 1 y1 = 1 y2 = 1 y2 = 1 y3 = 0 y3 = 1 y4 = 0 edo 1 y4 = 0 edo 1 Bi problemetarako osaketak eta osaketa horietarako helburu funtzioaren balioa kalkulatuko ditugu. P6 problemarako yg = (1, 1, 0, 0) eta zg = 22 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. P7 problemarako yg = (1, 1, 1, 0) eta zg = 37 ditugu. Problema azkenekoa da, zg < zb = 40 betetzen delako. Problema hauei k = 4 indizea esleituko diegu. Azkenekoa ez den problemarik ez dagoenez, adarkaketak amaitu dira. 0-1 problema osoaren soluzio optimoa zb = 40 behe-borneari dagokion soluziogaia da, hau da, yg = (0, 0, 1, 1). Egindako aldagai-aldaketak deseginez, 0-1 problema osoaren soluzio optimoa lortzen da: x∗ 1 = 1, x∗ 2 = 1, x∗ 3 = 0, x∗ 4 = 0, z∗ = 40. Ebazpen osoa erakusten duen diagrama 6.2 Irudian ikus daiteke. 2 Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala  226 6. Programazio osoa PE problema P2 problema P3 problema P4 problema P5 problema P6 problema P7 problema y = (0, −, −, −) y = (1, −, −, −) y = (1, 0, −, −) y = (1, 1, −, −) y = (1, 1, 0, −) y = (1, 1, 1, −) yg = (0, 1, 1, 1) yg = (0, 0, 1, 1) yg = (1, 0, 1, 1) yg = (1, 0, 0, 1) yg = (1, 1, 0, 1) yg = (1, 1, 0, 0) yg = (1, 1, 1, 0) zg = 52 zg = 40 zg = 50 zg = 35 zg = 47 zg = 22 zg = 37 zb = 40 y1 = 0 y1 = 1 y2 = 0 y2 = 1 y3 = 0 y3 = 1 Azkenekoa Azkenekoa Azkenekoa Azkenekoa Soluziogaia 6.2. Irudia: Adibideko 0-1 problema osoaren ebazpenaren diagrama. OpenCourseWare, UPV/EHU
