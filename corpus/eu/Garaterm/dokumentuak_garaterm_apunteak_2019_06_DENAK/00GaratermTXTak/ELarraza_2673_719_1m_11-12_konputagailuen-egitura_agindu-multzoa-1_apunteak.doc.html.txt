






                                  2.1SARRERA
2.1.1 KONPUTAGAILU PEDAGOGIKO BATEN IKUSPEGI FUNTZIONALA: BIRD
Gai honetan, BIRD izeneko konputagailu didaktikoa erabiliko da. BIRD ez da
konputagailu erreal bat, simuladore bat baizik, hots, programa bat. Programa
hori edozein PCtan exekuta daiteke, eta balizko konputagailu pedagogikorako
idatzitako aginduak betetzen ditu. BIRD konputagailuak von Neumann egitura du.
Atal honetan eta hurrengoan, konputagailu horren oso behe mailako deskripzioa
egingo da. Konputagailu baten oinarrizko funtzionamendua ezagutzen badu,
irakurleak A eranskinera jo dezake; hor aurkituko ditu BIRD konputagailuaren
eta haren mihiztadura-hizkuntzako aginduen deskripzio sakonagoa.
2.1 irudian, BIRD konputagailuaren eskema logiko sinple bat ageri da.


            ****** 2.1 irudia.BIRD konputagailuaren egitura. ******
• Prozesadorea. Aginduen exekuzioaz arduratzen da. Irudietan erabili dugun
“metafora” edo eredu grafikoan, "lan-gune” edo “tailerra” da prozesadorea.
Bertan, aginduetan adierazitakoa egingo da, hau da, aginduak exekutatuko dira.
Horretarako, osagai hauek izango ditu:
- Kontrol-unitatea, KU. Haren lana hau izango da: memoria nagusitik aginduak
irakurri, aztertu, eta, azkenik, haiek exekutatzeko konputagailuak behar dituen
kontrol-seinaleak sortu. Eredu grafikoan, kontrol-unitateak “tripontzi” itxura
du, aginduak "jaten" dituelako zereginak erabakitzeko.
- Unitate aritmetiko/logikoa, UAL (Arithmetic and Logic Unit, ALU). Oinarrizko
eragiketak (batuketak, kenketak, AND, OR, eta abar) egiten ditu. Grafikoki,
kalkulagailuaz hornitutako “erreminta-kaxa” gisa irudikatu dugu.
- Erregistro-multzoa, EM. Barne-biltegia da, edukiera gutxikoa baina azkarra,
eta behin behineko informazioa gordetzeko erabiltzen da. Oro har, memoria
nagusia motela da konputagailuaren prozesu-abiadurarekin alderatuta (adib.
memoriako atzipen-denbora 50 ns izan daiteke, baina aginduen exekuzioa
kontrolatzen duen erlojuaren periodoa 1 ns izan daiteke). Hori dela eta, behin
baino gehiagotan erabili behar den informazioa (tarteko emaitzak, indizeak,
etab.) erregistroetan gordetzen da. Grafikoki adierazteko, lan-gunean dagoen
edukiera gutxiko “armairu” bat erabili dugu, edukiera handiagoko “biltegi”
orokorretik at. Azken hori urrutiago kokatuta dago,eta,beraz,motelagoadahara
joatea datuen bila.
Oro har, bi erregistro mota daude: (1) helburu orokorreko erregistroak,
programatzaileak kalkuluak egiteko erabil ditzakeenak; eta (2) helburu bereziko
erregistroak, prozesadoreak bakarrik erabil ditzakeenak aginduak zuzen
exekutatzeko. Erregistro-multzoa lehenengoek osatzen dute. BIRD konputagailuak
helburu orokorreko 32 erregistro ditu; horietako lehena (r0) irakurri besterik
ezin da egin, eta 0 balio konstantea gordetzen du. Horrez gain, helburu
bereziko bi erregistro ditu: PC eta IR (hurrengo atalean azalduko ditugu).
• Memoria nagusia (aurrerantzean, memoria soilik). Prozesadorerako aginduak
zein datuak gordetzen ditu. Erregistroak baino edukiera askoz handiagoa du;
atzipena, ordea, motelagoa da (adibidez, 50 ns memoria atzitzeko eta 1 ns
erregistro bat atzitzeko; edukiera aldetik, berriz, milioika aldiz handiagoa da
memoria). Memoriari egokitu diogun eredu grafikoak, “biltegiak”, bi ezaugarri
horiek azpimarratu nahi ditu: edukiera handiagoa batetik, eta atzipen-denbora
luzeagoa bestetik, “tailerretik” (CPUtik) atera behar baita lanerako materiala
eskuratzeko.
BIRD konputagailu didaktikoan, memoriaren edukiera 65536 (64 k) memoria-posizio
da.
• Sarrera/irteerako unitatea. Esan bezala, konputagailuaren eta ingurunearen
arteko komunikazioa ahalbidetzen du. Periferiko izena hartzen duten
unitateetako datu-transferentziaz arduratzen da (pantaila, teklatua, diskoak,
zintak, inprimagailua, etab.). BIRD simuladoreak ez dauka sarrera/irteerako
unitate espezifikorik, baina gai da teklatutik datuak jasotzeko eta emaitzak
pantailaratzeko.
• Busak. Konputagailuaren osagai guztiak konektatzen dituzte. Busen bidez,
osagaien arteko informazio-trukea gauzatzen da. Garraiatzen den informazioa
hiru motakoa izan daiteke: (a) helbideak, aginduen zein datuen memoria-
posizioak adierazteko —ohikoa da @ ikurra erabiltzea helbidea adierazteko—; (b)
kontrol-informazioa, bete behar den ataza zehazteko —irakurketa, idazketa,
etab.—; eta (c) datuak, memoriaren, erregistroen edo periferikoen edukia.
Memoria nagusian, 16 biteko 216 gelaxka daude; beraz, 64 k hitzeko edo 128
kilobyteko memoria da. Helbide-busa zein datu-busa 16 bitekoak dira, eta
helbideratze-unitatea hitza da (2 byte). BIRD konputagailuan prozesatzen diren
datu guztiak 16 bitekoak dira, eta, ondorioz, memoriako atzipen bakarra behar
da datu bat irakurri edo idazteko. Aginduak, ordea, 32 bitekoak dira (agindu
bakoitzak memoriako 2 posizio edo hitz betetzen ditu). Atzipen bakoitzean hitz
bat irakurtzen denez (datu-busa 16 bitekoa da), bi atzipen behar dira agindu
bat irakurtzeko, eta bakoitzean aginduaren zati bat eskuratu1.
Ondorioz, PCaren balioa bi unitatetan gehituko da bilaketa fasean zehar,
azkenean hurrengo aginduaren helbidea adieraz dezan.
Aurreko datuetatik erraz ondorioztatzen da IR erregistroa 32 bitekoa dela, eta
PCa, ordea, 16 bitekoa. Modu berean, BIRD konputagailuaren erregistro-multzoko
32 erregistroak 16 bitekoak dira.


2.1.2 TXORI MIHIZTADURA-HIZKUNTZAREN AGINDU NAGUSIAK ETA PROGRAMEN EGITURA
Makina-hizkuntzazprogramatzea, hau da, zerokoak eta batekoak erabiltzea
programa bat idazteko, guztiz astuna eta zaila da, eta akatsak gertatzea oso
erraza da. Konputagailuen hasierako garaietan hala programatzen bazen ere,
aspaldi garatu ziren programazio-hizkuntza egokiagoak, haien artean
mihiztadura-hizkuntzak2. Beraz, makina-mailaren gainean dagoen TXORI
mihiztadura-hizkuntza erabiliko dugu programak idazteko. Mihiztadura-
hizkuntzako mailan, aginduak ez dira bitarrez adierazten, mnemoteknikoak
erabiliz baizik –adibidez, add, batuketa adierazteko–. Programa exekutatu ahal
izateko, beraz, mnemotekniko horiek itzuli egin beharko dira konputagailuak
ulertzen duen hizkuntza bakarrera (makina-hizkuntzara, alegia), programa berezi
baten bidez: mihiztatzailea.
2.2 irudian, TXORI mihiztadura-hizkuntzaz idatzitako programen egitura ageri
da. Programa .titleprograma_izena sasiagindu artezkariarekin hasi
eta.endsasiagindu artezkariarekin amaitzen da. Bi sasiagindu horien artean,
datuen edo aldagaien definizioak eta programaren aginduak zehazten dira.
Sasiaginduak ez dira konputagailuaren makina-hizkuntzako aginduak; hori baino,
mihiztatzaileari “kontrol-informazioa” emateko erabiltzen dira: aldagaiak
erazagutzeko, edota programaren hasiera zein bukaera adierazteko.
Aldagaien erazagupena bi sasiaginduren bidez egiten da: .wordeta.value.
Lehenengoak, memoria-espazioa erreserbatzen du adierazten den aldagaiarentzat:
aldagaia: .word hitz_kopurua;


2 irudiko adibidearen kasuan, EURO izeneko aldagairako memoria-posizio bat
erreserbatzen da.
Bigarrenak, tokia erreserbatzeaz gain, hasierako balioa esleitzen die
aldagaiei:
aldagaia:.value hasiera-balioa;


Adibidean, PREZIO eta BEZ aldagaien hasierako balioak 1000 eta 6 dira, hurrenez
hurren.


                                     Programen egitura orokorra
                        Adibidea: Produktu baten prezioa kalkulatu, %6ko BEZa
                                            aplikaturik.
                                 euro = prezio + [preziobez / 100]
        hasiera

                       .titleizena                .titleFAKTURA

                                                  PREZIO: .value 1000;
                                                  BEZ: .value 6;
                       aldagaien definizioa,      EURO: .word 1;
                       sasiaginduen bidez
   programa nagusia

                       .proc main                 .procmain
                       ...                        ld
                       ...                        r1,
                       programa nagusiko aginduak PREZIO
                       {oharrak}                  ld
                       ...                        r2,
                       ...                        BEZ
                                                  mul r3,r1,r2
                                                  divi r4,r3,#100
                       .endp main                 add r4,r1,r4
                                                  st r4,EURO{emaitzagorde}
                                                  retm
                                                  .endpmain
     azpirrutinak

                       .procazpirrutina_izena
                       ...
                       azpirrutinaren aginduak
                       ...
                       .endpazpirrutina_izena

        bukaera

                       .end                       .end

  ****** 2.2 irudia. TXORI mihiztadura-hizkuntzako programen egitura. ******
Aldagaiak erazagutu ondoren, programa nagusiko aginduak datoz, .procmaineta
.endpmain sasiaginduen artean. Era berean, azpirrutinak erabili behar badira,
.procazpirrutina_izena eta .endpazpirrutina_izena sasiaginduen artean idatziko
dira, programa nagusiaren ondoren. Azpirrutinak (prozedurak zein funtzioak) gai
honetan bertan, aurrerago, landuko dira. Programa edo fitxategi batek programa
nagusi bakar bat (main izenekoa) eta hainbat azpirrutina eduki ditzake.
Egokia da oharrak gehitzea edozein programatan, aginduen zein prozeduren
esanahia argitzearren. TXORI mihiztadura-hizkuntzan, oharrak edozein puntutan
jar daitezke, ‘{‘ eta ‘}’ karaktereen artean.
Jarraian, 2.2 irudiko adibidean azaltzen diren BIRD konputagailuaren aginduak
errepasatuko ditugu, programak egiten duena hobeto ulertzeko asmoz. rh helburu-
erregistroa da, eta ri iturburu-erregistroa.
Zehazki, honako agindu mota hauek erabili ditugu:


• Aritmetikoak: Bi eragigaien arteko eragiketa aritmetikoak egiteko erabiltzen
dira. Oinarrizko bi mota daude: bi erregistroen edukiekin kalkuluak egiten
dituztenak (adibidez, mulr3,r1,r2), eta erregistro baten edukiarekin eta
berehalako datu batekin kalkuluak egiten dituztenak (adibidez,divir4,r3,#100).
Formatua hau da:
▪
op
rh,ri1,ri2
rh
:=ri1OPri2
▪
opi
rh,ri,#bereh
rh
:=riOPbereh


Eragiketa aritmetiko hauek exekuta daitezke: batuketa, kenketa, biderketa eta
zatiketa (add, sub, mul, div, eta addi, subi, muli, divi).


• Memoriako atzipenak (loadetastore): Memorian dauden datuak irakurri eta
erregistroetan kopiatzeko, edota erregistroetako balioak irakurri eta memorian
idazteko erabiltzen dira. Aurreko adibidean,
ldr1,prezio;ldr2,bez;etastr4,euroerabili dira. Aldagaien helbide zehatzak jarri
beharrean, aldagaien izenak jar daitezke mihiztadura-hizkuntzako programetan.
Hala, erabiltzaileak ez ditu helbideak kalkulatu behar (mihiztatzaileak
kalkulatuko ditu), eta programa irakurgarriagoak lortzen dira.
Formatua hau da:
▪
ld
rh,ALD rh:=MEM[ALD]
▪
st
ri,ALD MEM[ALD]:=ri


(atzitu nahi den memoria-helbidea aldagaiaren izenaren bidez edo helbide jakin
bat adieraziz eman daiteke; bigarren kasuan, aginduen formatua hauxe da:
ldrh,@helbetastri,@helb)


• Datu-mugimenduak: Prozesadoreko erregistroen edukia batetik bestera mugitu
edo kopiatzeko erabiltzen dira, eta balio konstanteak kargatzeko ere bai.
Formatua hau da:
▪
mov
rh,ri rh:=ri
▪
movi
rh,#bereh
rh
:=berehalakoa


• Bukaera: programa nagusiaren bukaera adierazteko erabiltzen da. Formatua hau
da:
▪retm
Agindu hori beti azaldu behar da programa nagusiaren bukaeran. Ez bada jartzen,
exekuzio-errore bat sortuko da.


2.2 irudiko adibidera itzuliz, programak salgaiaren prezioa eta erabili behar
den BEZa irakurtzen ditu, memorian; hasierako prezioari BEZa gehitu, eta
bukaerako prezioa euro izeneko aldagaian gordetzen du.


2.1.1 Adibidea
2.2 irudian ageri den programari sarrera/irteerako aginduak gehitu dizkiogu,
hasierako prezioa teklatutik jaso dezan eta bukaerako emaitza pantailan erakuts
dezan.


.titleFAKTURA2

PREZIO: .word1;
{nahikoadamemoria-posiziobatesleitzea}
BEZ: .value 6;
EURO: .word 1;

.procmain

outs“Sakatusalneurria:”
in
{salneurriar1erregistroanuztenda}
str1,PREZIO{etamemoriankopiatzenda}

ldr1,BEZ
ldr2,PREZIO
mulr3,r1,r2
divir4,r3,#100
addr4,r2,r4
str4,EURO

outs“Azkenprezioahauda:”
movr1,r4
{azkenprezioar4-tikr1-erakopiatzenda,geropantailanazalduahalizateko}
out
{prezioa,r1-eandagoena,pantailaratzendu}
retm

.endpmain
.end







1 Kontuz: aurreko atalean, agindu baten exekuzio faseak errazago ulertzearren,
aginduak atzipen bakar batean eskuratu ditugu, 16 bitekoak zirelakoan.
2Mihiztadura-hizkuntzak ere ez dira ia erabiltzen gaur, ez bada oso eragiketa
konkretuetan. Oro har, goi-mailako hizkuntzak erabiltzen dira: ADA, Fortran,
Java, eta abar.
