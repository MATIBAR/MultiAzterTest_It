







                            2.3_HELBIDERATZEMODUAK
2.3.1 SARRERA
Dagoeneko aipatu den moduan, konputagailuak 1ekoen eta 0koen segidak —behe-
mailako aginduak— exekutatzen ditu. Agindu horiek konputagailu horren makina-
hizkuntza osatzen dute, edo, mnemoteknikoen bidez adierazita, mihiztadura-
hizkuntza. Konputagailu bakoitzak berezko makina-hizkuntza erabiltzen du, eta
hizkuntza hori erabat erlazionaturik dago prozesadoreko hardwarearekin.
Makina-hizkuntzen ezaugarri nagusiak hauek dira:
• agindu-multzoa, hau da, exekuta daitezkeen aginduak
• aginduen formatua, hots, nola egituratzen den informazioa
• eragigai kopurua
• helbideratze-moduak
• datuen formatua
Makina-hizkuntzako agindu batek eragiketa bat eta bere eragigaiak adierazten
ditu. Beraz, aginduetan hiru atal bereizten dira: (a) eragiketa-kodea, egin
nahi den eragiketa adierazteko; (b) iturburu-eragigaiak, eragiketa egiteko
behar diren datuak nola eskura daitezkeen adierazteko; eta (c) helburu-
eragigaia, eragiketaren emaitza non gorde behar den adierazteko. Informazio
hori guztia, hots, agindua bera, bit-segida baten bidez adierazten da, eta
memorian gordetzen.
Kapitulu honetan, aginduak kodetzeko erak azalduko dira, eta, horrez gainera,
aginduen kodeketak konputagailuaren eraginkortasunean izan dezakeen eragina.
2.3.2 AGINDU-FORMATUA
Esan bezala, aginduaren informazioa bit-segida batean gordetzen da; hor
adierazten da, hainbat eremutan banatuta, zer eragiketa bete behar den, zer
eragigai erabili behar diren, eta emaitza non gorde behar den. Informazio hori
guztia egituratzeko erabiltzen den formatuari agindu-formatuaderitzo. Adibide
gisa, lau eremuko agindu baten formatua ageri da 2.3.1 irudian.




  Eragiketa-kodea    Helburu-eragigaia    1. Iturburu-   2. Iturburu-eragigaia
                                           eragigaia
     ****** 2.3.1irudia. Lau eremuko agindu-formatu baten adibidea. ******
Hurrengo ataletan, agindu-formatuen osagaiak eta haien kodeketa aztertuko
ditugu.
2.3.2.1 Aginduaren luzera
Agindu-multzo bat diseinatu behar denean, parametro asko erabaki behar da, eta
haien artean aginduen luzera, hots, aginduak adierazteko erabili behar den bit
kopurua. Erabaki hori hartzeko, irizpide asko erabil daitezke; erabakiaren
arabera, aginduen bilaketa fasea errazagoa edo konplexuagoa izango da. Hauek
dira aukera nagusiak:


a. Luzera finkoko formatua: agindu guztiak tamaina edo bit kopuru berekoak
dira.
Luzera finkoko formatuaren abantaila nagusia aginduen bilaketa fasean ageri da,
memoriatik irakurri behar den bit kopurua beti bera baita, edozein
agindutarako. Baina, beste alde batetik, memoria-edukiera ez da modu egokian
aprobetxatzen; izan ere, hainbat agindutan ez dira eremu guztiak erabili behar,
eta, agindu guztiak tamaina berekoak direnez, eremu horiei dagozkien bitak
alferrik okupatuko dira memorian.
BIRD konputagailuaren agindu guztiak luzera finkokoak dira, 32 bitekoak.


b. Luzera aldakorreko formatua: aginduak tamaina edo bit kopuru desberdinekoak
dira.
Tamaina aldakorra denez, aginduan bertan adierazi beharko da haren luzera,
eragiketa-kodean edo eremu jakin batean. Eragiketa-kodean adierazten bada,
aginduaren luzera ez da ezagutuko deskodeketa egin arte. Luzera aldakorreko
formatuaren abantailak eta eragozpenak luzera finkokoaren kontrakoak dira.
Batetik, aginduaren bilaketa konplexuagoa da (ez baitakigu zenbat bit irakurri
behar diren agindu osoa eskuratzeko), baina, bestetik, hobeto aprobetxatuko da
memoria, agindu bakoitzak behar duen espazioa bakarrik okupatuko baitu (hala
ere, aginduek okupatzen duten memoria-espazioa ez da, gaur egun, oso parametro
kritikoa).
2.3.2.2 Eragiketa-kodearen formatua
Eragiketa-kodeak adierazten du exekutatu behar den eragiketa, eta, jakina,
agindu guztiak kodetu ahal izateko adina bit behar du. Aginduaren formatuarekin
gertatzen den bezala, finkoa nahiz aldakorra izan daiteke eragiketa-kodearen
luzera. Egiten den hautuaren arabera, errazagoa edo zailagoa izango da aginduen
deskodeketa.
2.3.2.2.1 Luzera finkoko eragiketa-kodea
Eragiketa-kodeak bit kopuru finkoa du, agindu guztietan bera. Kodetu behar den
agindu kopuruak zedarrituko du luzera (l):
                          l = log2 (agindu kopurua)


Adibidez, BIRD konputagailuan, luzera finkokoa da aginduen eragiketa-kodea. 42
agindu desberdin definitu direnez, 6 bit behar dira kode horiek adierazteko.
Eragiketa-kodea luzera finkokoa denean, errazagoa da aginduen deskodeketa,
aldez aurretik ezagutzen baita zenbat eta zein bitek osatzen duten eragiketa-
kodea.
Hala ere, kodetu behar den agindu kopurua handia bada, bit asko erabili beharko
da eragiketa-kodea adierazteko; ondorioz, luzeagoak izango dira aginduak, edo,
bestela, aginduen luzera mugatu nahi bada, bit gutxi geratuko dira eragigaiak
adierazteko. Adibide honetan ageri da arazo hori.


2.3.1 Adibidea
Konputagailu baten agindu-multzoa diseinatu behar da. Agindu-multzoak 76 agindu
ditu, honela banatuta:
• hiru eragigaiko 15 agindu
• bi eragigaiko 14 agindu
• eragigai bakarreko 31 agindu
• eragigairik gabeko 16 agindu
Eragigai bakoitza 4 bitetan kodetu behar da, eta aginduek luzera finkokoak izan
behar dute, 16 bitekoak. Egin daiteke kodeketa hori luzera finkoko eragiketa-
kodeak erabiliz?
Eragiketa-kodea luzera finkokoa izanik, 76 agindu kodetu ahal izateko, 7 bit
behar dira (log276 = 6,25 → 7). Ondorioz, eragigairik gabeko aginduak 7
bitekoak izango dira; eragigai bakarrekoak, 7 + 4 = 11 bitekoak; bi
eragigaikoak, 7 + 24 = 15 bitekoak; eta, azkenik, hiru eragigaikoak, 7 + 34 =
19 bitekoak.
Aginduek 16 bitekoak izan behar dutenez, lehenengo hiru formatuak arazorik gabe
kodetu daitezke, 16 bit baino gutxiago behar dituztelako (bit batzuk erabili
gabe geratuko dira); azkenak, berriz, bit gehiago beharko luke. Ondorioz,
ezinezkoa da 16 biteko formatu finko batekin agindu horiek guztiak kodetzea.
Beraz, aurreko aginduak 16 bitetan kodetu behar badira, beste kodetze-
estrategiak eta formatuak erabili beharko dira. Hurrengo ataletan, estrategia
horiek landuko ditugu.




2.3.2.2.2 Luzera aldakorreko eragiketa-kodea
Aginduen eragiketa-kodea luzera aldakorrekoa izan daiteke. Izan ere, agindu
guztiek ez dute eragigai kopuru bera erabiltzen; beraz, eragigai gutxi duten
aginduek eragiketa-kode luzeagoak eduki ditzakete, eta eragigai asko dutenek,
berriz, laburragoak. Estrategia hori erabiliz, txikiagoa da, batez beste,
aginduen luzera, edo, luzerari eutsi nahi bazaio, eragigai gehiago adieraz
daitezke.
Hala ere, eragiketa-kodeak luzera desberdinekoak direnez, konplexuagoa izango
da aginduen deskodeketa. Izan ere, ez dakigu zenbat bit deskodetu behar diren;
beraz, zatika egin beharko da deskodeketa. Hasteko, bit kopuru jakin bat
analizatu beharko da: eragiketa-kode bat osatzen duen kopuru minimoa, hain
zuzen ere. Bit horiek adieraziko dute nahikoa den ala bit gehiago deskodetu
behar diren; bigarren kasuan, jarraitu beharko da prozesuarekin, eragiketa-kode
osoa deskodetu arte.
Luzera aldakorreko kodeak diseinatzeko bi teknika nagusiak hauek dira: kode
zabalduak eta Huffman kodeak. Kode zabalduak, besteak beste, PDP-11
prozesadorean erabili ziren, eta Huffman kodeak (edo antzeko ideia bat)
Motorola MC68000 prozesadorean.


2.3.2.3 Eragigaien formatua. Helbideratze-moduak.
Eragiketa-kodea adierazteko erak aztertu ondoren, eta aginduen kodeketarekin
jarraituz, eragigaien formatua analizatu behar dugu. Agindu batean erabili
behar diren eragigaiak modu askotan adieraz daitezke, haien helbideratze-moduen
arabera. Beraz, aginduen formatua definitzeko, eragigaien helbideratze-moduak
aztertu behar dira.
Helbideratze-moduek adierazten digute nola lortu eragigaiak eragiketa baterako
eta non gorde eragiketaren emaitza (memorian, erregistro batean, ...).
Eragigaien helbideratze-modua izan daiteke (2.3.2 irudia):


• esplizitua: eragigaia adierazten duten bitetako batzuek helbideratze-modua
adierazten dute; gainerakoek, berriz, eragigaiari buruzko informazio gehiago
ematen dute (datua bera, erregistro bat, memoria-helbide bat, ...).
Hala egiten denean, eragiketa-kode bakar bat erabiltzen da eragiketa jakin bat
egiteko (esaterako, eragiketa-kode bera erregistroen arteko batuketa edo
erregistro bat eta berehalako bat batzeko, hots, kode bakar bat batuketarako).


• inplizitua: aginduaren eragiketa-kodeak berak adierazten ditu eragigaien
helbideratze-moduak. Beraz, eragigaiak modu desberdinetan adierazi ahal
izateko, eragiketa-kode desberdinak erabili behar dira, nahiz eta eragiketa
bera izan. Ondorioz, bit gehiago beharko dira eragiketa-kodeak adierazteko.




        E.K.         ...         HM         balioa             ...


                                      (a)


      E.K. (HM)              ...              balioa             ...


                                      (b)
****** 2.3.2 irudia.Eragigaien formatua: (a) helbideratze-modu esplizitua; eta
       (b) helbideratze-modu inplizitua. HM = helbideratze-modua. ******
TXORI hizkuntzan, inplizituak dira eragigaien helbideratze-moduak, eragiketa-
kodeek adierazten baitituzte. Esaterako, mov eta movi aginduek eragiketa bera
egiten dute, baina bigarren eragigaiaren helbideratze-modua desberdina da:
lehenengoak, erregistro bidezko zuzenekoa erabiltzen du, eta, bigarrenak,
berriz, berehalakoa. Beraz, eragiketa-kode desberdinak izango dituzte bi agindu
horiek.
Oro har, helbideratze-modu asko erabiltzen dira eragigaiak adierazteko. Izan
ere, hainbat datu-mota (konstanteak, aldagai eskalarrak, bektoreak, matrizeak,
pilak, ilarak, erregistroak, ...) prozesatu behar dira, eta eraginkorra da
helbideratze-modu egokiak izatea datu-egitura horiekin modu erosoan lan egiteko
(esaterako, indizeak erabiltzea bektoreak atzitzeko).
Helbideratze-moduek eragin zuzena dute bi arlotan: eragigaia adierazteko behar
den bit kopuruan, eta eragigaia eskuratzeko behar den denboran:
• datua erregistro batean egonez gero, bit gutxi beharko dira erregistro hori
adierazteko (erregistro kopurua txikia da); aldiz, memorian egonez gero, bit
gehiago beharko dira haren helbidea emateko.
• datua eskuratzeko behar den denbora ere desberdina da: denbora gutxiago behar
da prozesadoreko erregistro batean dagoen datua atzitzeko, memorian dagoena
irakurtzeko baino. Oso garrantzitsua da ezaugarri hori, jakina, programak azkar
exekutatzea baita konputagailuen helburuetako bat.


Bestalde, konputagailu baten helbideratze-moduak diseinatu behar direnean,
honako helburu hauek ere kontuan hartu behar dira:
• Memoriako eremu edo zati bat definituta, eremu horren edozein posizio
atzitzeko aukera izan behar da.
• Modu eroso eta eraginkorrean atzitu behar dira goi-mailako
hizkuntzetanerabiltzendirendatu-egiturak (bektoreak, matrizeak,...).


Hurrengo ataletan, helbideratze-modu erabilienak azalduko ditugu.




2.3.2.3.1 Berehalakoa(immediateaddressing)
Lehenengo helbideratze-modu hau sinpleena da: eragigaia konstante bat da, eta
aginduan bertan dago, hots, IR agindu-erregistroan. 2.3.3 irudian,
helbideratze-modu hori ageri da.
Eragigaiaren eremuaren luzerak edo bit kopuruak mugatzen du modu horretan
adieraz daitezkeen datuen magnitudea. Oro har, birako osagarria erabiltzen da
datuak adierazteko; ondorioz, eragigaiaren eremua p bitekoa izanik, datuen
tartea [–2p–1, 2p–1–1] da.
Abantaila garbi bat du helbideratze-modu honek: erabili behar den datuaren
atzipena azkarra da oso. Izan ere, datua hortxe dugu, ez da ezer egin behar
datua eskuratzeko. Helbideratze-modu honekin, ostera, datu konstanteak besterik
ezin dira erabili (aldagaien hasiera-balioak adibidez). Gainera, konstante
horien tamaina mugatua da, eta gerta daiteke konstante handi bat adierazi behar
izatea eta lekurik ez izatea IR erregistroan.






          ****** 2.3.3 irudia. Berehalako helbideratze-modua. ******


Honako bi adibide hauetan, berehalako helbideratze-modua erabiltzen da, TXORI
mihiztadura-hizkuntzaz (ikus 2. kapitulua):
movir1,#4
orir1,r2,#b0000000000001100


Berehalako datuak # karakterearen atzetik datoz, eta hamartarrez, bitarrez, edo
hamaseitarrez adieraz daitezke. BIRD konputagailuan, 16 bitetan kodetzen dira
berehalako datuak, eta birako osagarrian adierazten dira. Erabil daitekeen
daturik handiena 215 – 1 da, eta txikiena –215.
2.3.2.3.2 Erregistro bidezko zuzenekoa(registeraddressing)
Erabili behar den datua erregistro-multzoan dago, erregistro jakin batean, eta
erregistroaren zenbakia edo helbidea adierazten da aginduan, IR erregistroan,
eragigaiari dagokion eremuan. Beraz, erregistro bat irakurri behar da datua
eskuratzeko1 (2.3.4 irudia):
datua = EM [erregistro-zenbakia]
Helbideratze-modu hau, jakina, erregistro-multzoan gorde diren datuak atzitzeko
erabiltzen da.












  ****** 2.3.4 irudia. Erregistro bidezko zuzeneko helbideratze-modua. ******
Eragigaia adierazten duen agindu-eremuaren luzerak, n-k,nahikoa behar du izan
erregistro-multzoko edozein erregistro adierazteko; beraz, honako hau bete
behar da:
                        n = log2 (erregistro kopurua)
Helbideratze-modu honek zenbait abantaila ditu. Batetik, erregistroen atzipena
azkarra da (hori dela eta, erregistroetan gordetzen dira maiz erabili behar
diren datuak); eta, bestetik, erregistro bat adierazteko behar den bit kopurua,
n, txikia da, ohi denez, erregistro kopurua ez baita oso handia. Hala ere,
datuak memoriatik erregistroetara kargatzeko eta erregistroetatik memoriara
eramateko aginduak gehitu beharko dizkiogu programari, eta, beraz, programak
luzeagoak izango dira.
Hona hemen helbideratze-modu horren bi adibide, TXORI mihiztadura-hizkuntzaz:
movr2,r1
addr2,r3,r4
BIRD konputagailuak 32 erregistro orokor ditu, eta, beraz, 5 bit behar dira
erregistro bat adierazteko.
2.3.2.3.3 Absolutua(directorabsoluteaddressing)
Kasu honetan, memorian dago erabili behar den datua, eta haren helbidea
adierazten da IR erregistroan, aginduan (2.3.5 irudia). Datua eskuratzeko,
beraz, memoria irakurri behar da, besterik gabe:
datua = M[helbidea]
Helbidea adierazten duen agindu-eremuaren luzerak, m-k, memoriako edozein
posizio identifikatzeko gai izan behar du. Bere tamaina, bitetan, honela
kalkula daiteke:
m = log2 (memoriako posizio kopurua)












            ****** 2.3.5 irudia.Helbideratze-modu absolutua. ******
Memoria-posizioak, oro har, asko dira; beraz, edozein posizio helbideratu ahal
izateko, eremu horrek handia izan behar du, eta agian ez da toki nahikorik
izango IR erregistroan. Adibidez, 4 GB-ko memoria helbideratzeko, 32 bit behar
dira. Zer egin, esaterako, aginduak, guztira, 32 bitekoak badira?
Helbide bat adierazteko bit kopuru txikiagoa erabili ahal izateko, hainbat
segmentutan zatitzen da helbideratze-espazioa konputagailu batzuetan (adibidez,
80x86 familian eta haren ondorengoetan). Halakoetan, memoriako helbideak bi
zatitan ematen dira; batetik, memoria-segmentu jakin baten hasiera- edo
oinarri-helbidea, eta, bestetik, desplazamendua, hots, oinarri-helbidetik
datura dagoen posizio kopurua edo “distantzia”. Izan ere, desplazamendua baino
ez da adierazten IR erregistroan —bit gutxi, alegia—, eta memoria-segmentuen
hasiera-helbideak erregistro berezietan adierazten dira.
Programa baten datuen eta aginduen memoria-helbideak ez dira beti berak. Izan
ere, programa bat exekutatu behar denean, lehendabizi memorian kargatu behar
da, eta une horretan erabakitzen dira datuen eta aginduen posizioak, memorian
libre dagoen espazioaren arabera. Horregatik esaten da programak
“birkokagarriak” direla. Beraz, programa batean adierazitako memoria-helbide
absolutuak egokituko dira, exekuzio bakoitzean, programa kargatzen den memoria-
eremura.
TXORI mihiztadura-hizkuntzako bi agindu hauetan, helbideratze absolutua
erabiltzen da:
ldr1,B{aldagaiarenizenakhelbideaadieraztendu}
str2,@100
Helbide bat adierazteko, bi aukera daude: aurredefinitutako aldagai baten izena
ematea; edo helbide bat ematea, @ karakterearen ondoren. BIRD konputagailuan,
16 bitekoak dira helbide absolutuak.
2.3.2.3.4 Erregistro bidezko zeharkakoa(registerindirectaddressing)
Memorian dago erabili behar den datua, eta erregistro batean gorde da haren
helbidea. Izan ere, datuaren helbidea duen erregistroa adierazten da aginduan,
IR erregistroan. Beraz, datua eskuratzeko, erregistro bat irakurri behar da
lehenik, eta, gero, lortutako helbidearekin memoriara jo (ikus 2.3.6 irudia).
datua = M[EM[erreg-zenb]]
Eragigaia adierazteko eremuan, beraz, n bit behar dira, erregistro bat
adierazteko:
n = log2 (erregistro kopurua)














  ****** 2.3.6 irudia.Erregistro bidezko zeharkako helbideratze-modua. ******
Helbideratze-modu honetan, beraz, memoriako helbide bat adierazteko bit gutxi
erabiltzen dira, erregistro bat adierazteko bit kopurua bakarrik, baina,
ordainean, eragigaiak bi pausotan atzitu behar dira. Helbideratze-modu hau oso
aproposa da bektoreekin lan egiteko; bektorearen hasierako helbidea erregistro
batean gordetzen da, eta, gero, bektorearen osagaien helbideak eskuratzeko,
erregistroaren edukia gehitu besterik ez da egin behar. Hori dela eta, oso
erabilia da datu egituratuak —bektoreak, matrizeak, pilak, ilarak, ...— modu
eraginkorrean atzitzeko.
TXORI mihiztadura-hizkuntzako bi agindu hauetan, erregistro bidezko zeharkako
helbideratze-modua erabiltzen da2:
lddr1,[r5]
stdr3,[r1]
Helbideak gordetzen dituzten erregistroak makoen artean adierazten dira.
Arestian aipatu den moduan, 5 bit nahikoak dira, BIRD konputagailuan,
erregistro bat adierazteko.


Helbideratze-modu honen zenbait aldaeratan, hitz bat atzitzen den bakoitzean,
aldatu egiten da helbidea gordetzen duen erregistroaren edukia.
Autoinkrementuaedoautodekrementua deritzen kasuetan, esaterako, erregistroaren
edukiari unitate bat (edo, oro har, prozesatzen ari den datuaren tamaina adina
unitate) gehitzen edo kentzen zaio, automatikoki. Bi modutara egin daiteke
aldaketa hori:
• erregistroaren balioa erabili baino lehen: lehenik, edukia eguneratzen da,
eta, gero, memoria atzitzeko erabiltzen da.
aurreinkrementua: +[ri]
aurredekrementua
: –[ri]
• erregistroaren balioa erabili ondoren: lehenik memoria atzitzen da, eta,
gero, erregistroa eguneratzen da.
postinkrementua: [ri]+
postdekrementua
: [ri]–
Bektoreen edo matrizeen osagaiak atzitzeko erabili ohi dira aldaera horiek.
2.3.2.3.5 Memoria bidezko zeharkakoa(memoryindirectaddressing)
Aurreko kasuan bezala, memorian dago eskuratu behar den datua, baina haren
helbidea ez dago, ez IR erregistroan ezta erregistro orokor batean ere. Hain
zuzen ere, datuaren helbidea ere memorian gorde da, eta IR erregistroak helbide
hori gordetzen duen memoria-posizioaren helbidea zehazten du. Ondorioz, 2.3.7
irudian ageri den bezala, memoriako bi atzipen egin behar dira datua
eskuratzeko: bata, datuaren helbidea irakurtzeko, eta, bestea, berriz, datua
bera lortzeko.
datua = M[M[helb]]
Eragigai-eremuaren luzerari dagokionez, helbideratze-modu absoluturako behar
den bit kopuru bera behar da, bi kasuetan memoriako helbide bat gorde behar
baita:
m = log2 (memoriako posizio kopurua)
Helbideratze-modu hau ez da askorik erabiltzen, memoria bi aldiz atzitu behar
delako, eta, oro har, atzipen-denbora handia delako. BIRD konputagailuak,
esaterako, ez dauka.














   ****** 2.3.7 irudia.Memoria bidezko zeharkako helbideratze-modua. ******


Oro har, zeharkako helbideratzeak, erregistro bidezkoak zein memoria bidezkoak,
hainbat zeharkatze-maila erabil ditzake. Halakoetan, maila adina memoriako
atzipen egin beharko da, eta azkenekoan aurkituko da datua. Erregistro bidezko
zeharkakoan, datua eskuratzeko egin behar den memoriako atzipen kopurua
adierazten du zeharkatze-mailak; memoria bidezko zeharkakoan, aldiz, atzipen
bat gehiago egin behar da.
2.3.2.3.6 Indexatua(indexedaddressing)
Kasu honetan ere, memorian dago atzitu nahi den datua. Haren helbidea, hala
ere, bi partetan adierazten da: erregistro bat (indize-erregistroa) eta
memoriako helbide bat (oinarri-helbidea). Datuaren helbidea lortzeko, oinarri-
helbidea eta indize-erregistroaren edukia batu behar dira. Beraz,
datua = M[helbidea + EM[erreg-zenb]]
2.3.8 irudian ageri da helbideratze-modu honen eskema grafikoa.
Laburbilduz, datu bat eskuratzeko, lehenik, erregistro bat irakurri eta
batuketa bat egin behar da datuaren helbidea kalkulatzeko, eta, gero, memoria
atzitu.
Bi parametro adierazi behar direnez, IR erregistroko eragigai-eremuaren luzera
aurreko helbideratze-moduena baino handiagoa da. Oraingoan, luzera m + n
bitekoa da, m bit memoriako helbide bat adierazteko eta n bit erregistro bat
adierazteko:
m
 = log2 (memoriako posizio kopurua)
n = log2 (erregistro kopurua)
Helbideratze-modu absolutua azaltzean aipatu dugun bezala, m oso handia bada
(64 bit, esaterako), segmentutan bana daiteke memoria.
Helbideratze indexatua maiz erabiltzen da bektore baten osagaiak atzitzeko,
edota goi-mailako hizkuntzako datu egituratuekin lan egiteko.












            ****** 2.3.8 irudia.Helbideratze-modu indexatua. ******
Hona hemen helbideratze indexatuaren adibide batzuk, TXORI hizkuntzaz:
ldxr1,B[r4]
stxr4,TAULA[r1]
Helbidea adierazteko, aldagaiaren izena (oinarri-helbidea) eta, ondoan, indize-
erregistroa, makoen artean, eman behar dira. BIRD konputagailuan, 16 bit
erabiltzen dira oinarri-helbidea kodetzeko, eta 5 bit indize-erregistroa
adierazteko; 21 bit behar ditu, beraz, helbideratze-modu honek.


2.3.2.3.7 Oinarri-erregistroa gehi desplazamendua: erlatiboa
(baseordisplacementaddressing)
Helbideratze indexatuan gertatzen den moduan, honetan ere, bi zatitan banatzen
da datuaren helbidea: batetik, erregistro baten identifikadorea, eta, bestetik,
desplazamendua. Datuaren helbidea lortzeko, lehenik, erregistroa irakurri behar
da, eta, gero, irakurri den helbideari desplazamendua gehitu (2.3.9 irudia):
datua = M[EM[erreg-zenb] + desplazamendua]
Erabiltzen den erregistroari oinarri-erregistroa deritzo, datu-egitura baten
erreferentzia- edo oinarri-helbidea gordetzen baitu. Helbide horretatik aurrera
(edo atzera) desplazatuko gara, IR erregistroan bertan adierazten den
desplazamenduaren bidez. Desplazamendua adierazteko erabiltzen den bit
kopuruak, d-k, desplazamendu horien distantzia mugatuko du; izan ere, hasiera-
puntu jakin batetik memoriako edozein posizio atzitu ahal izateko,
desplazamenduaren bit kopuruak memoriako helbideena izan beharko luke (oro har,
hala ere, bit kopuru txikiagoa erabiltzen da).
Beraz, n+d bitekoa da eragigaia adierazteko eremua: n bit erregistro bat
identifikatzeko, eta d bit [–2d–1, 2d–1–1] tarteko desplazamendua adierazteko
(adierazpidea birako osagarria izanik):
n = log2 (erregistro kopurua)


Helbideratze erlatiboa asko erabiltzen da, esaterako, pila izeneko datu-
egiturarekin lan egiteko. Egitura hori 5. kapituluan erabiliko da.
Hauek dira helbideratze-modu horren bi adibide, TXORI hizkuntzaz:
lddr1,2[r5]
stdr5,-1[r1]
BIRD konputagailuan, desplazamendua 16 bitekoa da, hots, [–32768, +32767]
tartean egon daiteke. Beraz, 21 bitekoa da helbideratze erlatiboa: 5 bit
oinarri-erregistrorako, eta 16 desplazamendurako.






******

 ******
******

 ******
            ****** 2.3.9 irudia.Helbideratze-modu erlatiboa. ******
Dagoeneko aipatu den moduan, erregistro bidezko zeharkako helbideratzea
erlatiboaren kasu berezi bat baino ez da; desplazamendua zero denekoa, alegia.
Hau da:
lddr1,[r5]≡
ldd
r1,0[r5]
Hori dela eta, BIRD konputagailuak ez ditu bereizten bi helbideratze horiek.
Helbideratze-modu erlatiboa eta indexatua funtzionalki oso antzekoak dira:
datuaren helbidea kalkulatzeko, erregistro baten edukiari konstante bat gehitu
behar zaio. Desberdintasuna interpretazioan eta erabileran datza. Indexatuan,
oinarri-helbidea konstante bat da, eta gehitzen den desplazamendua, indizea,
aldakorra da, erregistro baten edukia baita (eta alda daiteke exekuzioan
zehar). Erlatiboan, aldiz, oinarri-helbidea aldakorra da, erregistro baten
edukia baita, eta desplazamendua konstantea da.
BIRD konputagailuan berdinak badira ere (16 bit), oinarri-helbideak edota
desplazamenduak adierazteko bit kopuruak ez datoz beti bat. Gainera, zenbait
konputagailutan (esaterako, Motorola familian) erregistro desberdinak erabili
behar dira helbideak edo datuak gordetzeko.
2.3.2.3.8 Oinarri-erregistroa gehi indize-erregistroa
Helbideratze-modu honetan, aurreko bietan bezala, datua memorian dago, eta,
eragigaiaren eremuan, bi erregistro adierazten dira: oinarri-helbidea gordetzen
duen erregistroa (oinarri-erregistroa) eta indize-erregistroa (ikus 2.3.10
irudia). Datuaren helbidea lortzeko, bi erregistro horien edukia, oinarri-
helbidea eta indizea, batu behar dira. Beraz,
datua = M[EM[oinarri-erregistroa] + EM[indize-erregistroa]]












      ****** 2.3.10 irudia.“Oinarri-erregistroa gehi indize-erregistroa”
                          helbideratze-modua. ******
Laburbilduz, eragigai bat eskuratzeko, lehenik, haren helbidea kalkulatu behar
da, eta, horretarako, bi erregistro irakurri eta haien edukiak batu behar dira;
gero, memoria atzitu beharko da. Adi: zenbait makinatan, erregistroak banan-
banan irakurri behar dira: kasu horietan, atzipen mota hau motelagoa da,
denbora gehiago beharko baita bi erregistroak irakurtzeko.
Eragigaiari dagokion eremuan bi erregistro adierazi behar direnez, haren luzera
n+n = 2n bitekoa izango da, non n erregistro bat kodetzeko behar den bit
kopurua den:
n = log2 (erregistro kopurua)
Aurrekoak bezala, helbideratze-modu hau egokia da bektoreen osagaiak atzitzeko,
edo goi-mailako hizkuntzako datu egituratuekin lan egiteko. Erabiltzen da,
halaber, bektore baten helbidea errutina bati parametro gisa pasatzeko (ikus 5.
kapitulua).
TXORI mihiztadura-hizkuntzak ez du helbideratze-modu hori.
2.3.2.3.9 Eragigai inplizituak
Agindu batzuetan, eragigaiak inplizituak dira, hau da, ez dira aginduan
agertzen, baina ezagunak dira, eta beti berberak dira agindu bakoitzean.
Adibide gisa, TXORI hizkuntzaren in eta out aginduak ditugu; ez dute
eragigairik adierazten, baina, inplizituki, r1 erregistroarekin lan egiten
dute. Jauzi-aginduek ere eragigai inplizitu bat erabiltzen dute: PC
erregistroren edukia, hain zuzen ere.
Oro har, eragigai inplizituak erabiliz, agindu laburragoak lor daitezke, eta,
bide batez, hardware sinpleagoa.


Atal honekin bukatzeko, 2.3.11 irudian eta 2.3.1 taulan bildu dira aztertu
ditugun helbideratze-modu guztiak.














           berehalakoa                    erregistro bidezko zuzenekoa












            absolutua                     erregistro bidezko zeharkakoa












    memoria bidezko zeharkakoa                      indexatua












            erlatiboa              oinarri-erregistroa gehi indize-erregistroa
         1.     ****** irudia.Helbideratze-moduen laburpen grafikoa. ******
                                    ******

                                     ******
                                    ******

                                     ******
                                    ******

                                     ******
                                    ******

                                     ******
helbideratze-      IRan            datuaren                              adibideak
    modua       adierazten   #bit  kokapena          iruzkinak             TXORI
                   dena                                                 hizkuntzaz
                                             + atzipen azkarra
berehalakoa   datua           p      IRan    * iturburu-eragigaiak      movir1,#4
                                             bakarrik
erregistro    erregistro-         erregistro + atzipen azkarra          movr2,r1
bidezko       zenbakia        n     batean   + bit gutxi IRan           addr2,r3,r4
zuzenekoa                           EM[ri]
absolutua     memoria-        m    memorian  - atzipen motelagoa        ldr1,A
              helbidea               M[A]    - bit gehiago IRan         str2,@100
                                             + bit gutxi IRan
erregistro    erregistro-          memorian  - bi atzipen: erregistroa  lddr1,0[r5]
bidezko       zenbakia        n   M[EM[ri]]  eta memoria                stdr3,[r1]
zeharkakoa                                   * edozein memoria-posizio
                                             atzi daiteke
memoria       memoria-             memorian  - bi atzipen memorian
bidezko       helbidea        m    M[M[A]]   * ez da ohikoa
zeharkakoa
                                             + goi-mailako hizkuntzen
                                             datu-egiturak erabiltzeko
              memoria-             memorian  + array baten osagaiak
indexatua     helbidea +     m+n    M[A+EM   atzitzeko                  ldxr1,A[r4]
              erregistro-           [ri]]    - bi atzipen: erregistroa  stxr2,B[R5]
              zenbakia                       eta memoria
                                             - batuketa bat egin behar
                                             da
                                             + pila atzitzeko
              erregistro-          memorian  - bi atzipen: erregistro   lddr1,2[r5]
erlatiboa     zenbakia +     d+n     M[EM    eta memoria                stdr5,-1
              desplazamendua       [ro]+d]   - batuketa bat egin behar  [r3]
                                             da
                                             * despl = 0 → zeharkakoa
                                             + goi-mailako hizkuntzen
                                   memorian  datu-egiturak erabiltzeko
oinarria +    bi erregistro-  2n     M[EM    - bi atzipen: erregistroak
indizea       zenbaki              [ro]+EM   eta memoria
                                    [ri]]    - batuketa bat egin behar
                                             da
2.3.1taula.Helbideratze-moduen laburpena.p = berehalakoen bit kopurua;n = log2
(erregistro kopurua); m = log2(memoriako posizio kopurua); d = desplazamenduen
bit kopurua; A = memoria-helbide bat. Berehalakoak eta desplazamenduak birako
osagarrian adierazten dira, [–2k–1, 2k–1–1] tartean, k izanik bit kopurua.
2.3.2 Adibidea
Konputagailu baten memoriak honako ezaugarri hauek ditu: helbideratze-unitatea
hitza da; hitzak 2 bytekoak dira, eta datu-busa 16 bitekoa da.
500 helbidetik hasita, memoriako posizioen edukia hau da:
78 27 19 512 540 540 600 -11000 520 516
-7 -8 -9 504 31 28 518 520 999 500
Era berean, erregistro batzuen edukia hau da:
r3 = 513 r4 = 503 r5 = 7 r6 = 111 r7 = 512
Exekutatu behar dira sei agindu hauek:
1.mov(r4)+,#256
2.
movr5, @517
3.
mov-(r5),+(r4)
4.
mov-4(r3),((r3))
5.
mov@510,r7
6.
mov(r5),(r7)-
nonmovagindua datu-mugimendu bat den, bigarren eragigaitik lehenengora, eta
helbideratze-modu hauek erabili diren:#datua,berehalakoa;d(rn),
erlatiboa;@helb, absolutua;rn, erregistro bidezko zuzenekoa;(rn), lehen mailako
erregistro bidezko zeharkakoa;((rn)), bigarren mailako erregistro bidezko
zeharkakoa;(rn)+eta+(rn), erregistro bidezko zeharkako autoinkrementatua; eta
(rn)-eta-(rn), erregistro bidezko zeharkako autodekrementatua.
Adierazi nola aldatzen den memoriaren eta erregistroen edukia agindu horiek
exekutatzen direnean.


Agindu bakoitzaren exekuzioan, aldaketa hauek gertatuko dira:


1.mov(r4)+,#256
Aginduak bi eragiketa hauek biltzen ditu:
1.amov(r4),#256
hau da, 256 berehalako datua r4 erregistroan adierazten den memoria-posizioan
kargatu behar da; 503 helbidean, hain zuzen ere: M[503] := 256
1.br4:=r4+1
eta, bukatzeko, r4 erregistroaren edukia aldatzen da: r4 := 504
2.movr5,@517
Memoria-posizio baten edukia r5 erregistroan kargatzen da:
r5 := M[517] beraz, r5 := 520
3.mov-(r5),+(r4)
Kasu honetan, erregistroen balioak eguneratu behar dira datu-mugimendua egin
aurretik:
3.ar4:=r4+1hau da, r4 := 505
3.br5:=r5–1hau da, r5 := 519
Eta, orain bai, r4-k adierazten duen memoria-posizioaren edukia r5-ek
adierazten duen posizioan kargatu behar da
3.c M[519] := M[505] Beraz, M[519] := 540
4.mov-4(r3),((r3))
Hasteko, iturburu-eragigaia eskuratzeko, erregistro bat irakurri eta gero,
memoria bi aldiz irakurri behar da, helbideratze-modua zeharkakoa baita,
bigarren mailakoa.
r3 = 513
M[513] = 504
M[504] = 540
Eta, gero, memorian idatzi behar da datu hori, honako helbide honetan:
r3 – 4 = 513 – 4 = 509. Beraz,
M[509] := 540


5.mov@510,r7
r7 erregistroaren edukia memoriako 510 helbidean kargatu behar da:
M[510] := 512


6.mov(r5),(r7)-
Bi eragiketa bete behar dira: r5-ak adierazten duen memoria-posizioan r7-
k adierazten duenaren edukia kopiatu, eta, gero, r7 erregistroaren edukia
eguneratu.
6.a M[519] := M[512] hau da, M[519] := –9
6.b r7 := r7 – 1 hau da, r7 := 511


6 aginduak exekutatuta, honela geratuko da memoria, 500 helbidetik aurrera:
78 27 19256
540 540 600 -11000 520
540
512
-8 -9 504 31 28 518
520
999
-9
eta honela erregistroak:
r3 = 513 r4 =
505
r5 =
519
r6 = 111 r7 =
511






1 Orain arte ri erabili badugu ere, atal honetan EM[ri] erabiliko dugu ri
erregistroaren edukia adierazteko, erregistro-multzoan atzipen bat egin behar
dela azpimarratzeko.
2Berez, BIRD konputagailuan ez dago gauzatuta helbideratze-modu hau, eta
helbideratze erlatiboaren kasu partikular gisa hartzen da, desplazamendua 0koa
deneko kasua, hain zuzen ere:lddr1,[r5]≡lddr1,0[r5]
                                       1
