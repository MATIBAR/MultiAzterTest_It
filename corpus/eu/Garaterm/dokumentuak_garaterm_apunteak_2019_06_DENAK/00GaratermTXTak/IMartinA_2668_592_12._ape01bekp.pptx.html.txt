<?xml version="1.0" encoding="UTF-8"?>
ARKITEKTURA
PARALELOAK
Abiadura Handiko Konputazioa
Olatz Arbelaitz - Agustin Arruabarrena
olatz.arbelaitz@ehu.es - agustin.arruabarrena@ehu.es
www.sc.ehu.es/arpar
Konputagailuen Arkitektura eta Teknologia saila
Informatika Fakultatea – Euskal Herriko Unibertsitatea
 
0.         Sarrera.
1.         Bektore-konputagailuak.
2.        Konputagailu paraleloak (oinarrizko kontzeptuak).
3.         Datuen koherentzia (SMP).
4.         Prozesuen sinkronizazioa (SMP).
5.         Memoriaren kontsistentzia.
6.         Komunikazio-sarea. Mezu-ematea.
7.         Datuen koherentzia (DSM).
8.         Begizten paralelizazioa eta atazen banaketa.
9.         Abiadura handiko konputagailuak. Aplikazio paraleloak sortzeko
software-tresnak.
 
0.        Sarrera
 
 
1.        Bektore-konputagailuak
 
1.         Bektore-konputagailuak
 
         Begizta bat bektorialki exekutatu ahal izateko, aginduen jatorrizko
ordena aldatu behar da.
 
         Begiztekin lan egin behar denez, dependentziak edozein iteraziotako
aginduen artean eman daitezke.
         i1 eta i2 iterazioko aginduen arteko dependentzia bat badago, i2 – i1
distantziakoa dela esaten da.
 
        Dimentsio bakarreko begiztak
 
        Bi dimentsioko begiztak
 
 
 
        Beste adibide bat
 
1. adibidea
 
2. adibidea
 
3. adibidea
 
4. adibidea
 
5. adibidea
 
6. adibidea: bi dimentsioko bektoreak (errenk.)
 
6. adibidea: bi dimentsioko bektoreak (zutab.)
 
         Begizta bat bektorizatu ahal izateko baldintza:
                Dependentziek ez dute ziklorik osatzen         dependentzia-
grafoan.
 
        Nork analizatu behar ditu dependentziak? Programatzaileak edo
konpiladoreak?
 
        Adi: memoria-atzipenen pausoa bi tokitan adieraz daiteke: begiztaren
mugen definizioan edo aginduetan bertan.
        ZKH proba erabili baino lehen, begiztak “normalizatu” behar dira
(begiztaren pausoa, 1).
 
        Labur
        Begiztak bektore moduan exekuta daitezkeen jakiteko, aginduen arteko
dependentziak analizatu behar dira.
        Bektore-konpiladoreak analizatuko ditu dependentziak,         atzipenen
pausoa konstantea den kasuetan.
        Dependentzia dagoen jakiteko, ZKH proba erabil daiteke.
        Aginduak bektoriza daitezke, baldin eta dependentzia-ziklo batean
sartuta ez badaude.
 
         Dependentzien analisi automatikoa ez da sinplea. Konpiladorea
dependentzia dagoen ala ez erabakitzeko gauza ez bada, badaezpada ere,
dependentzia dagoela erabakiko du.
 
1         Aurreranzko ordezkapen globala
        Dependentzien analisia errazteko, egindako definizio guztiak ordezkatu
egin behar dira.
 
2         Indukzio-aldagaiak
        Begiztaren barruan progresio aritmetikoan aldatzen diren aldagaiak
ordezkatu behar dira.
 
3         Antidependentziak
 
3         Antidependentziak
 
4        Irteera-dependentziak
 
4        Irteera-dependentziak
 
 
5        Begizta-trukea
 
5        Begizta-trukea
 
5        Begizta-trukea
 
5        Begizta-trukea
 
5        Begizta-trukea
 
6        Hedapen eskalarra
 
7        Begizten fusioa
 
7        Begizten fusioa
 
8        Begizten kolapsoa
 
         Ohikoa da, kalkulua egiten denean, bektore baten osagai bakar batzuk
baino ez prozesatu behar izatea:
 
         Lehenik, maskara sortzen da, eskuarki konparazio-eragiketa baten
bidez; gero, bektore-eragiketa egiten da, maskara-erregistroa haintzat hartuz.
 
         Pauso konstanteko (VS) bektoreak bakarrik prozesatu ditugu.
                LV V1,A(R1)        VL osagai, VS distantziara,                
                A+R1 helbidetik aurrera
 
         Pauso aldakorreko bektoreak prozesatzeko, indize-bektoreak erabili
ohi dira (eta helbideratze-modu indizeduna):
 
         Oro har, atzipen indizedunen exekuzio-denbora atzipen arrunten (pauso
konstanteen) bidez egindakoena baino handiagoa ohi da (ez da zikloko osagai bat
lortzen).
 
         Helbideratze indizeduna “maskara gisa”
 
         Bektore-prozesadoreak bektoreak prozesatzeko arkitektura berezi eta
oso eraginkorrak dira. Ezaugarri hauek dituzte:
 
        Duela gutxi arte, superkonputagailuak bektore-konputagailuak ziren.
Gaur, ordea, MIMD motako konputagailu paraleloak dira azkarrenak. Salbuespenak
badaude; adib., Earth Simulator konp.
 
        Duela gutxi arte, superkonputagailuak bektore-konputagailuak ziren.
Gaur, ordea, MIMD motako konputagailu paraleloak dira azkarrenak. Salbuespenak
badaude; adib., Earth Simulator konp.
        Bektore-prozesadoreak MIMD sistema paraleloen nodo bereziak izan
daitezke, bektoreak prozesatzen espezializatuta.
        Bestalde, oraingo prozesadore guztiek badituzte “bektore-eragiketak”
agindu-multzoan.
        Adibidez (PA-RISC): FMAC, multiply-accumulate.
BK  |  Laburpena
 
