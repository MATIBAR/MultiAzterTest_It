<?xml version="1.0" encoding="UTF-8"?>
<number>
 
 Konputagailu baten memoria hierarkikoki antolatzen da:
 
         Memoria-maila bakoitza aurrekoaren azpimultzo bat da.
 
         Beraz, datuen kopiekin lan egiten da. Nola lortu kopia horiek beti
berdinak (koherenteak) izatea? Idazketa-politika:
 
         SMP sistemetako memoria partekatua da eta aldagai partekatuak
erabiltzen dira prozesuak komunikatzeko. Beraz, datu-blokeen kopia kopurua
handiagoa izan daiteke (P+1), eta kopiak ez daude kotrol-unitate bakar baten
mende.
 
         Datu-blokeen kopiak ageri dira:
 
        Memoria-sistemak koherentea izan behar du: prozesu guztiek informazio
bera eta eguneratua erabili behar dute.
 
         Bi estrategia daude memoria partekatuko sistemak koherenteak
mantentzeko:
 
        SMP sistema baten prozesadoreak eta memoria komunikatzeko, busa(k)
erabiltzen d(ir)a. Busa sare zentralizatua da; beraz, datu-transferentzia
guztiak “publikoak” dira.
        Nola jakin daiteke gure cachean dagoen aldagai bat beste prozesadore
batean aldatu dela, edo guk duguna beste batean erabili behar dutela?
                >>         Busa zelatatuz besteok zer egiten duten            
            jakiteko, eta kontrol-seinale bereziak                        
zabalduz, prozesadore guztietara, busaren                 bidez.
 
         Zer egin behar da bloke baten kopia batekin, baldin eta beste
prozesadore batean aldatzen bada?
 
         Zer egin behar da bloke baten kopia batekin baldin eta beste
prozesadore batean aldatzen bada?
 
         Datu-blokeen kopiak kudeatzeko, kontrol-informazioa gehitzen da
cacheko direktorioan.
        Kontrol-bit horien bidez, blokeen egoerak definitzen dira. 5 egoera
hauek erabili ohi dira:
 
         Bost egoera horiek definitzeko, hiru bit behar dira cacheko
direktorioan:
 
         Datu-blokeen egoerak kudeatzeko eta kontrol-seinaleak sortzeko, bi
informazio-iturri zelatatu behar ditu zelatariak:
 
MSI protokoloa
    PR  PW  BR  INV
I, -         
S            
M            
 
        Adi: koherentzia-protokoloak ahalik eta trafiko gutxien sortu behar
du.
                M:        CM1 → MN → CM2
                        CM1 → MN, CM2
 
MESI protokoloa (Illinois): E egoera / sh kontrol-lerroa
    PR  PW  BR  INV
I, -         
E            
S            
M            
 
MOSI protokoloa (Berkeley): O egoera
    PR  PW  BR  INV
I, -         
S            
M            
O            
 
MSE(I) protokoloa (Firefly): sh kontrol-lerroa
 PR  PW  BR  BC
-         
E         
S         
M         
 
MOES(I) protokoloa (Dragon): sh kontrol-lerroa
 PR  PW  BR  BC
-         
E         
S         
M         
O         
 
        Laburpena
 
        Laburpena
 
        Koherentzia-kontroladorea
        Koherentzia mantentzeko hardwareak prozesadoreko zein “buseko” ekintzak
kontrolatu behar ditu.
        Cachearekin lan egiteko eskaerak aldi berean etor daitezke, bertako
prozesadoretik zein “busetik”.
 
Kontrolagailua eta cachearen direktorioa bikoiztu, bat prozesadorerako eta
bestea “buseko” eragiketetarako.
 
Zenbat denbora zain zelatarien erantzuna lortu arte?
 
        Arazo nagusia atomikotasun eza da: datu-bloke beraren gainean, hainbat
prozesadoretako aldi bereko ekintzak nahas daitezke.
 
        Irtenbidea:
        Buseko eragiketen atomikotasunaz gain (BRQ, BGR), egoera iragankorrak
gehitzea koherentzia-protokoloari.
 
MESI protokoloa
 
        Algoritmo banatuetan ageri ohi diren beste arazo batzuk:
 
        SMP sistemetan, busa erabiltzen da prozesadoreak eta memoria
komunikatzeko.
        Memoria zentralizatua izateak arazo asko dakar, busa ase egin
daitekeelako → prozesadore kopurua mugatua da.
 
        Aurrerapen gisa, ikus dezagun kasu bat, non komunikazio-sarea busen
hierarkia bat den eta zelatariak edo erabiltzen diren datuen koherentzia
ziurtatzeko.
 
        Koherentzia-kontroladoreak “direktorio” bereziak dira, non blokeei
buruzko informazioa gordetzen den. Bi ataletan banatzen dira:
 
 
