<?xml version="1.0" encoding="UTF-8"?>
<number>
 
         SMP konputagailuetako memoria partekatua da, eta prozesuak aldagai
partekatuen bidez komunikatzen dira.
 
         Eta zer gertatuko da kasu honetan (KONT = 0)?
 
         Memoriako atzipen atomikoak (interferentziarik gabekoak) behar ditugu
prozesuak sinkronizatu ahal izateko.
 
         Prozesuak zain geratuko dira zerbait gertatu arte; hau da, denbora
galdu egingo da.
 
        Ez da prozesadore bat baino gehiago onartzen, aldi berean, kode zati
jakin bat (sekzio kritikoa) exekutatzen.
 
         RMW motako agindu atomikoak behar ditugu.
 
 
 
Datu-trafikoa (blokeka)
        prozesu bat SKra sartzeko        → P + (P-1) + (P-2)
        SKtik ateratzeko                 → 1
                                guztira        → 3P - 2                P proz.
→ 3P2/2
 
 
Datu-trafikoa (blokeka)
        prozesu bat SKra sartzeko        → P + (P-1)
        SKtik ateratzeko                 → 0
                                guztira        → 2P - 1                P proz.
→ P2
 
 
Datu-trafikoa (blokeka)
        Txartelak                → 1 + P                 → P(P+3) / 2
        Sarraila-bektoreak        → 1 + 1 + 1         → 3P
 
1        Puntutik punturako sinkronizazioa gertaeren bidez
        Ohiko sinkronizazioa ekoizlearen eta kontsumitzaile-aren artean,
adierazle edo flag baten bidez.
 
2        Hesien bidezko sinkronizazioa
 
Hesi sinple bat         (H, hesi_egitura motako struct bat)
 
Hesi berrerabilgarria. “Hesia irekita” adieratzen duen balioa ez da beti bera:
bi balioren artean txandakatzen da.
 
         Eraginkortasuna: datu-trafikoa
 
P. Sink. |  Laburpena
 
