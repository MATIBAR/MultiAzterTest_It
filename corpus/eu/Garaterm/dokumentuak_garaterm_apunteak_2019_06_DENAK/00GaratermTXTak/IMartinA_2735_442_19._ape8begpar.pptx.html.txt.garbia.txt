<?xml version="1.0" encoding="UTF-8"?>         Paraleloan exekuta daitezkeen atazak identifikatu behar dira (dependentzien analisia).         Prozesuak sinkronizatu behar dira.         Prozesuak prozesadoreetara banatu behar dira. <number>             Paralelismo motak (1) 3             Paralelismo motak (1) 4             Paralelismo motak (2) 4             Atazen arteko dependentziak?     6             Bi eredu: 6             Begizten paralelizazioa 6             Eskuarki, eta salbuespenak salbuespen, kodearen paralelizazioa (dependentzien analisia, lan-banaketa…) programatzaileak berak egin behar du.         Hori dela eta, begiztak eraginkorki paraleliza-tzeko ohiko aukerak analizatu behar ditugu. 6             Kodearen frakzio handi bat exekutatu behar da paraleloan; ez ahaztu Amdahl-en legea. 6     Adibidez: do i = 0, N-1         A(i) = A(i) + 1 enddo 11     12   Begiztak + Dependentzia-grafoak + Dependentziaren distantzia 13     14   + Iterazio-espazioa 15             Dependentzia-proba automatikoa: begiztaren indizearen funtzio linealak soilik. 16             Begizten iterazioak prozesadoreen artean banatu behar dira, baina, jakina, datu-dependentziak errespetatu behar dira.         Arazoa distantzia > 0 duten dependentziak dira, eta, batik bat, dependentzia-grafoan zikloak osatzen dituztenak. 16             Begiztak beti exekuta daitezke P prozesadore erabiliz, dependentziak errespetatzeko behar den sinkronizazioa gehituta… 16     Helburuak: 16     16   > Adibideak 21     > Adibideak   > Adibideak 23     > Adibideak 24     > Adibideak 25              Aginduen arteko dependentziak 0 distantziakoak baldin badira, hau da, iterazioak independenteak badira, iterazioak nahi den moduan bana daitezke prozesadoreetara, sinkronizazioa erabili gabe: doall.          Iterazioen arteko dependentziak baldin badaude, baina denak “aurrerantz” badoaz, sinkronizazio-hesiak erabil daitezke: forall (edo doall + barrier).          Dependentzia-zikloak baldin badaude, puntutik pun-turako sinkronizazioa erabili behar da: doacross. 25              Iterazioak independenteak dira, eta banaketa nahi den moduan egin daiteke: doall. 27              Iterazioen arteko dependentziak daude, baina denak aurrerantz doaz: forall.          Dependentzia bakoitza hesi baten bidez sinkroniza daiteke: prozesuek zain geratuko dira agindu jakin bat denok exekutatu arte.          Behar dena baino sinkronizazio gehiago gehitzen da, baina oso metodo sinplea da. 27       29     30            Dependentziek zikloak osatzen dituzte: doacross, ekoizle/ kontsumitzaile motako sinkronizazioa. 30     32   33            ADI: paralelizatzea ez da beti egokia 34              Bi dimentsioko gertaera-bektoreak 35              Antidependentziak / Irteera-dependentziak         Prozesuen artean baldin badira, sinkronizatu egin behar dira. 36               If motako aginduak 37             Nola sinkronizatu aginduak? 37             Sinkronizazio-kontagailu bat dependentzia bakoitzeko 37             Nola sinkronizatu dependentzia bat kontagailu baten bidez: 37     41   42   43   0.        Konstanteen definizioak eta indukzio-aldagaiak desegitea. 1.         Berezkoak ez diren dependentzia guztiak ezabatzea. Esaterako, 44     2.        Begiztaren fisioa.         Seriean exekutatu behar den zati bat baldin badago, zatitu begizta bi partetan (edo gehiago), ahal dena paraleloan exekutatzeko.   44     3.         Dependentziak ordenatzea (aurrerantz).   46     4.         Dependentziak lerrokatzea: peeling. 47     48   5.        Hari independenteak sortzea   49     6.        Sinkronizazioa minimizatzea   50     7.        Bi dimentsioko begiztak: begizta-trukea. 51     Adibidez: 52     Adibidez: 53     8.        Bi dimentsioko begiztak: noranzko-aldaketa. 54     54   54           Nola banatzen dira begizten iterazioak (atazak, oro har) prozesadoreen artean?         Iterazio adinako prozesadore badago, agian bat prozesadoreko.         Baina iterazio baino prozesadore gutxiago badago?         Banaketa (scheduling) izan daiteke:                 estatikoa: programa konpilatzen denean.                 dinamikoa: programa exekutatzen ari denean. 54             Helburua: banatzen diren atazen exekuzio-denborak berdintsuak izatea, hutsarteak saihesteko (load balancing). 54             Programa konpilatzen denean erabakitzen da zer exekutatuko duen prozesu bakoitzak. Beraz, erabakita dago exekuzioa hasi baino lehen.         Prozesuek aldagai pribatu bana erabiltzen dute identifikadore gisa: pid  (0..P-1).         Oinarrizko bi aukerak: ondoz ondokoa eta tartekatua. 54     54    Lan-kargaren oreka 61             Lan-karga orekatuta mantentzeko, “ataza ilara” bat antolatzen da. Prozesu batek ataza baten exekuzioa bukatzen duenean (begiztaren zati bat), beste bat hartzen du ilaratik.         Oinarrizko bi aukera: banatzen diren begizta zatiak tamaina berdinekoak dira beti, edo, exekuzioa aurrera joan ahala, gero eta txikiagoak dira. 61     61   61   65             Oro har, atazen exekuzio-denbora berdintsua izatea bilatzen du banaketa dinamikoak, baina:         -         banaketaren kostua (overhead) kontuan         hartu behar         da, atazen exekuzioarekin         alderatuta.         -        datu-atzipenen lokaltasuna eta partekatze         faltsuaren arazoak ere kontuan hartu behar         dira. 65             Adibide bat (1.000 iterazio independente, 4 prozesadore): 65             Prozedura- edo funtzio-mailako paralelismoa: 68     Beg. Par.  |  Atal Paraleloak         Prozedura- edo funtzio-mailako paralelismoa:                 - Fork / Join eredua                 - Parallel sections  
