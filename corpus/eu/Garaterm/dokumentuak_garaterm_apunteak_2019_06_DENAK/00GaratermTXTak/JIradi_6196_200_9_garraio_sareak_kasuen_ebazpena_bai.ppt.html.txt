



1
9. GAIA: GARRAIO SAREAK: 
KASUEN EBAZPENAK

2
Sareen aplikazioa
•Gas naturala garraiatzeko sarearen diseinua. Modeloaren helburua 
gaseoduktoaren eraikitze-kostua murriztea da. 
•Errepide sare batetako bi puntuen arteko bide laburrena kalkulatzea.
•Eraikitze proiektu baten jardueren programazio optimoa kalkulatzea.
•Produktuen garraio optimoa kalkulatzea.
Arazo horiei aurre egiteko hainbat algoritmo daude:
  -  Garraio eta esleiketa algoritmoa.
  -  Bide laburrenaren algoritmoa.
  -  sareak kontrolatu eta sekuentziatzeko algoritmoak.
  -  Irismen maximorako zuhaitz-algoritmoa.

3
Bide laburrena kalkulatzeko  algoritmoak
Demagun (1,2,…….n) erpin dituen  sare bat eta (i,j) arku bakoitzerako d
ij≥0 zenbakia 
dugula (i-tik j-ra arteko distantzia, kostua,….. adierazten duen. 
(i,j) arkua existitzen ez 
bada bi erpinak ez daude konektaturik, beraz honakoa egin genezake, d
ij=+∞  (+M). (i,j) 
eta (j,i) arkuak distantzia ezberdinak izan ditzakete.
Hipotesi horiekin, “1” hasierako erpina bada eta “n” bukaerako erpina, bi erpin horien 
arteko distantzia kalkulatuko dugu.
 

4
Programazio linealaren bitartez ebaztea
X
ij balioak kalkulatu ,non:
Non, 
x
ij=1 (i,j) arkua hartzen bada, o bestelakoetan

5
Simplex metodoaren bitartez ebazpide optimoa kalkulatzen da:

6
Esleiketa metodoa
1. “n” ordenako esleitze-matrize bat sortu (n=erpin kopurua
2. Erpin batetik erpin berekoraino distantzia 0 da.
3. (i,j) arkua existitzen bada d
ij distantzia idatzi dagokion lekuan; (i,j) arkurik ez 
badago d
ij=M
4. D
n1=-M
5. Esleiketa-matrizea ebatzi (Hungariar metodoarekin)
Lorturiko ebazpidea izartxo batekin adierazi.

7
METODO HUNGARIARRA
Minimizatze ariketak ebazteko erabiltzen da. 
1.-    mxm  kostu-
matrizean  lerro  bakoitzeko  elementu  txikiena  aurkitu;  matrize  berri 
bat  egingo  dugu  kostu  bakoitzari  lerroko  kostu  minimoa  kenduz.  Matrize  berri 
horretarako  zutabe  bakoitzeko  kostu  minimoa  aurkitu.  Kostu  bakoitzari  zutabeko 
kostu minimoa kenduz beste matrize bat izango dugu (kostu murriztuen matrizea).
2.- Lerro 
(horizontal edo bertikal)  kopuru minimoarekin kostu murriztuen matrizeko 
zeroak  azpimarratu;  “m”  lerro  behar  badira  0  guztiak  azpimarratzeko,  ebazpide 
optimoa  izango  dugu.  “m”  lerro  baino  gutxiago  behar  baditugu  3.  pausora  joango 
gara.  
3.-
  Aurkitu 2. pausuan azpimarraturik geratu den eta 0 ez den elementurik txikiena 
(k); ondoren k kendu azpimarratu gabeko elementu bakoitzari eta k gehitu bi lerroz 
azpimarraturiko elementuei.
4.- 2. puntura joan.

8
Enpresa  batek  4  proiektu  esleitu  nahi  ditu  4  lan-taldeen  artean  
(talde  bakoitzak 
proiektu  bakarra  burutu  dezake).  Talde  bakoitzak  proiektua  egiteko  behar  duen 
denbora honako taulan agertzen da.
1 proiektua 2 proiektua 3 Proiektua 4 proiketua
1 Taldea
14
5
8
7
2 Taldea
2
12
6
5
3 Taldea
7
8
3
9
4 taldea
2
4
6
10
ARIKETA: 

9
P1
P2
P3
P4
G1
14
5
8
7
G2
2
12
6
5
G3
7
8
3
9
G4
2
4
6
10
P1
P2
P3
P4
G1
9
0
3
0
G2
0
10
4
1
G3
4
5
0
4
G4
0
2
4
6
P1
P2
P3
P4
G1
9
0
3
2
G2
0
10
4
3
G3
4
5
0
6
G4
0
2
4
8
P1
P2
P3
P4
G1
10
0
3
0
G2
0
9
3
0
G3
5
5
0
4
G4
0
1
3
5
Lerro bakoitzeko minimoa eta kendur
Zutabe bakoitzeko minimoa eta kendu
[1]
[2] kostu murriztuen matrizea
[3]
Optimoa: 0 bakarra duten 
lerro/zutabeak aurkitu

10
Optimoa: 0 bakarra duten 
lerro/zutabeak bilatu
P1
P2
P3
P4
G1
10
0
3
0
G2
0
9
5
0
G3
5
5
0
4
G4
0
1
3
5
P1
P2
P3
P4
G1
10
0
3
0
G2
0
9
5
0
G3
5
5
0
4
G4
0
1
3
5
P1
P2
P3
P4
G1
10
0
3
0
G2
0
9
5
0
G3
5
5
0
4
G4
0
1
3
5
P1
P2
P3
P4
G1
10
0
3
0
G2
0
9
5
0
G3
5
5
0
4
G4
0
1
3
5
[4]
[5]
[6]
[7]
ebazpidea
G 1: p 2
G 2: p 4
G 3: p 3
G 4: p 1 

11
ARIKETA: 

12
1
2
3
4
5
1
0
5
8
M
M
2
M
0
4
7
13
3
M
M
0
2
11
4
M
M
M
0
7
5
-M
M
M
M
0
1
2
3
4
5
1
0
5
8
M
M
2
M
0
4
7
13
3
M
M
0
2
11
4
M
M
M
0
7
5
0
2M 2M 2M M
 [2] kostu murriztuen kostua
optimo: 0 bakarra duten 
zutabe/lerroak bilatu
1
2
3
4
5
1
0
5
8
M
M
2
M
0
4
7
6
3
M
M
0
2
4
4
M
M
M
0
0
5
0
2M 2M 2M M
[1]
1
2
3
4
5
1
0
0
3
M
M
2
M
0
4
7
6
3
M
M
0
2
4
4
M
M
M
0
0
5
0
2M 2M 2M
M
1
2
3
4
5
1
0
0
0
M
M
2
M
0
1
4
3
3
M
M
0
2
4
4
M
M
M
0
0
5
0
2M 2M 2M M
1
2
3
4
5
1
0
0
0
M
M
2
M
0
1
2
1
3
M
M
0
0
2
4
M
M
M
0
0
5
0
2M 2M 2M M
[3]
[4]
[5]

13
1
2
3
4
5
1
0
0
0
M
M
2
M
0
1
2
1
3
M
M
0
0
2
4
M
M
M
0
0
5
0
2M 2M 2M
M
1
2
3
4
5
1
0
0
0
M
M
2
M
0
1
2
1
3
M
M
0
0
2
4
M
M
M
0
0
5
0
2M 2M 2M M
optimo: 0 bakarra duen 
lerro/zutabe
[6]
[7]

14

15
Etiketatze-algoritmoa)
Sareko  erpinak  1etik  “n”ra  zenbatzen  dira  
(goranzko  ordenean).  Algoritmoak 
sareko erpin bakoitzari etiketak 
(zenbakiak) esleitzen ditu). a cada vértice de la red:
Hasiera puntuan,, E
1=0; azken erpinaren etiketazioak sarearen bide alaburrena 
ematen du. Bide laburrena aurreko formula osatzen duten oarkuek osatzen dute.

16
Etiketazio algoritmoa:
0. urratsa- .   E
1=0.
1. urratsa -    Erpin bakoitzeko, goranzko ordenean honakoa kalkulatu:
 E
j = min {Ei + dij,     i=1,2,…,j-i}
2. urratsa:
  Bide laburrena, azken erpìnetik hasi eta eiketazio formula betetzen duten 
erpinek osatzen dute.

17

18
DIJKSTRA ALGORITMOA
Sare zuzendu eta ez-
zuzenduetan erabil daiteke. Erpin bikote arteko dij distantziak 
negatiboak direla suposatuz, Dijkstra algoritmoak, erpin-
bikote bakoitzeko, behin 
behineko -etiketak hartzen ditu kontutan. Denbora-etiketek hasiera-erpinetik 
dagokion erpin bakoitzerainoko distantzia minimoen goi-kotak adierazten dute 
eta iterazio bakoitzean iraunkor bilakatzen ditu algoritmoak.
Etiketa iraunkorrak hasiera-erpinetik erpin horretarainoko distantzia minimoa 
adierazten du. Hasieran, algoritmoak  hasierako erpinari etiketa iraunkorra zero 
esleitzen dio eta beste erpinei dagokien distantzia. Hasierako erpinarekin batzen 
ez duen arkurik ez badago distantzia infinitu izango da. Algoritmoak, gehienez 
(n-1) iterazio behar ditu eta bukaerako erpinari etiketa iraunkorra esleitzean 
amaitzen da.

19
Algoritmoa:
0.- Hasierako erpinari 0 behin betiko etiketa esleitu.
1.- beste (n-
1) erpinen behin behineko etiketei  dij  distantzia berria esleitu 
(distantziarik 
ez badago infinitu esleitu)
2.- Behin betiko egin denbora-
etiketa minimoa. Bat baino gehiago badaude edozein 
hartu.
3.-
 Demagun “j”  behin betiko etiketa bezala esleituriko erpina dela; erpin bakoitzaren 
behin  behineko etiketa berria (aurreko iterazioetan behin-
betiko izendatu ez zaiona) 
aurreko  behin behineko etiketaren eta “j” erpinaren behin betiko  eta “j”” erpinetik 
aztertzen dugun erpinaren arteko distantziaren baturaren minimoa da. 
4.- Behin betiko egiten dira denbora-
etiketa minimoak. Bat baino gehiago berdinak 
badira, edozein aukeratu. Behin betiko etiketa izatera pasa dena “n” erpinarena bada 
algoritmoa amaitu da. Bestela 3. pausuari ekin.

20
Esleitze metodoa
Bide laburrera kalkulatzeko prozesuaren antzekoa da. Kasu honetan erpinen 
arteko distantzia (-1)-egatik biderkatzen da.
Sare bateko bide luzeena kalkulatzeko  algoritmoak

21
Esleitze-taula

22
1
2
3
4
5
1
0
5-
-8
M
M
2
M
0
-4
-7
-13
3
M
M
0
-2
-11
4
M
M
M
0
-7
5
-M
M
M
M
0
1
2
3
4
5
1
8
3
0
M
M
2
M
13
9
6
0
3
M
M
11
9
0
4
M
M
M
7
0
5
0
M
M
M
M
 [2] kostu murriztuen matrizea
1
2
3
4
5
1
8
0
0
M
M
2
M
10
9
0
0
3
M
M
11
3
0
4
M
M
M
1
0
5
0
M
M
M
M
[1]
1
2
3
4
5
1
8
0
0
M
M
2
M
1
0
0
0
3
M
M
2
3
0
4
M
M
M
1
0
5
0
M
M
M
M
1
2
3
4
5
1
8
0
0
M
M
2
M
1
0
0
1
3
M
M
1
2
0
4
M
M
M
0
0
5
0
M
M
M
M
1
2
3
4
5
1
8
0
0
M
M
2
M
1
0
0
1
3
M
M
1
2
0
4
M
M
M
0
0
5
0
M
M
M
M
[3]
[4]
[5]

23
Etiketazio algoritmoa
Prozesua bide laburrarena kalkulatzekoaren antzekoa da:

24
SAREEN FLUXU MAXIMOA
Bi puntuen arteko garraioa maximizatzeko algoritmoa da. Hasierako puntuari “iturri” 
deritzo  eta  azken  puntuari  “helmuga”.  Bi  puntu  hoiren  artean,  hainbat  puntu  ditugu 
konektaturik, baina puntu horietan ezin da merkatzia metatu. Aplikazioak:
- garraio-bideak (errepideak, trenbideak, telekomunikazioak,…)
- gas /petroleoa – sarea.
- garraio arazoak.

25
PROGRAMAZIO LINEALAREN BITARTEZ
Fluxu maximoko ariketa programazio linealaren bitartez ebazteko oinarrizko datuak 
honakoak dira:
Xij  :  (i,j)  arkuen  arteko  fluxua  da;  i-tik  j-
ra  garraia  daitekeen  unitate  kopurua 
adierazten du.
Kij: (i,j) arkuaren ahalmena: i-tik j-tara garraia daitekeen fluxu maximoa.
F = hasieratik (1) bukaerara (n) garraia daitekeen fluxu maximoa.
Sareak, “n” erpin baditu, programazio linealaren bitartezko eredua honakoa da:

26

27
Simplex metodoaren bitartez lorturiko emaitza: 
Fluxu maximoa = 32

28
Definizioak
Partizioa:
Mozketa- ahalmena :
Fluxu eta mozketaren arteko erlazioari buruzko teorema:
SAREEN FLUXUA
Mozketa ahalmen minimoa
F  Mozketa 

29
Non,
Non,

30
Goranzko fluxuko Bidearen araua:
 - demagun “i” erpin bat. “j” erpina bidearen barne egongo da baldin eta (i,j) 
existitzen bada non xij     < kij  (fluxua ahalmena baino txikiagoa(, edo 
(j,i), non xij 
>0 (fluxu positiboa)
-- (i,j) arkuaren norantza aurrealdera da (hasieratik helmugara eta 
(j,i) arkua 
atzealdera.

31
En otro caso
0 urratsa: egin xij =0 eta F=0
1.urratsa:  arku bakoitza (xij, kij)-
rekin etiketatu. Goanzko fluxuko bidea eraiki. Biderik ez 
dago, algoritmoa amaitu da. Bestela goranzko fluxua kalkulatu:
D aurrerantz doan arku-multzoa da eta A atzerantz doazenak.
2. urratsa:
  ∆ balioa gehitu, aurrerantz doazen arkuko fluxuei eta kendu azterantz 
doazenei (goranzko fluxuko bidea osatzen dutenei). Beste arku guztiak berdin 
jarraitzen dute.
3. urratsa:  Egin
 

32
Kostu minimoa eta fluxu maximoa
Saturaturik  dauden arku kopurua txikia bada, ebazpen alternatiboak egon daitezke. 
Hori askotan ematen da. 
Arkuei  kostuak  esleitzen  badizkiegu,  zein  izango  da  fluxu  maximo  jakin  baterako 
kostua minimizatuko duen ebazpena?
Lehendabizi fluxu maximoa kalkulatuko dugu, eta ondoren fluxu maximo horretarako 
kostua minimizatuko duen programazio lineala planteatuko dugu.
Cij  :  
(i,j)  arkuaren  fluxuaren  banakako  kostua  bada,  programazio  lineala  honakoa 
izango da:

33
,1. erpinean

34
6. IRISMEN MAXIMOKO ZUHAITZA
Helburua: Ez zuzenduriko sare baten erpinak konektatzea ahail eta distantzia 
minimoarekin.
Aplikazioak:  telefono kableen, hodien, autobus-lineen,….. sareak diseinatzea.
“n” erpinetako sare baten irismen maximoko zuhaitza:
  erpin guztiak konektatzen dituen 
(n-1) erpin-multzoa eta zirkuitu itxirik gabekoa.
Emaitza sareko erpin guztiak konektatzen dituen zuhaitz moduko sarea da.

35
Kruskal algoritmoa:
1.Sareko edozein erpin aukeratu eta erpin gertuenarekin konektatu. Erpin horiek 
konektatzen dituen arkua  hedapen-zuhaitzaren parte da.
2.Konektaturik dauden erpinetatik konektaturik ez dagoen erpin gertuena  
aukeratu. Erpin horrekin konektatzen duen arkua hedapen-zuhaitzaren parte da.
3.3. pausua errepikatu erpin guztiak konektatu arte.
4.Zuhaitzaren guztizko balio arkuan distantziaren batura da.

 
Parkeko Sarrera Ur jauzia
kobazuloa
Behatokia
belazea
Parkeko sarrera
....
7.1
19.5
19.1
25.7
Ur jauzia
7.1
....
8.3
16.2
13.2
Kobazuloa
19.5
8.3
....
18.1
5.2
Behatokia
19.1
16.2
18.1
....
17.2
belazea
25.7
13.2
5.2
17.2
....
ARIKETA
Natur parke  batetan turismoari bideraturiko eremuak ezarri nahi dira. 
Parkean  guneak  definitu  dira  eremuetara  iristeko.  Guneak  eta  horien 
arteko distantziak (kilometrotan) beheko taulan adierazten dira.  
 
Ingurugiroa ahalik eta gutxien kaltetze aldera, kotxeetan ibili beharreko 
kilometroak  minimizatu  nahi  dira.  Nola  eraiki  behar  dira  bideak 
helburua lortzeko? 

GARRAIOAREN ARIKETA

AURKIBIDEA
1. Aurrekontzeptua.
2. Garraio-ariketaren programazio lineala.
3. Matrize-eredua.
4. Propietateak.
5. Garraio-algoritmoaren bidezko ebazpena.
6. Hasierako ebazpena ezartzea.
7. Zutabeen bidezko hurbiltze metodoa (ZHM).
8. Ebazpen endekatuak.
9. Optimoa  eta ebazpena hobetzea.

1  AURREKONTZEPTUAK
-Garraio ereduen helburua.
-Jatorriak/helmugak.
-Sare eredu baten bitartez irudikatzea
-Garraio-ariketa aurkezteko moduak. 
-PL bitartez
-Matrizeen bitartez

Cij
Cm2
Cin
Cm1
Cmj
Ci2
C2j
C22
Ci1
Cmn
C2n
C21
C12
C1j
C1n
C11
D1
D2
Dj
Dn
S1
S2
Si
Sm
Hasierak
Si
kostuak
Cij
Helmugak
Dj
 .
 .
 .
.
.
.
.
.
.
.
.
.
1
2
i
m
1
2
j
n
A
H
A
L
M
E
N
A
K
E
S
K
A
R
I
A
 .
 .
 .
.
.
.
.
.
.
.
.
.

2   GARRAIO 
ARIKETARENPROGRAMAZIO LINEALA
-Garraio ariketaren  modelizazio prozesua
1.-Garraio ariketa bat modelizatzeko honako informazioa behar 
dugu.
-m  jatorri-puntu multzoa eta jatorriko bakoitzeko Si ahalmena. 
-n  helmug-pountu mulztoa eta helmuga bakoitzeko  Dj eskaera.
-Garraioaren banakako kostua Cij.
2.-Helburu  funtzioa  definitu.    “Z  (garraioaren  guztizko  kostua)  ” 
funtzioa  minimizatuz,  “i”  jatorritik  “j”  helmugara  eraman  behar 
den  produktu-unitate  kopurua  kalkulatzean  datza  programazio 
lineala.
3.- Ariketaren murrizketak.
-
edozein  jatorritik  garraiaturiko  guztizko  unitate  kopuruak  ez  du  ahalmena  gainditu 
behar.
-edozein helmugara garraiaturiko unitate-
kopuruak, gutxienez, eskaera astu behar du.
4.-Ariketaren erabakitze aldagaiak (Xij) definitu. 
5.-Ariketaren formulazio matematikoa. 

 



m
i
n
j
ij
ij
x
c
z
1
1
.
min
0

ij
x
m
i
s
x
i
n
j
ij
,.......
1
1




n
j
d
x
m
i
j
ij
,......
1
1










m
1
i
n
1
j
j
i
d
s
Eskaerak asetu ahal izateko honako 
baldintza bete behar da:






m
1
i
n
1
j
j
i
d
s
Eskaera ezin izango da asetu honako 
baldintza pean (ariketa ez egingarria): 






m
i
n
j
j
i
d
s
1
1
   Ariketa orekatua bada (modu estandarra), 
honakoa beteko da:

 



m
i
n
j
ij
ij
x
c
z
1
1
.
min
m
i
s
x
i
n
j
ij
,.......,
1
1




n
j
d
x
m
i
j
ij
,.......,
1
1




0

ij
x

3   MATRIZE-EREDUA
-Matrize-eredua erabili ahal izateko honako datuak 
behar ditugu.
-  m jatorri eta jatorri bakoitzeko ahalmena 
(Si).
-  n helmuga eta helmuga bakoitzeko eskaera 
(dj). 
-Banakako kostuak (Cij).
-Taula
-Taularen interpretazioa honakoa da.

       
Helmugak (j)
 
Jatorriak (i)
 
1
 
 
2
 
…j…
 
n
 
AHALMENA
 
1
 
 
 
 
 
 
                     
    
 
 
                     
    
 
 
                     
    
 
S1
2
 
 
 
                     
    
 
                    
        
        
 
                     
         
         
    
                  
aij
         
xij
                  
cij
 
 
                     
    
 
S2
 
 .
 i
 .
 
 
 
 
 
.
 
m
 
 
                     
    
 
 
                     
    
 
 
                     
    
 
 
                     
    
 
Sm
ESKAERA
 
 
D1
 
D2
 
 
….
 
Dn
 


-Posizio kokatuaren kontzeptua. 
 Xij balio osoa eta positiboa duten posizioak dira, 
hau da, 
(Xij>0).
   
Garraio ariketa garraio-ariketa orekatuaren 
bitartez  ebazten da.
-Beraz, garraio ariketa ez-orekatua bada 
orekatu bilakatu behar da; bilakaera hori 
itxurazko jatorri/helmuga erabiliz egiten da. 
Ariketa ez-orekatua denean, bi kasu eman 
daitezke:

1. kasua: Guztizko ahalmenak guztizko eskaera 
gainditzen du 
(gehiegizko eskaintza)
 







n
j
j
m
i
i
n
d
s
d
1
1
1





m
i
n
j
j
i
d
s
1
1
0
1
,


n
i
c

2. kasua:  Guztizko ahalmena guztizko eskaera 
baino txikiagoa da  
(gehiegizko eskaera / eskaera ezin da asetu)
 





m
i
n
j
j
i
d
s
1
1







m
i
i
n
j
j
m
s
d
s
1
1
1
0
,
1


j
m
c

4   GARRAIO ALGORITMOAREN 
BITARTEZ EBAZTEA
Garraio algoritmoak matrize-eredua erabiltzen du 
(garraio taula). 
ALGORITMOAREN FASEAK  (A-B-D)
A fasea
1. pausua  
Garraio-ariketa matrize-ereduaren bitartez 
adieraztea. Ariketa orekatua ez bada 
orekatu. Ondoren B fasera joan.

B fasea
2. pausua 
Hasierako Oinarrizko Ebazpen Egingarri 
bat definitzea (HOEE) 
 
Hainbat metodo daude HOEE-a 
definitzeko.
• Northwest 
Corner 
Method 
(Iparmendebaldeko  Izkinako  Metodoa 
(IIM)).
• Vogel metodoa
 
   

D fasea
Fase honetan B fasean lorturiko ebazpena optimoa 
den edo ez egiaztatzen da.
3.  pausua.      2.  pausuan  lorturiko  ebazpena 
optimoa  bada  prozesua  geldiarazi.  Optimoa 
ez bada 4. pausura joan.
 4.  pausua.  Aurrekoa  baino  hobea  den 
ebazpen  bat  lortu.  Ondoren  3.  pausura  itzuli 
optimoa den alderatzeko.
Optimotasuna ebaluatzeko metodoak
STEPPING-STONE  (pausoz-pauso)
MODI   (Itxurazko kostuen metodoa)
 

6  HASIERAKO EBAZPENA 
DEFINITZEA
Hiru metodo aztertuko ditugu:
IIM. 3 pausutan egiten da. Kalkulurik gabekoa.
VAM (VOGEL). 4 pausutan egiten da (lerro eta zutabeko 
penalizazioak kalkulatuz burutzen da). 
ZHM. 3 pausu (kalkulurik gabekoa).
-Algoritmo bakoitzak, gehienez ere,  (m+n-1) posizio 
kokatuak lortzea ahalbidetzen du.

6.1. IPARMENDEBALDEKO IZKINEKO  METODOA
1. Iparmendebaldeko posizioa hartu, hau da , [(i,j), non i=j=1]
2.  Aurreko posizioari Xij = min(Si, dj) esleitu eta murriztu Si eta “dj” 
Xij kantitatearekin, hau da
Si´= Si – Xij  eta dj´= dj – Xij
Esleitzea horrekin, “i” lerroa edo “j” zutabea, edo biak, saturatu eta 
taulatik kendu ahal izango dira.
3. 1. pausura joan lerro/zutabe guztiak saturatu arte.

6.2. VOGEL METODOA
Pli = lerro-penalizazioa. “i” lerroko bi kostu txikienen kenketaren 
balio absolutua da.
Pzj = zutabe-penalizazioa. “j” lerroko bi kostu txikienen kenketaren 
balio absolutua da.
Metodoaren abiapuntua orekaturiko garraio-ariketa da:
1.pausua: garraio matrizeko pli eta pzj guztiak kalkulatu.
2.pausua: aukeratu penalizazio  gehien duen lerro/zutabe eta esleitu 
kostu gutxien duen gelaxkari ahalik eta unitate gehien (penalizazioen 
arteko berdinketa baldin badago edozein  aukeratu)
3.pausua: murriztu “i” lerroko ahalmena eta “j” zutabeko eskaera 
“xij “ kantitatearekin. “0” balioa duen 
ahalmena/eskaera-lerro/zutabea ezabatu.
4.pausua: Unitate guztiak esleitu badira bukatu, bestela 1. pausura 
joan.

-Aurreko ariketa orekatua da
Guztizko ahalmena= 5 + 10 + 15 = 30
Guztizko eskaera= 12 + 8 + 4 + 6 = 30
m = 3 (jatorriak) n = 4 (helmugak)
Aldagai kopurua xij = m.n = 3 . 4 = 12 


8  EBAZPEN ENDEKATUAK
-Ebazpen optimoa endekatua da honakoa betetzen 
denean: 
kokaturiko psozizioak < (m+n-1)
-Ebazpen bat optimoa den edo ez jakiteko, 
ebazpenak ez-endekatua behar du, hau da, 
Kokaturiko posizioak = m + n - 1.
-Ebazpen endekatuak ebazteko hainbat metodo 
daude. Epsilon-kokapenak izeneko metodoa 
erabiliko dugu.

-Metodoak, kokaturik ez dauden posizioei oso balio txikia 
esleitzen die; metodo horren bitartez  (m+n-1) posizio 
kokatuak lortu daitezke.
 
-metodoa “zikloa” kontzeptuan oinarritzen da.
-Algoritmoa dago (epsilon-posizioak).  ε posizioaren esleiketa 
posizio independenteetan egiten da; hau da, hutsik ez 
dauden eta ziklorik osatu ezin duten posizioetan. Posizio 
independenteen esleiktea hutsik eta kostu txikien duten 
gelaxkekin hasten da. 
-Propietate garrantzitsua: 
“Egingarria den oinarriko ebazpen batek beti 
ahalbidetuko du “ziklo” bat definitzea” 
-Hori guztia egin eta gero D fasea garatu dezakegu.

ZIKLOA
Zikloa,  honako algoritmoa jarraituz osatzen da:
1. Posizio huts bat hartu eta τ(+) esleitu.
2. Zikloa lerro bertikal eta horizontalez osatzen da, non 
hasierak eta bukaerak oinarrizko posizioetan dauden, 
hasierako posizio hutsean hasi eta bukatuz.
3. Eraikitako zikloko posizioei txandaka τ(+)  eta τ(-) esleitzen 
zaie, hasieran aukeraturiko posizio hutsetik  hasiz. 

9  OPTIMIZAZIOA ETA EBAZPENA 
HOBETZEA
-optimizazioa eta ebazpena hobetzea D 
fasea garatzean datza.  
- STEPPING-STONE

Stepping-Stone
-Gelaxka bakoitzeko kostu marjinalak 
kalkulatzen dira; hau da, erabiltzen ez 
den ibilbide batetik unitate bat 
garraiatzeak duen kostua kalkulatzen da.
-Erabiltzen ez den ibilbide horren kostu 
marjinala negatiboa bada,  lorturiko 
ebazpena ez da optimoa; beraz, hobetu 
ahal izango da.

GARRAIO-ALDAKETAREN EREDUA

Batzuetan, helmugara iritsi  baino lehen, 
ekonomikoagoa/eraginkorrogoa gerta daiteke bitarteko bidaltze 
puntuak ezartzea.
Bitarteko bidaltze-puntuak ditugunean garraio-aldaketako ariketa 
dugu. 
Garraio-aldaketa garraio-algoritmoaren bitartez ebazteko 
garraio-aldaketa garraio-ariketa “bilakatu” behar da.  Horretarako 
“indargetzailearen” kontzeptua erabili behar da.
3

P1
P2
T2
T1
D3
D2
D1
1000
1200
900
800
500
3
4
2
5
7
8
6
4
9
3

Jatorri-puntuak: P1, P2, T1, T2, D1, D2
Helmuga-puntuak: T1, T2, D1, D2, D3
Eskaera- eta eskaintza-kantitateak:
Ahalmena (eskaintza): 
Benetako eskaintza puntuak (P1, P2)= hasierako ahalmena
Aldatze-puntuetako ahalmenak: (T1, T2, D1, DS2) =                             
=hasierako ahalmena + Indargetzailea
Eskaera:
Benetako eskari-puntua (D3) = hasierako eskaera
Aldatze –puntuetako eskaerak (T1, T2, D1, D2) = hasierako eskaera + 
+ Indargetzailea
Indargetzaile-kantitatea (B)   Eskaintza = 1000+1200   = 2200 = B
                                                      Eskaera  = 800+900+500 =2200 = B
 
****** Document Outline ******
    * Slide_1
    * Slide_2
    * Slide_3
    * Slide_4
    * Slide_5
    * Slide_6
    * Slide_7
    * Slide_8
    * Slide_9
    * Slide_10
    * Slide_11
    * Slide_12
    * Slide_13
    * Slide_14
    * Slide_15
    * Slide_16
    * Slide_17
    * Slide_18
    * Slide_19
    * Slide_20
    * Slide_21
    * Slide_22
    * Slide_23
    * Slide_24
    * Slide_25
    * Slide_26
    * Slide_27
    * Slide_28
    * Slide_29
    * Slide_30
    * Slide_31
    * Slide_32
    * Slide_33
    * Slide_34
    * Slide_35
    * Slide_36
    * Slide_37
    * Slide_38
    * Slide_39
    * Slide_40
    * Slide_41
    * Slide_42
    * Slide_43
    * Slide_44
    * Slide_45
    * Slide_46
    * Slide_47
    * Slide_48
    * Slide_49
    * Slide_50
    * Slide_51
    * Slide_52
    * Slide_53
    * Slide_54
    * Slide_55
    * Slide_56
    * Slide_57
    * Slide_58
    * Slide_59
    * Slide_60
    * Slide_61
    * Slide_62
    * Slide_63
    * Slide_64
    * Slide_65
    * Slide_66
    * Slide_67
    * Slide_68
    * Slide_69
===============================================================================
