    1 9. GAIA: GARRAIO SAREAK:  KASUEN EBAZPENAK  2 Sareen aplikazioa •Gas naturala garraiatzeko sarearen diseinua. Modeloaren helburua  gaseoduktoaren eraikitze-kostua murriztea da.  •Errepide sare batetako bi puntuen arteko bide laburrena kalkulatzea. •Eraikitze proiektu baten jardueren programazio optimoa kalkulatzea. •Produktuen garraio optimoa kalkulatzea. Arazo horiei aurre egiteko hainbat algoritmo daude:   -  Garraio eta esleiketa algoritmoa.   -  Bide laburrenaren algoritmoa.   -  sareak kontrolatu eta sekuentziatzeko algoritmoak.   -  Irismen maximorako zuhaitz-algoritmoa.  3 Bide laburrena kalkulatzeko  algoritmoak Demagun (1,2,…….n) erpin dituen  sare bat eta (i,j) arku bakoitzerako d ij≥0 zenbakia  dugula (i-tik j-ra arteko distantzia, kostua,….. adierazten duen.  (i,j) arkua existitzen ez  bada bi erpinak ez daude konektaturik, beraz honakoa egin genezake, d ij=+∞  (+M). (i,j)  eta (j,i) arkuak distantzia ezberdinak izan ditzakete. Hipotesi horiekin, “1” hasierako erpina bada eta “n” bukaerako erpina, bi erpin horien  arteko distantzia kalkulatuko dugu.    4 Programazio linealaren bitartez ebaztea X ij balioak kalkulatu ,non: Non,  x ij=1 (i,j) arkua hartzen bada, o bestelakoetan  5 Simplex metodoaren bitartez ebazpide optimoa kalkulatzen da:  6 Esleiketa metodoa 1. “n” ordenako esleitze-matrize bat sortu (n=erpin kopurua 2. Erpin batetik erpin berekoraino distantzia 0 da. 3. (i,j) arkua existitzen bada d ij distantzia idatzi dagokion lekuan; (i,j) arkurik ez  badago d ij=M 4. D n1=-M 5. Esleiketa-matrizea ebatzi (Hungariar metodoarekin) Lorturiko ebazpidea izartxo batekin adierazi.  7 METODO HUNGARIARRA Minimizatze ariketak ebazteko erabiltzen da.  1.-    mxm  kostu- matrizean  lerro  bakoitzeko  elementu  txikiena  aurkitu;  matrize  berri  bat  egingo  dugu  kostu  bakoitzari  lerroko  kostu  minimoa  kenduz.  Matrize  berri  horretarako  zutabe  bakoitzeko  kostu  minimoa  aurkitu.  Kostu  bakoitzari  zutabeko  kostu minimoa kenduz beste matrize bat izango dugu (kostu murriztuen matrizea). 2.- Lerro  (horizontal edo bertikal)  kopuru minimoarekin kostu murriztuen matrizeko  zeroak  azpimarratu;  “m”  lerro  behar  badira  0  guztiak  azpimarratzeko,  ebazpide  optimoa  izango  dugu.  “m”  lerro  baino  gutxiago  behar  baditugu  3.  pausora  joango  gara.   3.-   Aurkitu 2. pausuan azpimarraturik geratu den eta 0 ez den elementurik txikiena  (k); ondoren k kendu azpimarratu gabeko elementu bakoitzari eta k gehitu bi lerroz  azpimarraturiko elementuei. 4.- 2. puntura joan.  8 Enpresa  batek  4  proiektu  esleitu  nahi  ditu  4  lan-taldeen  artean   (talde  bakoitzak  proiektu  bakarra  burutu  dezake).  Talde  bakoitzak  proiektua  egiteko  behar  duen  denbora honako taulan agertzen da. 1 proiektua 2 proiektua 3 Proiektua 4 proiketua 1 Taldea 14 5 8 7 2 Taldea 2 12 6 5 3 Taldea 7 8 3 9 4 taldea 2 4 6 10 ARIKETA:   9 P1 P2 P3 P4 G1 14 5 8 7 G2 2 12 6 5 G3 7 8 3 9 G4 2 4 6 10 P1 P2 P3 P4 G1 9 0 3 0 G2 0 10 4 1 G3 4 5 0 4 G4 0 2 4 6 P1 P2 P3 P4 G1 9 0 3 2 G2 0 10 4 3 G3 4 5 0 6 G4 0 2 4 8 P1 P2 P3 P4 G1 10 0 3 0 G2 0 9 3 0 G3 5 5 0 4 G4 0 1 3 5 Lerro bakoitzeko minimoa eta kendur Zutabe bakoitzeko minimoa eta kendu   2.  Aurreko posizioari Xij = min(Si, dj) esleitu eta murriztu Si eta “dj”  Xij kantitatearekin, hau da Si´= Si – Xij  eta dj´= dj – Xij Esleitzea horrekin, “i” lerroa edo “j” zutabea, edo biak, saturatu eta  taulatik kendu ahal izango dira. 3. 1. pausura joan lerro/zutabe guztiak saturatu arte.  6.2. VOGEL METODOA Pli = lerro-penalizazioa. “i” lerroko bi kostu txikienen kenketaren  balio absolutua da. Pzj = zutabe-penalizazioa. “j” lerroko bi kostu txikienen kenketaren  balio absolutua da. Metodoaren abiapuntua orekaturiko garraio-ariketa da: 1.pausua: garraio matrizeko pli eta pzj guztiak kalkulatu. 2.pausua: aukeratu penalizazio  gehien duen lerro/zutabe eta esleitu  kostu gutxien duen gelaxkari ahalik eta unitate gehien (penalizazioen  arteko berdinketa baldin badago edozein  aukeratu) 3.pausua: murriztu “i” lerroko ahalmena eta “j” zutabeko eskaera  “xij “ kantitatearekin. “0” balioa duen  ahalmena/eskaera-lerro/zutabea ezabatu. 4.pausua: Unitate guztiak esleitu badira bukatu, bestela 1. pausura  joan.  -Aurreko ariketa orekatua da Guztizko ahalmena= 5 + 10 + 15 = 30 Guztizko eskaera= 12 + 8 + 4 + 6 = 30 m = 3 (jatorriak) n = 4 (helmugak) Aldagai kopurua xij = m.n = 3 . 4 = 12    8  EBAZPEN ENDEKATUAK -Ebazpen optimoa endekatua da honakoa betetzen  denean:  kokaturiko psozizioak < (m+n-1) -Ebazpen bat optimoa den edo ez jakiteko,  ebazpenak ez-endekatua behar du, hau da,  Kokaturiko posizioak = m + n - 1. -Ebazpen endekatuak ebazteko hainbat metodo  daude. Epsilon-kokapenak izeneko metodoa  erabiliko dugu.  -Metodoak, kokaturik ez dauden posizioei oso balio txikia  esleitzen die; metodo horren bitartez  (m+n-1) posizio  kokatuak lortu daitezke.   -metodoa “zikloa” kontzeptuan oinarritzen da. -Algoritmoa dago (epsilon-posizioak).  ε posizioaren esleiketa  posizio independenteetan egiten da; hau da, hutsik ez  dauden eta ziklorik osatu ezin duten posizioetan. Posizio  independenteen esleiktea hutsik eta kostu txikien duten  gelaxkekin hasten da.  -Propietate garrantzitsua:  “Egingarria den oinarriko ebazpen batek beti  ahalbidetuko du “ziklo” bat definitzea”  -Hori guztia egin eta gero D fasea garatu dezakegu.  ZIKLOA Zikloa,  honako algoritmoa jarraituz osatzen da: 1. Posizio huts bat hartu eta τ(+) esleitu. 2. Zikloa lerro bertikal eta horizontalez osatzen da, non  hasierak eta bukaerak oinarrizko posizioetan dauden,  hasierako posizio hutsean hasi eta bukatuz. 3. Eraikitako zikloko posizioei txandaka τ(+)  eta τ(-) esleitzen  zaie, hasieran aukeraturiko posizio hutsetik  hasiz.   9  OPTIMIZAZIOA ETA EBAZPENA  HOBETZEA -optimizazioa eta ebazpena hobetzea D  fasea garatzean datza.   - STEPPING-STONE  Stepping-Stone -Gelaxka bakoitzeko kostu marjinalak  kalkulatzen dira; hau da, erabiltzen ez  den ibilbide batetik unitate bat  garraiatzeak duen kostua kalkulatzen da. -Erabiltzen ez den ibilbide horren kostu  marjinala negatiboa bada,  lorturiko  ebazpena ez da optimoa; beraz, hobetu  ahal izango da.  GARRAIO-ALDAKETAREN EREDUA  Batzuetan, helmugara iritsi  baino lehen,  ekonomikoagoa/eraginkorrogoa gerta daiteke bitarteko bidaltze  puntuak ezartzea. Bitarteko bidaltze-puntuak ditugunean garraio-aldaketako ariketa  dugu.  Garraio-aldaketa garraio-algoritmoaren bitartez ebazteko  garraio-aldaketa garraio-ariketa “bilakatu” behar da.  Horretarako  “indargetzailearen” kontzeptua erabili behar da. 3  P1 P2 T2 T1 D3 D2 D1 1000 1200 900 800 500 3 4 2 5 7 8 6 4 9 3  Jatorri-puntuak: P1, P2, T1, T2, D1, D2 Helmuga-puntuak: T1, T2, D1, D2, D3 Eskaera- eta eskaintza-kantitateak: Ahalmena (eskaintza):  Benetako eskaintza puntuak (P1, P2)= hasierako ahalmena Aldatze-puntuetako ahalmenak: (T1, T2, D1, DS2) =                              =hasierako ahalmena + Indargetzailea Eskaera: Benetako eskari-puntua (D3) = hasierako eskaera Aldatze –puntuetako eskaerak (T1, T2, D1, D2) = hasierako eskaera +  + Indargetzailea Indargetzaile-kantitatea (B)   Eskaintza = 1000+1200   = 2200 = B                                                       Eskaera  = 800+900+500 =2200 = B   ****** Document Outline ******     * Slide_1     * Slide_2     * Slide_3     * Slide_4     * Slide_5     * Slide_6     * Slide_7     * Slide_8     * Slide_9     * Slide_10     * Slide_11     * Slide_12     * Slide_13     * Slide_14     * Slide_15     * Slide_16     * Slide_17     * Slide_18     * Slide_19     * Slide_20     * Slide_21     * Slide_22     * Slide_23     * Slide_24     * Slide_25     * Slide_26     * Slide_27     * Slide_28     * Slide_29     * Slide_30     * Slide_31     * Slide_32     * Slide_33     * Slide_34     * Slide_35     * Slide_36     * Slide_37     * Slide_38     * Slide_39     * Slide_40     * Slide_41     * Slide_42     * Slide_43     * Slide_44     * Slide_45     * Slide_46     * Slide_47     * Slide_48     * Slide_49     * Slide_50     * Slide_51     * Slide_52     * Slide_53     * Slide_54     * Slide_55     * Slide_56     * Slide_57     * Slide_58     * Slide_59     * Slide_60     * Slide_61     * Slide_62     * Slide_63     * Slide_64     * Slide_65     * Slide_66     * Slide_67     * Slide_68     * Slide_69 ===============================================================================
