


1. Kapitulua
Eredu linealak eta ebazpide graﬁkoa
Ikerkuntza Operatiboaren barnean programazio lineala arlo garrantzitsua da. Tek-
nika matematiko horretako metodoek murrizketak dituzten optimizazio-linealeko
problemen soluzio optimoa lortzea ahalbidetzen dute. Horrelako problemak prak-
tikan kontestu desberdinetan sortzen dira, mugatuak diren baliabideak zenbait jar-
dueren artean banatu behar direnean. Asko dira programazio linealaren bidez
adieraziak eta ebatziak izan daitezkeen egoerak, hala nola beharrei baliabideak
esleitzea, ekoizpenaren plangintza egitea, ekoiztutako produktuen garraioa anto-
latzea iturburuetatik helburuetara eramateko, nahaste-problemak etab.
Programazio linealak eredu matematiko lineal bat erabiltzen du ebatzi beha-
rreko problema adierazteko. Lineal adjektiboa erabiltzen da ereduaren funtzio
guztiek izaera lineala dutelako.
1.1
Eredu lineala
Problema lineal batean funtzio lineal bat optimizatu 
(maximizatu edo minimizatu)
behar da, problemaren aldagaiek inekuazio linealen sistema bat bete behar dute-
larik. Honelakoa da eredu lineala:
opt
z = c
T x
(1.1)
hauen mende
Ax
≤
> b
(1.2)
x
≥ 0
(1.3)
1

2
1. Eredu linealak eta ebazpide graﬁkoa
Optimizatu beharreko funtzio lineala (1.1) da eta helburu funtzioa esaten zaio;
problemaren aldagaiek bete beharreko inekuazio linealen sistema 
(1.2) da eta mu-
rrizketa esaten zaie, eta (1.3) ez-negatibotasunaren murrizketak dira.
Eredu linealean agertzen diren elementuak ondokoak dira.
• x bektorea erabaki-aldagaien bektorea da, eta n osagai ditu.
• cT bektorea prezio-bektorea edo kostu-bektorea da, eta n osagai ditu.
• b bektorea baliabide-bektorea da, eta m osagai ditu.
• A matrizea koeﬁziente teknologikoen matrizea da, eta m errenkada eta n
zutabe ditu. Matrizeko
aij elementu bakoitzak j, j = 1, . . . , n jarduera
unitate bat egiteko behar den
i, i = 1, . . . , m baliabidearen unitate kopurua
adierazten du.
Eredu linealean cT , b eta A parametro ezagunak dira; ez ordea x bektorea.
Hain zuzen ere, b bektoreko baliabideak modu optimoan esleituak izateko, x
erabaki-aldagaien balioak aurkitzean datza problema.
1.2
Eredu lineala idazteko formak
Aurreko atalean deﬁnitutako eredu lineala forma desberdinetan adierazia izan dai-
teke.
1. Bektoreen tamaina eta koeﬁziente teknologikoen matrizearena kontuan har-
tuz,
opt
z = c1x1 + c2x2 + · · · + cnxn
hauen mende
a11x1 + a12x2 + · · · + a1nxn
≤
> b1
a21x1 + a22x2 + · · · + a2nxn
≤
> b2
..
.
..
.
. ..
..
.
..
.
am1x1 + am2x2 + · · · + amnxn
≤
> bm
x1, x2, . . . , xn ≥ 0
OpenCourseWare, UPV/EHU

1.3. Eredu lineala sortzen
3
2. Matrize-forman.
opt
z = (c1, . . . , cn)





x1
..
.
xn





hauen mende








a11
a12
. . . a1n
a21
a22
. . . a2n
..
.
..
.
. ..
..
.
am1 am2 . . . amn
















x1
x2
..
.
xn








≤
=
≥








b1
b2
..
.
bm








(x1, x2, · · · , xn)
T ≥ (0, 0, · · · , 0)T
3. a1
, a2, . . . , an bektoreak A matrizearen zutabeak izanik,
opt
z = c1x1 + c2x2 + · · · + cnxn
hauen mende
a1
x1 + a2x2 + · · · + anxn
≤
> b
xj ≥ 0 , j = 1, . . . , n
1.3
Eredu lineala sortzen
Sistema erreal bat programazio linealeko teknikak erabiliz aztertu nahi denean,
sistema adieraziko duen eredua sortzea da eman behar den lehen urratsa. Eredu
lineala sortzea urrats garrantzitsua da, programazio linealeko tekniken bidez kal-
kulatuko den soluzio optimoa eraikitako eredu lineal horren mende baitago. Dena
den, eredua eraikitzea urrats zaila izan daiteke, horretarako diseinatutako metodo
edo erregela zehatzik ez dagoelako; ereduak eraikiz ikasten da ereduak eraikitzen.
Horretarako lagungarri izan daiteke zenbait adibide praktiko aztertzea.
1. adibidea. Garraio-problema
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

4
1. Eredu linealak eta ebazpide graﬁkoa
Enpresa batek bizikletak ekoizten ditu
H1, H2 eta H3 hirietan dituen hiru su-
kurtsaletan. Hiri horietako bakoitzean hilean
1000, 2100 eta 1500 bizikleta ekoiz-
teko ahalmena dute, hurrenez hurren. Enpresak lau bezerorentzat egiten du lan,
A, B, C eta D, eta bezero horiek hilero 800, 1100, 900 eta 1300 bizikleta erosteko
eskaria egiten diote, hurrenez hurren.
Ondoko taulan bizikleta bakoitza garraiatzeak sortuko duen kostua zehazten
da. Garraio-kostua bizikleta ekoitzia izan den herritik bezeroarengana iristeko
dagoen distantziaren mende kalkulatua izan da.
A B
C
D
H1
10
8 10 13
H2
19
6 15 16
H3
14
8
9
6
Bizikleten garraioa antolatzen lagunduko duen eredu lineala idatzi behar da.
Ereduak enpresaren eskaintzen eta bezeroen eskarien informazioa jaso beharko
ditu eta garraioa kostu minimoan egingo dela ziurtatu beharko du.
• Erabaki-aldagaiak.
xij: Hi hiritik j bezeroarengana hilero garraiatuko den bizikleta kopurua,
i = 1, 2, 3, j = A, B, C, D.
• Helburu funtzioa. Garraio-kostua minimizatzea.
min z = 10x1A + 8x1B + 10x1C + 13x1D + 19x2A + 6x2B + 15x2C+
+16x2D + 14x3A + 8x3B + 9x3C + 6x3D
• Murrizketak. Sukurtsaletako eskaintza eta bezeroen eskaria.
– Hirietako sukurtsalen ekoizpen-ahalmena ez da gainditu behar.
x1A + x1B + x1C + x1D ≤ 1000
x2A + x2B + x2C + x2D ≤ 2100
x3A + x3B + x3C + x3D ≤ 1500
OpenCourseWare, UPV/EHU

1.3. Eredu lineala sortzen
5
– Bezeroen eskaria zerbitzatu egin behar da.
x1A + x2A + x3A ≥ 800
x1B + x2B + x3B ≥ 1100
x1C + x2C + x3C ≥ 900
x1D + x2D + x3D ≥ 1300
– Ez-negatibotasunaren murrizketa. Aldagaiek balio positiboak hartu
behar dituzte,
xij ≥ 0, i = 1, 2, 3, j = A, B, C, D.
2. adibidea. Ekoizpen-problema
Enpresa batek hiru pieza mota ekoizten ditu,
P1, P2 eta P3, eta ekoizpenerako
A, B eta C makinak erabiltzen ditu. Makinak erabilgarri dauden ordu kopurua eta
makina bakoitzaren ekoizpen-kostua ondoko taulan zehazten dira.
Erabilgarritasuna
Ekoizpen-kostua
(ordu/aste)
(euro/ordu)
A makina
1000
6
B makina
1000
4
C makina
1000
5
Pieza bakoitza ekoizteko makina bakoitzean egon beharko duen ordu kopurua
zehazten da ondoko taulan:
P1
P2
P3
A makina
1
2
3
B makina
2
3
1
C makina
1
1
1
Piezen ekoizpenean
M1 eta M2 materialak erabiliko dira. Material horiek kan-
titate mugatuan daude,
1000 kg eta 1200 kg, hurrenez hurren. Ondoko taulan
zehazten da pieza unitate bakoitzaren ekoizpenean behar den material kantitatea.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

6
1. Eredu linealak eta ebazpide graﬁkoa
Pieza
M1 (kg/pieza) M2 (kg/pieza)
P1
1
2
P2
1
3
P3
3
1
M1 materialaren kostua 1.5 eurokoa da kiloko, eta M2 materialarena 3 euro-
koa. Piezak ekoitziak izan direnean, salduak izango dira
50, 56 eta 70 eurotan,
hurrenez-hurren. Enpresak asteroko ekoizpena antolatu nahi du irabazi maximoa
lortzeko.
• Erabaki-aldagaiak.
xj: enpresak astero ekoitziko duen Pj, j = 1, 2, 3, pieza kopurua.
• Helburu funtzioa. Irabazia maximizatzea.
* Salmenta-prezioa
= 50x1 + 56x2 + 70x3
* Materialaren-kostua =
(1 × 1.5 + 2 × 3)x1 + (1 × 1.5 + 3 × 3)x2 +
(3 × 1.5 + 1 × 3)x3
* Ekoizpen-kostua =
(1 × 6 + 2 × 4 + 1 × 5)x1 + (2 × 6 + 3 × 4 + 1 ×
5)x2 + (3 × 6 + 1 × 4 + 1 × 5)x3
Irabazia honela kalkulatuko da:
”Salmenta-prezioa”
− “Materialaren kostua” − “Ekoizpen-kostua”
Kalkuluak eginez ereduaren helburu funtzioa lortuko da.
max z = 23.5x1 + 16.5x2 + 35.5x3
• Murrizketak. Erabilgarri dauden makina-ordu kopuruek eta material kan-
titateak murrizten dute ekoizpena.
x1 + 2x2 + 3x3 ≤ 1000 (A makina)
2x1 + 3x2 + x3 ≤ 1000 (B makina)
x1 + x2 + x3 ≤ 1000 (C makina)
x1 + x2 + 3x3 ≤ 1000 (M1 materiala)
2x1 + 3x2 + x3 ≤ 1200 (M2 materiala)
OpenCourseWare, UPV/EHU

1.3. Eredu lineala sortzen
7
• Ez-negatibotasunaren murrizketa. Pieza kopuru positiboa ekoitziko da,
x1, x2, x3 ≥ 0.
3. adibidea. Nahasketen problema
Erreﬁnategi batean petrolio-gordina tratatu eta hiru osagaitan banatzen da, on-
doren, osagai horiek nahasiz
A eta B gasolinak lortzeko. Gasolinen ekoizpenera-
ko erabilgarri dagoen osagai bakoitzeko upel kopurua eta upel bakoitzaren kostua
eurotan honako taulan ematen dira:
Upel kopurua
Kostua
O1 osagaia
2000
10
O2 osagaia
3000
8
O3 osagaia
1000
12
A eta B gasolinen kalitate-maila egokia izan dadin, hiru osagaiak honela naha-
si behar dira.
• A gasolinak duen O1 osagaiaren kopurua gutxienez %30 da, eta O2 osagaia
gutxienez
%20; O3 osagaia, aldiz, gehienez %30 izango du.
• B gasolinak bere konposizioan osagai bakoitzetik gutxienez %25 izan behar
du.
Hiru osagaiak nahasiz lortuko diren
A eta B gasolinak upeletan salduko dira,
40 eta 35eko salmenta-prezioan, hurrenez hurren. Gasolinen ekoizpena antolatzea
da helburua, ekoizpenetik lortutako irabaziak maximizatzeko.
• Erabaki-aldagaiak.
xij: j gasolina sortzeko Oi osagai bakoitzetik erabiliko den upel kopurua,
j = A, B, i = 1, 2, 3.
• Helburu funtzioa. Irabazia maximizatzea.
* Gasolinen prezioa =
40(x1A + x2A + x3A) + 35(x1B + x2B + x3B)
* Osagaien kostua =
10(x1A + x1B) + 8(x2A + x2B) + 12(x3A + x3B)
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

8
1. Eredu linealak eta ebazpide graﬁkoa
Irabazia kalkulatzeko “Gasolinen prezioa”
− “Osagaien kostua” egin behar
da, eta honako helburu funtzioa lortuko da:
max z = 30x1A + 32x2A + 28x3A + 25x1B + 27x2B + 23x3B
• Murrizketak. Hiru osagaietatik erabilgarri dauden upel kopuruak eta ga-
solina bakoitzaren kalitatea bermatuko duten konposiziorako murrizketek
ekoizpena baldintzatuko dute.
– Osagaien kantitateei dagozkien murrizketak.
x1A + x1B ≤ 2000 (O1 osagaia)
x2A + x2B ≤ 3000 (O2 osagaia)
x3A + x3B ≤ 1000 (O3 osagaia)
– Gasolinen konposizioa.
x1A ≥
30
100
(x1A + x2A + x3A)
x2A ≥
20
100
(x1A + x2A + x3A)
x3A ≤
30
100
(x1A + x2A + x3A)
x1B ≥
25
100
(x1B + x2B + x3B)
x2B ≥
25
100
(x1B + x2B + x3B)
x3B ≥
25
100
(x1B + x2B + x3B)
• Ez-negatibotasunaren murrizketa. xij ≥ 0, i = 1, 2, 3, j = A, B
4. adibidea. Dieta-problema
Nutrizio-zentro batean
A, B, C eta D bitaminak kantitate egokian izango di-
tuen dieta prestatzen ari dira. Dietak bitamina mota bakoitzetik kantitate hauek
ziurtatu behar ditu:
A bitaminatik gutxienez 25 miligramo, B bitaminatik 25 eta
30 miligramo artean, C bitaminatik gutxienez 22 miligramo eta D bitaminatik
gehienez
17 miligramo.
Bitamina horiek lau elikagaitatik lortzen dira. Ondoko taulan agertzen da eli-
kagai gramo bakoitzean dagoen bitaminen miligramo kopurua eta elikagai gra-
moaren kostua.
OpenCourseWare, UPV/EHU

1.3. Eredu lineala sortzen
9
Bitaminak (mg/g)
Kostua
A
B
C
D
(euro/g)
E1 elikagaia
2
1
0
1
0.014
E2 elikagaia
1
2
1
2
0.009
E3 elikagaia
1
0
2
0
0.013
E4 elikagaia
1
2
1
1
0.016
Beharrezkoak diren bitamina kantitateak bermatuko dituen kostu minimoko
dieta diseinatu nahi da. Honela idatz daiteke problema adierazten duen eredu
lineala.
• Erabaki-aldagaiak.
xj: dietak izango duen Ej elikagaiaren gramo kantitatea, j = 1, 2, 3, 4.
• Helburu funtzioa. Dietaren kostua minimizatzea.
min
z = 0.014x1 + 0.009x2 + 0.013x3 + 0.016x4
• Murrizketak. Dietak bitamina kantitate egokiak bermatu behar ditu.
2x1 + x2 + x3 + x4 ≥ 25 (A bitamina)
x1 + 2x2 + 2x4 ≥ 25 (B bitamina)
x1 + 2x2 + 2x4 ≤ 30 (B bitamina)
x2 + 2x3 + x4 ≥ 22 (C bitamina)
x1 + 2x2 + x4 ≤ 17 (D bitamina)
• Ez-negatibotasunaren murrizketa. xj ≥ 0, j = 1, 2, 3, 4
5. adibidea. Mozketa-problema
Enpresa batean
5 metroko zabalera eta 20 metroko luzera duten paper-bobinak
ekoizten dira. Bezeroengandik zabalera txikiagoko paper-bobinen eskariak jaso
ohi direnez, eskatutako neurrietara moztu egin behar izaten dira. Datorren hilabe-
terako ondoko eskariak jaso dira:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

10
1. Eredu linealak eta ebazpide graﬁkoa
Eskaria
Zabalera
(bobinak)
3 m
100
2 m
100
1.5 m
300
1 m
150
Mozketa antolatu behar da
5 metroko zabalerako paper-bobina kopuru mini-
moa moztuz bezeroen eskariak zerbitzatzeko. Paper-bobinak bezeroek eskatutako
zabaleretara mozteko aukera desberdinak daude. Honako taulan laburbiltzen dira
5 metroko zabalerako bobinak eskatutako zabaleretan mozteko dauden 7 aukerak:
Mozteko
Zabalera
aukera
3m 2m 1.5m 1m
1
1
1
0
0
2
1
0
0
2
3
0
2
0
1
4
0
1
2
0
5
0
1
0
3
6
0
0
2
2
7
0
0
0
5
• Erabaki-aldagaiak.
xj: j mozteko aukeraren arabera moztutako paper-bobina kopurua, j =
1, . . . , 7.
• Helburu funtzioa. Moztutako paper-bobina kopurua minimizatzea.
min z = x1 + x2 + x3 + x4 + x5 + x6 + x7
OpenCourseWare, UPV/EHU

1.3. Eredu lineala sortzen
11
• Murrizketak. Bezeroen eskariak zerbitzatu behar dira.
x1 + x2 ≥ 100
x1 + 2x3 + x4 + x5 ≥ 100
2x4 + 2x6 ≥ 300
2x2 + x3 + 3x5 + 2x6 + 5x7 ≥ 150
• Ez-negatibotasunaren murrizketa. xj ≥ 0, j = 1, . . . , 7.
5 metroko zabalerako paper-bobina moztean zentimetro batzuk alferrik galdu-
ko direla onartzen bada, mozketarako beste aukera batzuk deﬁni daitezke. Moz-
keta egitean, gehienez
0.5 metroko paper-soberakina sortuko duten mozketarako
aukerak ondoko taulakoak dira:
Mozteko
Zabalera
Papera
aukera
3m 2m 1.5m 1m soberan
1
1
1
0
0
0
2
1
0
1
0
0.5m
3
1
0
0
2
0
4
0
2
0
1
0
5
0
1
2
0
0
6
0
1
1
1
0.5m
7
0
1
0
3
0
8
0
0
3
0
0.5m
9
0
0
2
2
0
10
0
0
1
3
0.5m
11
0
0
0
5
0
Kasu honetan, paper-bobinak mozteko
11 aukera desberdin daude, eta aukera
bakoitzaren arabera moztuko den paper-bobina kopurua adieraziko duen aldagai
bana deﬁnituko dugu, hau da,
11 erabaki-aldagai. Aldagai horiekin honako eredu
lineala planteatuko dugu:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

12
1. Eredu linealak eta ebazpide graﬁkoa
min z = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11
hauen mende
x1 + x2 + x3 ≥ 100
x1 + 2x4 + x5 + x6 + x7 ≥ 100
x2 + 2x5 + x6 + 3x8 + 2x9 + x10 ≥ 300
2x3 + x4 + x6 + 3x7 + 2x9 + 3x10 + 5x11 ≥ 150
x1, . . . , x11 ≥ 0
1.4
Ebazpide graﬁkoa
Problema lineal guztiak graﬁkoki ebatzi ezin diren arren, guztiek badute inter-
pretazio geometrikoa. Eredu linealen ebazpide graﬁkoa aztertzea interesgarria da
programazio linealean garrantzitsuak diren kontzeptuak graﬁkoki ikus daitezkee-
lako, hala nola soluzio baten hobekuntza, soluzio motak, mutur-puntuak.
Inekuazio-sistemaren soluzioen multzoa ekuazio bakoitza berdintzaz marraz-
tuz eta ondoren inekuazioak adierazitako espazioerdia erabakiz lortzen da. Hel-
buru funtzioa paraleloak diren zuzenen familia bat da, zuzen bat
z-ren balio ba-
koitzerako. Zuzen hori soluzioen multzoaren gainean desplazatuz,
z-ren balioa
optimizatu egiten da, eta optimoa lortuko da zuzena soluzioen multzoaren muga-
raino iristen denean. Helburu funtzioaren balio optimoa beti soluzioen multzoaren
erpin batean aurkitzen da.
Atal honetan, bi aldagaiko eredu lineal batzuren ebazpide graﬁkoa aztertuko
dugu.
Adibidea. Soluzio optimo bakarra duen problema
Har dezagun ondoko eredu lineala:
max z = 6x1 + 3x2
hauen mende
2x1 + 4x2 ≤ 8
−x1 + 4x2 ≤ 4
x1 − x2 ≤ 2
x1, x2 ≥ 0
OpenCourseWare, UPV/EHU

1.4. Ebazpide graﬁkoa
13
Murrizketek deﬁnitutako soluzioen multzoan helburu funtzioaren balioa ma-
ximizatuko duten
x1 eta x2 aldagaien balioak aurkitzean datza problema.
Soluzioen multzoa koordenatu-sistema batean marraz daiteke. Ereduaren mu-
rrizketa bakoitza espazioerdi bat da. Adibidez, ereduaren lehenengo murrizketak
deﬁnitutako espazioerdia graﬁkoki adierazteko
2x1 + 4x2 = 8 zuzena marraz-
tuko dugu. Zuzen horrek planoa bi espazioerditan banatzen du, eta horietako
bat da murrizketari dagokiona, zuzena barne, murrizketak berdintza ere badue-
lako. Adierazpen graﬁkoan, gezien bidez erakusten da murrizketa bakoitzari da-
gokion espazioerdia. Zuzenak deﬁnitutako bi espazioerdien artean murrizketari
zein dagokion erabakitzeko, planoko puntu bat hartu eta murrizketa betetzen duen
egiaztatu besterik ez da egin behar. Ereduko murrizketa guztiak graﬁkoki adiera-
ziz eta ez-negatibotasunaren murrizketak kontuan hartuz, problemaren soluzioen
multzoa lortuko da.
x1
x2
O
A
B
C
D 2x
1
+ 4x2 = 8
−x1 + 4x2 = 4
x1 − x2 = 2
max
Aurreko irudian margotutako eskualdea problemaren soluzioen multzoa da;
eskualde horretan dauden puntuek problemaren murrizketa guztiak, ez-
negatibotasunaren
murrizketak barne, betetzen dituzte.
OABCD poligonoa multzo ganbila da.
Poligonoaren erpinak kalkula daitezke ekuazio-sistemak askatuz.
O puntua
koordenatu-sistemaren jatorria da.
A = (0, 1) puntua −x1 + 4x2 = 4 zuzenaren
eta ordenatu ardatzaren arteko ebaki-puntua da.
D = (2, 0) puntua x1 − x2 =
2 zuzenaren eta absiza ardatzaren arteko ebaki-puntua da. B = (
4
3 ,
4
3 ) puntua
−x1 + 4x2 = 4 zuzenaren eta 2x1 + 4x2 = 8 zuzenaren arteko ebaki-puntua da.
C = (
8
3 ,
2
3 ) puntua x1 − x2 = 2 zuzenaren eta 2x1 + 4x2 = 8 zuzenaren arteko
ebaki-puntua da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

14
1. Eredu linealak eta ebazpide graﬁkoa
Helburu funtzioa soluzioen eskualdearen gainetik desplazatzen dugunean, koordenatu-
sistemaren jatorritik urrunduz,
z-ren balioa hazi egiten da. Desplazamendua es-
kualdearen mugaraino iritsi arte egin behar da
z optimizatzeko. Horrela, egiazta
daiteke problemaren soluzio optimoa
C puntuan aurkitzen dela, eta helburu fun-
tzioak
z
∗ = 18 balio optimoa lortuko duela bertan.
Adibidea. Soluzio optimo anizkoitza duen problema.
Har dezagun ondoko eredu lineala:
max z = x1 + x2
hauen mende
x1 + x2 ≤ 8
−4x1 + 4x2 ≤ 8
2x1 − x2 ≤ 6
x1, x2 ≥ 0
Problemari dagokion soluzioen multzoa graﬁkoki adierazteko aurreko adibi-
dean azaldu bezala egiten da. Oraingoan, problemaren soluzioen multzoa graﬁ-
koan margotuta ikusten den
OABCD poligonoa da. B = (3, 5) puntua x1 + x2 =
8 zuzenaren eta −4x1 + 4x2 = 8 zuzenaren arteko ebaki-puntua da. C = (
14
3 ,
10
3 )
puntua
x1 + x2 = 8 zuzenaren eta 2x1 − x2 = 6 zuzenaren arteko ebaki-puntua
da.
x1
x2
O
A
B
C
D
x1 + x2 = 8
−4x1 + 4x2 = 8
2x1 − x2 = 6
max
OpenCourseWare, UPV/EHU

1.4. Ebazpide graﬁkoa
15
Helburu funtzioa soluzioen eskualdearen gainetik mugaraino iritsi arte despla-
zatuz optimora iristea lortuko da.
B eta C erpinak eta BC segmentuko puntuak
problemaren soluzio optimoak dira. Helburu funtzioaren balio optimoa
z∗ = 8
da.
Adibidea. Problema bideraezina.
Har dezagun ondoko eredu lineala.
max z = x1 + x2
hauen mende
2x1 + x2 ≤ 5
x1 − x2 ≥ 4
x1, x2 ≥ 0
Problemaren murrizketa guztiak graﬁkoki marraztuz egiazta daiteke ez dagoe-
la murrizketa guztiak betetzen dituen punturik. Hortaz, problemak ez du soluzio-
rik; bideraezina da.
x1
x2
2x1 + x2 = 5
x1 − x2 = 4
Adibidea. Soluzioen eskualde bornegabea. Soluzio bornegabea.
Har dezagun ondoko eredu lineala:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

16
1. Eredu linealak eta ebazpide graﬁkoa
max z = x1 + 2x2
hauen mende
x1 + 2x2 ≥ 2
−2x1 + x2 ≤ 4
x1, x2 ≥ 0
Graﬁkoan ikusten den bezala, soluzioen eskualdea bornegabea da, eta helburu
funtzioa adierazten duen zuzena etengabe desplaza daiteke. Hortaz, problema
honen soluzio optimoa bornegabea dela esaten da.
x1
x2
x1 + 2x2 = 2
−2x1 + x2 = 4
max
Adibidea. Soluzioen eskualde bornegabea. Soluzio bornatua.
Izan bedi honako eredu lineala:
OpenCourseWare, UPV/EHU

1.4. Ebazpide graﬁkoa
17
min z = x1 + 2x2
hauen mende
x1 + 2x2 ≥ 2
−2x1 + x2 ≤ 4
x1, x2 ≥ 0
Adibide honetan, soluzioen multzoa bornegabea da, baina soluzio optimo bor-
natua aurki daiteke, helburu funtzioa soluzioen eskualdearen gainetik koordenatu-
ardatzen jatorriratz desplazatuz mugara iritsi arte. Horrela, egiaztatu ahal izango
dugu soluzio optimoak
A = (0, 1) puntua, B = (2, 0) puntua eta AB segmentuko
puntuak direla, eta balio optimoa
z∗ = 2 dela.
x1
x2
A
B
x1 + 2x2 = 2
−2x1 + x2 = 4
min
Eredu linealak ebazterakoan aurki ditzakegun soluzio mota guztiak ikusi di-
tugu adibideen bitartez. Soluzio mota bakoitza modu aljebraikoan identiﬁkatuko
duten baldintzak 2. Kapituluan aztertuko dira. Bertan, eredu linealak ebazteko
erabiltzen den simplex algoritmoa aztertuko da.
A. Eranskinean espazioerdien eta multzo ganbilen deﬁnizio eta propietateak
modu zehatzagoan azalduak daude. 2. Kapituluan frogatuko da eredu lineal baten
soluzio optimoa soluzioen multzo ganbilaren mutur-puntu batean aurkitzen dela.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

18
1. Eredu linealak eta ebazpide graﬁkoa
OpenCourseWare, UPV/EHU

2. Kapitulua
Simplex metodoa
Bi edo hiru aldagai dituzten eredu linealak graﬁkoki ebatz daitezke. 1. Kapi-
tuluan bi aldagaiko eredu linealen ebazpen graﬁkoa aztertu dugu. Hiru aldagai
baino gehiago dituzten eredu linealak ebazteko ezin da metodo graﬁkoa erabili,
prozedura aljebraiko bat erabiltzea beharrezkoa gertatuko delarik. Programazio
linealeko problemen zenbakizko soluzioa kalkulatzeko simplex algoritmoa argi-
taratu zuen 1949. urtean George B. Dantzig-ek.
Programazio linealerako teoria eredu linealaren ondoko forman oinarrituko
da.
Forma estandarra. Eredu lineal bat forma estandarrean dagoela esaten da
baldin murrizketa guztiak
= modukoak badira eta b bektorearen osagai guztiak
eta ereduaren aldagai guztiak ez-negatiboak badira, hau da,
max(min)z = c
T x
hauen mende
Ax
= b
x
≥ 0
Helburua maximizatzea bada, ereduaren maximizatze-forma estandarra dau-
kagula esaten da, eta minimizatzea bada minimizatze-forma estandarra.
2.1
Aldaketak ereduan
Problema linealak ebazteko prozesuan lehenengo urratsa eredua forma estanda-
rrera pasatzea izango da. Eredu gehienak ez dira hasieratik forma estandarrean
19

20
2. Simplex metodoa
idatzita egoten; baina, helburu funtzioan, murrizketetan eta aldagaietan aldaketak
egin daitezke, forma estandarrera egokitzeko.
1. Helburu funtzioa.
z funtzioaren minimoa kalkulatzea −z funtzioaren maximoa kalkulatzearen
baliokidea da.
min z =
n
j=1
cjxj
⇐⇒
max (−z) =
n
j=1
−cjxj
Adibidez,
min z = 3x1 − 5x2
eta
max (−z) = −3x1 + 5x2 balioki-
deak dira;
z balioa minimo egingo duten x1 eta x2 aldagaien balio berberek
egingo dute
−z maximo, min z = − max (−z) beteko delarik.
2. Murrizketak.
(a) Eredu lineal baten murrizketa guztiak noranzko berean idatziak izan
daitezke ondokoa betetzen delako:
n
j=1
aijxj ≥ bi
⇐⇒
n
j=1
−aijxj ≤ −bi
Adibidez,
2x1 + 3x2 ≤ −2 ekuazioan desberdintzaren bi aldeak −1
balioaz biderkatuz gero,
−2x1 − 3x2 ≥ 2 lortuko da.
(b) Murrizketak berdintzaz idatziak izan daitezke.
n
j=1
aijxj ≤ bi
⇐⇒
n
j=1
aijxj + y = bi
n
j=1
aijxj ≥ bi
⇐⇒
n
j=1
aijxj − y = bi
Aurreko bi aldaketetan erabili den
y aldagaiak nasaitze-aldagaia izena
du; bi kasuetan
y aldagaia zero baino handiagoa edo berdina da.
Adibidez,
x1 − 4x2 ≤ 4 eta x1 − 4x2 + y = 4 murrizketak baliokideak
dira,
y aldagaia ez-negatiboa izanik.
OpenCourseWare, UPV/EHU

2.1. Aldaketak ereduan
21
(c) Berdintzaz betetzen den murrizketa oro bi murrizketen bidez adierazia
izan daiteke modu honetan:
n
j=1
aijxj = bi ⇐⇒
n
j=1
aijxj ≤ bi
eta
n
j=1
aijxj ≥ bi
Adibidez,
−2x1 + x2 = 2 murrizketa idaztearen baliokidea da ondoko
beste biak idaztea:
−2x1 + x2 ≤ 2 eta −2x1 + x2 ≥ 2.
3. Aldagaiak.
Aldagaiek ez-negatibotasunaren murrizketa betetzeko, aldaketa hauek era-
bili beharko dira.
• xj ≤ 0 bada, xj = −x
′
j aldagai-aldaketa egin daiteke, non x
′
j ≥ 0 den.
• xj aldagaia zeinuz murriztugabea bada, bi aldagai positiboren arteko
diferentzia moduan idatz daiteke horrela.
xj = x
′
j − x
′′
j ,
non
x
′
j , x
′′
j ≥ 0.
–
x′
j > x
′′
j bada, xj > 0 da.
–
x′
j < x
′′
j bada, xj < 0 da.
–
x′
j = x
′′
j bada, xj = 0 da.
Adibidea. Aurreko baliokidetasunak erabiliz ondoko eredu lineala maximizatze-
forma estandarrean idatziko dugu:
min
z = x1 + 2x2 + x3
hauen mende
x1 + x2 − x3 ≥ 2
x1 − 2x2 + 5x3 ≤ −1
x1 + x2 + x3 = 4
x1 ≥ 0 , x2 ≤ 0, x3 : murriztugabea
• Helburu funtzioa.
Maximizatze-forman honela jarriko dugu:
− max (−z) = −x1 − 2x2 − x3
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

22
2. Simplex metodoa
• Murrizketak.
Lehenengo murrizketan
x4 nasaitze-aldagaia kenduko dugu,
x1 + x2 − x3 − x4 = 2.
Bigarren murrizketan
x5 nasaitze-aldagaia gehituko dugu,
x1 − 2x2 + 5x3 + x5 = −1.
Desberdintzaren eskuineko atala positibo bihurtzeko, bi atalak
−1 balioaz
biderkatuko ditugu,
−x1 + 2x2 − 5x3 − x5 = 1.
Hirugarren murrizketa forma estandarrean emana dator:
x1 + x2 + x3 = 4.
• Aldagaiak.
x1 ≥ 0 aldagaiak ez-negatibotasunaren murrizketa betetzen du. x2 ≤ 0
aldagairako
x′
2 = −x2 aldaketa egingo dugu, eta murriztugabe dagoen x3
aldagairako
x3 = x′
3 − x
′′
3 aldaketa egingo dugu.
Aldaketa horiek guztiak egin eta gero, eredu lineala maximizatze-forma estanda-
rrean ondokoa da:
− max (−z) = −x1 + 2x
′
2 − x
′
3 + x
′′
3 + 0x4 + 0x5
hauen mende
x1 − x
′
2 − x
′
3 + x
′′
3 − x4 = 2
−x1 − 2x
′
2 − 5x
′
3 + 5x
′′
3 − x5 = 1
x1 − x
′
2 + x
′
3 − x
′′
3 = 4
x1, x
′
2, x
′
3, x
′′
3 , x4, x5 ≥ 0
2
Nasaitze-aldagaiak gehitzeak edo kentzeak ez du helburu funtzioa aldatu behar.
Hori dela eta, nasaitze-
aldagaiek helburu funtzioan zero koeﬁzientea izango dute.
OpenCourseWare, UPV/EHU

2.2. Eredu linealen soluzioak
23
2.2
Eredu linealen soluzioak
Ikusi dugun bezala, eredu lineal guztiak forma estandarrean idatziak izan daitezke.
Kapitulu honetan azalduko dugun simplex algoritmoa maximizatzeko diseinatua
izan da, eta horregatik, hemendik aurrera forma estandarra aipatzen dugunean,
maximizatze-forma estandarraz ari garela ulertu behar da; gogora dezagun forma
estandarrean b bektorearen osagaiak ez-negatiboak direla.
Izan bedi ondoko eredu lineala forma estandarrean:
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
non x eta c bektoreak
n × 1 tamainakoak diren, b bektorea m × 1 tamainakoa
eta A matrizea
m × n tamainakoa.
Demagun
m < n betetzen dela, eta A matrizearen heina m dela. Horrelako
sistemek inﬁnitu soluzio dituzte. Helburu funtzioari balio optimoa emango dion
soluzioa kalkulatzean datza problema.
Ikus ditzagun simplex metodoaren garapenean erabiliko diren deﬁnizio hauek.
1. deﬁnizioa. Ax
= b murrizketak betetzen dituen x bektorea eredurako
soluzioa dela esaten da.
2. deﬁnizioa. Problemarako soluzio den x bektorea, hau da, Ax
= b betetzen
duena, bideragarria dela esaten da baldin x
≥ 0 bada.
3. deﬁnizioa. A matrizearen
m zutabez osatutako B oinarri-matrize bat ema-
nik, xB oinarriko soluzioa dela esaten da baldin BxB = b betetzen badu.
Oinarrikoak ez diren aldagai guztiak
0 dira, xN = 0 (ikus A. Eranskina).
Hortaz, oinarriko soluzioak zeroren desberdinak diren
m osagai izango ditu
gehienez.
Gainera, xB bektorearen osagai guztiak ez-negatiboak badira, oinarriko so-
luzio bideragarria esaten zaio.
4. deﬁnizioa. Oinarriko soluzio bideragarri bat endekatua dela esaten da bal-
din oinarrikoa den aldagairen batek
0 balioa hartzen badu, hau da, 0 baino
handiagoak diren
m osagai baino gutxiago baditu. 0 baino handiagoak di-
ren
m osagai dituen oinarriko soluzio bideragarria ez-endekatua dela esaten
da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

24
2. Simplex metodoa
5. deﬁnizioa. Problema linealaren soluzio bideragarri guztien multzoari bi-
deragarritasun-eskualdea edo soluzio bideragarrien multzo ganbila esaten
zaio eta
F hizkiaren bidez adierazten da.
6. deﬁnizioa. Problema linealaren soluzio optimoa x
∗ notazioaz adierazten
da, eta helburu funtzioaren balio optimoa
z∗ = cT x∗ notazioaz.
7. deﬁnizioa. Problema lineala bornegabea dela esaten da helburu funtziora-
ko balio optimo ﬁniturik ez duenean, hau da,
z
∗ → +∞ edo z∗ → −∞
denean.
8. deﬁnizioa. Problema lineal batek soluzio optimo anizkoitza duela esaten da
soluzio optimo bat baino gehiago dituenean.
Hemendik aurrera oinarriari egiten zaizkion aipamenetan oinarri-matrizeari
buruz ari garela ulertuko da.
Adibidea. Har dezagun ondoko eredu lineala forma estandarrean.
max z = 3x1 + 6x2 + 5x3 + 4x4 + x5
hauen mende
2x1 + 8x2 + 3x3 + x4 + x5 = 6
x1 + x2 + 2x3 + x4
= 4
x1, x2, x3, x4, x5 ≥ 0
non
c
T = (3, 6, 5, 4, 1),
x
T = (x
1
, x2, x3, x4, x5)
A
=


2 8 3 1 1
1 1 2 1 0


,
b
=


6
4


A matrizearen heina 2 da, ezezagun kopurua baino txikiagoa. Hortaz, murriz-
keten sistemak inﬁnitu soluzio ditu. Hala ere, oinarriko soluzio kopurua ﬁnitua
da. Gogora dezagun oinarriko soluzioak kalkulatzeko B oinarri guztiak aukeratu
behar direla A matrizeko zutabeen artean 
(ikus A. Eranskina), eta honako sistema
ebatzi behar dela:
xB = B
−1b,
non xB oinarriko aldagaiez osatutako bektorea den. Hiru oinarri desberdine-
tarako soluzioak kalkulatuko ditugu.
OpenCourseWare, UPV/EHU

2.2. Eredu linealen soluzioak
25
1. A matrizeko lehenengo eta laugarren zutabeek osatutako matrizea aukera-
tuz lortzen den B matrizea ez-singularra da, eta, ondorioz, oinarria.
B
=


2 1
1 1


Horrela,
xB =


x1
x4


,
N
=


8 3 1
1 2 0


eta
xN =





x2
x3
x5





Orduan,
xB =


2 1
1 1


−1 

6
4


−


2 1
1 1


−1 

8 3 1
1 2 0







x2
x3
x5





(2.1)
x2, x3 eta x5 aldagai askeei balio posible guztiak emanez kalkulatzen dira
sistemaren inﬁnitu soluzioak. Kalkula ditzagun horietako bi.
• (2.1) ekuazioan x2 = 0, x3 = 0 eta x5 = 0 balioak hartzen baditugu,
kalkuluak eginez ondoko oinarriko soluzioa lortuko da:
xB =


1 −1
−1
2




6
4


=


2
2


Lortu dugun
x1 = 2, x4 = 2 oinarriko soluzioa bideragarria da, osagai
negatiborik ez duelako.
• (2.1) ekuazioan x2 = 0, x3 = 1 eta x5 = 0 balioak hartzen baditugu,
kalkuluak eginez ondoko soluzioa lortuko da:


x1
x4


=


2
2


−


7 1
1
−6 1 −1







0
1
0





=


1
1


Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

26
2. Simplex metodoa
Hau da, xT
= (1, 0, 1, 1, 0) bektorea soluzioa da. Bideragarria da osa-
gai negatiborik ez duelako. Dena den, ez da oinarriko soluzioa
x3 aldagai
askeak zeroren desberdina den balio bat hartzen duelako soluzio horretan.
2. A matrizeko lehenengo bi zutabeek osatutako B matrizea hartzen badugu,
B
=


2 8
1 1


oinarria da, eta aldagai aske guztiei zero balioa emanez, ondoko oinarriko
soluzioa lortuko da:
xB =


2 8
1 1


−1 

6
4


=


−
1
6
4
3
1
6
−
1
3




6
4


=


13
3
−
1
3


Kalkulatu dugun oinarriko soluzioa ez da bideragarria,
x2 = −
1
3 aldagaiak
balio negatiboa hartzen duelako.
3. A matrizeko hirugarren eta bosgarren zutabeek osatutako matrizea hartuz,
B
=


3 1
2 0


oinarria da eta aldagai aske guztiei zero balioa emanez, ondoko oinarriko
soluzioa lortuko da:
xB =


3 1
2 0


−1 

6
4


=


0
1
2
1 −
3
2




6
4


=


2
0


Soluzio hau bideragarria da. Horretaz gain, endekatua da oinarrikoa den
aldagai batek zero balioa hartzen duelako,
x5 = 0.
2
OpenCourseWare, UPV/EHU

2.3. Mutur-puntuak eta oinarriko soluzioak
27
2.3
Mutur-puntuak eta oinarriko soluzioak
Eredu linealen soluzio graﬁkoan ikusi dugun bezala, soluzio bideragarrien multzo
ganbileko mutur-puntu batean dago soluzio optimoa. Problemak soluzio optimo
anizkoitza badu, horietako bat gutxienez mutur-puntua izango da. Hiru aldagai
baino gehiago dituzten eredu linealak ebazteko ezin da interpretazio geometrikoa
erabili, eta problema aljebraikoki ebaztea beharrezkoa egiten da. Ondoko bi teo-
remetan geometriatik aljebrara igarotzea ahalbidetzen duten oinarrizko emaitzen
frogak azalduko dira. Frogetan multzo ganbilen ondoko emaitzak erabiltzen dira:
1. Forma estandarrean dagoen eredu lineal baten soluzio bideragarrien
F mul-
tzoa multzo ganbil eta itxia da.
2.
F multzo ganbileko x puntua mutur-puntua da baldin x = λx1 + (1 − λ)x2,
0 ≤ λi ≤ 1 betetzen duten F -ko bi puntu x1 eta x2 existitzen ez badira.
3. Multzo ganbil itxi eta bornatu bateko edozein x puntu mutur-puntuen kon-
binazio lineal ganbil orokortu moduan idatz daiteke, hau da,
x
=
q
i=1
λixi , 0 ≤ λi ≤ 1 ,
q
i=1
λi = 1
Mutur-puntu bakoitzari oinarriko soluzio bideragarri bat dagokiola, eta alde-
rantziz, oinarriko soluzio bideragarri bakoitzari mutur-
puntu bat dagokiola froga-
tuko da ondoko teoreman:
2.3.1 Teorema. Izan bedi forma estandarrean dagoen eredu lineala
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
x oinarriko soluzio bideragarria da baldin eta soilik baldin x bektorea
F -ko
mutur-puntua bada.
Froga.
⇒
x oinarriko soluzio bideragarria bada, froga dezagun mutur-puntua
dela.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

28
2. Simplex metodoa
Baldin x oinarriko soluzio bideragarria bada, zero baino handiagoak diren
m
osagai ditu gehienez. Notazioa errazteko asmoz, demagun lehenengo
m osagaiak
direla. Orduan,
x
=


xB
0


Jo dezagun existitzen direla
F multzoan bi puntu x1, x2, non
x
= λx1 + (1 − λ)x2 , 0 < λ < 1.
Izan bitez
x1
=


y1
y′
1


eta x2
=


y2
y′
2


non yi, ( i = 1, 2) bektoreen dimentsioa m × 1 den eta y
′
i, ( i = 1, 2) bekto-
reena
(n − m) × 1. Orduan, berdintza honetatik:


xB
0


= λ


y1
y′
1


+ (1 − λ)


y2
y′
2


beste hau ondorioztatzen da:
0
= λy
′
1 + (1 − λ)y
′
2.
y′
1, y
′
2 ≥ 0, λ > 0 eta 1 − λ > 0 direnez, y
′
1 = y
′
2 = 0 betetzen da. Hortaz,
x, x1 eta x2 soluzioak oinarrikoak direla ondorioztatzen da, eta oinarri berberari
dagozkionez, xB = x1 = x2 da.
Beraz, x konbinazio lineal ganbil murriztu moduan idaztea posible egingo
duten bideragarritasun eskualdeko x1 eta x2 bi puntu desberdin horiek ez dira
existitzen, eta, ondorioz, x mutur-puntua da.
⇐
x mutur-puntua bada, oinarriko soluzio bideragarria da.
Demagun x bektoreak
k osagai positibo dituela eta gainerakoak zero direla.
Orduan, murrizketen sistema modu honetan idatz daiteke:
k
i=1
xiai = b.
OpenCourseWare, UPV/EHU

2.3. Mutur-puntuak eta oinarriko soluzioak
29
x oinarriko soluzio bideragarria dela ikusteko, ai, i = 1, . . . , k, bektoreak linealki
independenteak direla frogatzea nahikoa da.
Kontrako kasuan,
α1, . . . , αk eskalarrak existituko lirateke, guztiak batera nulu
ez, non
k
i=1
αiai = 0.
Izan bedi
α
T = (α
1
, . . . , αk, 0, . . . , 0).
x1
= x + ǫα eta x2 = x − ǫα deﬁnituko ditugu. Posible da ǫ eskalarraren balioa
modu egokian aukeratzea, puntuak bideragarriak izan daitezen. Gainera, x1
= x2
betetzen da eta
x
=
1
2
x1
+
1
2
x2
.
Hortik ondorioztatuko litzateke x ez dela mutur-puntua.
2
Eredu lineal baten soluzio optimoa bideragarritasun eskualdeko mutur-puntu
batean aurkitzen dela frogatuko da ondoko teoreman.
2.3.2 Teorema. Izan bedi forma estandarrean dagoen eredu lineala
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Helburu funtzioaren balio optimoa
F multzoaren mutur-puntu batean aurkitzen
da.
Froga. Demagun mutur-puntua ez den x
∗ soluzio optimoa daukagula eta z∗ =
cT x∗ dela problemaren balio optimoa. Orduan,
F -ko x guztietarako ondokoa
betetzen da:
z = c
T x ≤ cT x∗ = z∗
Izan bedi
F -ko mutur-puntuen multzoa, {x1, . . . , xk}. F eskualdeko puntu
oro, baita eskualdekoa den x
∗ ere, mutur-puntuen konbinazio lineal ganbil mo-
duan idatzia izan daiteke.
x
∗ =
k
i=1
λixi , λi ≥ 0,
k
i=1
λi = 1
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

30
2. Simplex metodoa
Orduan,
z
∗ = cT x∗ = cT
k
i=1
λixi =
k
i=1
λic
T x
i
max
i
(c
T x
i) ≥ c
T x
i, i = 1, . . . , k betetzen denez,
z
∗ =
k
i=1
λic
T x
i ≤
k
i=1
λi max
i
(c
T x
i) = max
i
(c
T x
i)
k
i=1
λi = max
i
(c
T x
i) ≤ z
∗.
Ondorioz,
z
∗ = max
i
(c
T x
i) eta ondorioztatzen da optimoa mutur-puntu batean
lortzen dela.
2
Ondoko adibidean 2.3.1. Teoreman frogatutakoa betetzen dela egiaztatuko du-
gu. Eredu linealek oinarriko soluzio kopuru ﬁnitua dutela kontuan izanda, oina-
rriko soluzio bideragarri batetik hobea den beste batera joateko prozesu iteratiboa
eraiki daiteke, optimoa lortu arte.
Adibidea. Har dezagun ondoko eredu lineala:
max z = x1 + 2x2
hauen mende
−x1 + 4x2 ≤ 4
x1 − x2 ≤ 3
x1, x2 ≥ 0
Soluzioen eskualdea graﬁkoki adierazten badugu, mutur-puntuak kalkula ditzake-
gu.
OpenCourseWare, UPV/EHU

2.3. Mutur-puntuak eta oinarriko soluzioak
31
x1
x2
−x1 + 4x2 = 4
x1 − x2 = 3
A
B
C
O
max
F eskualdeak lau mutur-puntu ditu. Helburu funtzioa optimizazioaren noranz-
koan desplazatuz,
B mutur-puntua lortuko da.
O = (0, 0) , A = (0, 1) , B =
16
3
,
7
3
, C = (3, 0)
Oinarriko soluzioak aljebraikoki kalkulatzeko, eta bideragarritasun eskualde-
ko mutur-
puntu bakoitzari oinarriko soluzio bideragarri bat dagokiola, eta alderan-
tziz, oinarriko soluzio bideragarri bakoitzari mutur-
puntu bat dagokiola ikusteko,
eredua forma estandarrean jarri behar da,
x3 eta x4 nasaitze-aldagaiak gehituz.
max z = x1 + 2x2 + 0x3 + 0x4
hauen mende
−x1 + 4x2 +x3
= 4
x1 − x2
+x4 = 3
x1, x2, x3, x4 ≥ 0
Ekuazio-sistemaren koeﬁzienteen matrizeak lau zutabe ditu, eta ondorioz, au-
kera daitekeen oinarri kopuru maximoa
6 da; lau zutabe horiek konbinatuz, eta
beren artean linealki independente diren zutabeak binaka multzokatuz, lortuko
den multzo kopurua. Azter ditzagun
6 aukera horiek.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

32
2. Simplex metodoa
1. B
= (a1 a2) oinarria aukeratzea.
xB =


−1
4
1 −1


−1 

4
3


=


1
3
4
3
1
3
1
3




4
3


=


16
3
7
3


Oinarriko soluzio hau bideragarria da, eta graﬁkoko
B mutur-puntuari da-
gokio.
2. B
= (a1 a3) oinarria aukeratzea.
xB =


−1 1
1 0


−1 

4
3


=


0 1
1 1




4
3


=


3
7


Oinarriko soluzio hau bideragarria da, eta graﬁkoko
C mutur-puntuari da-
gokio.
3. B
= (a1 a4) oinarria aukeratzea.
xB =


−1 0
1 1


−1 

4
3


=


−1 0
1 1




4
3


=


−4
7


Oinarriko soluzio hau ez da bideragarria, osagai negatiboak dituelako. Hor-
taz, soluzio hau ez da graﬁkoko mutur-puntuekin egokitzen.
4. B
= (a2 a3) oinarria aukeratzea.
xB =


4 1
−1 0


−1 

4
3


=


0 −1
1
4




4
3


=


−3
16


Oinarriko soluzio hau ez da bideragarria, osagai negatiboak dituelako. Hor-
taz, soluzio hau ez da graﬁkoko mutur-puntuekin egokitzen.
5. B
= (a2 a4) oinarria aukeratzea.
xB =


4 0
−1 1


−1 

4
3


=


1
4
0
1
4
1




4
3


=


1
4


Oinarriko soluzio hau bideragarria da, eta graﬁkoko
A mutur-puntuari da-
gokio.
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
33
6. B
= (a3 a4) oinarria aukeratzea.
xB =


1 0
0 1


−1 

4
3


=


1 0
0 1




4
3


=


4
3


Oinarriko soluzio hau bideragarria da, eta graﬁkoko
O mutur-puntuari da-
gokio.
2
Aurreko adibidean A matrizeko lau zutabeen artean aukeratu ahal izan ditu-
gun bi bektoreko multzo guztiak oinarriaak dira, eta horietatik sei oinarriko solu-
zio kalkulatu dira. Kasuren batean gerta daiteke aukeratutako bektoreak linealki
mendekoak izatea, eta ondorioz, oinarria ez izatea, bektoreen multzo horretatik
ezingo delarik oinarriko soluzio bat kalkulatu. Aurreko sei oinarriko soluzio ho-
rien artetik bi, hirugarrena eta laugarrena, ez dagozkie inolako mutur-
punturi, ez
direlako bideragarriak.
2.4
Simplex metodoa
Eredu linealen soluzio graﬁkoan ikusi dugu, ereduak soluziorik baldin badu, solu-
zio optimoa mota desberdinetakoa izan daitekeela: soluzio optimo bakarra, aniz-
koitza eta bornegabea. Atal honen helburua soluzio mota bakoitzari dagozkion
ezaugarriak identiﬁkatzea da, eredu linealak ebazteko prozedura iteratibo bat erai-
ki ahal izateko: simplex algoritmoa.
2.4.1
Deﬁnizioak eta notazioa
Hasteko, programazio linealaren garapenean erabiliko dugun notazioa ﬁnkatuko
dugu. Izan bedi forma estandarrean dagoen eredu lineala.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Demagun A matrizeak
m errenkada linealki independente eta n zutabe di-
tuela,
n > m izanik. A matrizeko m zutabe aukeratuz osatutako B oinarri bat
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

34
2. Simplex metodoa
hartzen da eta gainerako zutabeek N matrizea osatuko dute. Notazioa errazteko
pentsatuko dugu oinarria osatzeko aukeratu diren A matrizeko zutabeak lehenen-
go
m zutabeak direla. c bektorean eta x bektorean oinarriko diren osagaiak cB
eta xB notazioaz adieraziko ditugu, hurrenez hurren; oinarriko ez diren osagaiak
adierazteko cN eta xN notazioa erabiliko dugu. Orduan, eredu lineala honela idatz
daiteke:
max z = (c
T
B | c
T
N )





xB
−
xN





hauen mende
(B | N)





xB
−
xN





= b
xB, xN ≥ 0
Kalkuluak eginez, eredua honela geratuko da:
max z = c
T
B xB + c
T
N xN
hauen mende
BxB + NxN = b
xB, xN ≥ 0
• Oinarriko soluzioa. xN = 0 eginez, sistema BxB = b bihurtzen da, eta
oinarriko soluzioa kalkulatzen da,
xB = B
−1b,
non
xB =








xB1
xB2
..
.
xBm








OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
35
• Helburu funtzioaren balioa. cT
B = (cB1, cB2, . . . , cBm) bada,
z = c
T
B xB = (cB1, cB2, . . . , cBm)








xB1
xB2
..
.
xBm








=
m
i=1
cBixBi.
• Koordenatu-bektorea. A matrizearen zutabe-bektoreak a1, a2, . . . , an badi-
ra, bektore bakoitzarentzat bere koordenatuak kalkula daitezke B oinarria-
rekiko. Horretarako, ondoko notazioa erabiliko da:
aj = y1ja1 + y2ja2 + · · · + ymjam =
m
i=1
yijai.
aj bektorearen koordenatu-bektorea ondokoa da:
yj =








y1j
y2j
..
.
ymj








Koordenatu-bektorea kalkulatzeko, aj = Byj sistema ebatzi behar da, hau
da,
yj = B
−1a
j .
• zj−cj balio adierazlearen kalkulua. Kalkulu honen beharra aurrerago azter-
tuko diren teoremetan agertzen da. aj bektore bakoitzarentzat zj eskalarra
kalkula daiteke modu honetan:
zj = c
T
B yj = cB1y1j + cB2y2j + · · · + cBmymj =
m
i=1
cBiyij.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

36
2. Simplex metodoa
Adibidea. Har dezagun forma estandarrean dagoen ondoko eredu lineala:
max z = 3x1 + 4x2 + 5x3 + 6x4
hauen mende
2x1 + x2 + x3 + 8x4 = 6
x1 + x2 + 2x3 + x4 = 4
x1, x2, x3, x4 ≥ 0
Koeﬁzienteen sistemako lehenengo bi zutabeek osatzen duten oinarria hartzen
badugu, eredu lineala matrize-forman idatz dezakegu, oinarrikoa den zatia oina-
rrikoa ez den zatitik bereiziz.
max z = (3, 4 | 5, 6)











x1
x2
−
x3
x4











hauen mende


2 1 1 8
1 1 2 1













x1
x2
−
x3
x4











=


6
4


x1, x2, x3, x4 ≥ 0
• Oinarriko soluzioa.
xB = B
−1b =


2 1
1 1


−1 

6
4


=


2
2


OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
37
• Helburu funtzioaren balioa. cT
B = (3, 4) izanik,
z = c
T
B xB = (3,
4)


2
2


= 14
• Oinarrikoa ez den bektore baten koordenatuak B oinarriarekiko, adibidez,
a4 bektorearenak.


8
1


= y14


2
1


+ y24


1
1


=


2 1
1 1




y14
y24


Sistema ebatziz koordenatuak lortzen dira.
y4
=


y14
y24


=


2 1
1 1


−1 

8
1


=


7
−6


• z4 − c4 balio adierazlearen kalkulua:
z4 − c4 = c
T
B y4 − c4 = (3,
4)


7
−6


− 6 = −3 − 6 = −9.
2
2.4.2
Oinarriko soluzio bideragarrien hobekuntza
Eredu linealen soluzio optimoa ereduaren murrizketek deﬁnitutako oinarriko so-
luzio bideragarrien artean aurkitzen da. Ondoko teoremak oinarriko soluzio bide-
ragarri batetik helburu funtzioaren balioa hobetuko duen beste oinarriko soluzio
bideragarri batera pasatzeko bete behar diren baldintzak ﬁnkatuko ditu. Oinarri-
ko soluzio bideragarri batetik abiatuz, simplex metodoak teorema hau erabiliko
du oinarriko soluzio bideragarri batetik alboko beste batera igarotzeko, helburu
funtzioaren balioa hobetzea ezinezkoa izango den arte.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

38
2. Simplex metodoa
2.4.1 Teorema. (Oinarriko soluzio bideragarri baten hobekuntza) Izan bedi ere-
du lineala forma estandarrean
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bedi A matrizetik aukeratutako B oinarria, eta izan bitez xB = B
−1b dago-
kion oinarriko soluzio bideragarria eta
z = cT
B xB helburu funtziorako balioa. A
matrizean oinarrikoa ez den eta
zj − cj < 0 duen aj bektore bat existitzen bada,
eta aj horrentzat yij, i = 1, . . . , m, koordenaturen bat positiboa bada, beste
∧
xB
oinarriko soluzio bideragarri bat existitzen da non
∧
z =
∧
c
T
B
∧
xB ≥ z = c
T
B xB .
Froga. Notazioa errazteko pentsatuko dugu B oinarria A matrizeko lehenen-
go
m bektoreek osatzen dutela, hau da, B = (a1 . . . ar . . . am). xB oinarriko
soluzio bideragarria bada, ereduaren murrizketak betetzen ditu:
xB1a1 + xB2a2 + · · · + xBmam = b =
m
i=1
xBiai.
(2.2)
Aurreko ekuazioan agertzen ez diren sistemako batugaiak zero dira, dagozkien
aldagaiak ez direlako oinarrikoak.
am+1, am+2, . . . , an bektoreak ez daude oinarrian, eta B oinarriko bektoreen
konbinazio lineal moduan idatz daitezke.
aj =
m
i=1
yijai , j = m + 1, . . . , n
(2.3)
aj = 0 da, j = m + 1, . . . , n; hortaz, yij osagairen bat zeroren desberdina
da. Demagun aj bektorean zeroren desberdina den osagaia yrj = 0 dela. (2.3)
ekuazioan
r. batugaia bereiziz
aj =
m
i=1
i=r
yijai + yrjar
(2.4)
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
39
r. batugaia aska daiteke eta ar bektorea a1, . . . , aj, . . . , am bektoreen konbina-
zio lineal moduan adierazi. 241. orrialdeko A.3.2 Teoreman ikusi dugun bezala,
B oinarriko ar bektorea aj bektoreaz ordezkatuz lortzen den
∧
B bektore-multzo
berria oinarria da.
∧
B= (a1 . . . aj . . . am).
Ikus dezagun nola kalkula daitekeen
∧
xB oinarriko soluzio berria. (2.4) ekua-
zioan ar askatuz, hau lortuko da:
ar =
1
yrj
aj −
m
i=1
i=r
yij
yrj
ai.
(2.2) ekuazioan
r. batugaia bereiziz, hau lortuko da:
m
i=1
i=r
xBiai + xBrar = b.
ar bektorea ordezkatuz,
m
i=1
i=r
xBiai + xBr[
1
yrj
aj −
m
i=1
i=r
yij
yrj
ai] = b.
Batugaiak berrantolatuz,
m
i=1
i=r
(xBi − xBr
yij
yrj
)ai +
xBr
yrj
aj = b.
Eredu linealaren murrizketak betetzen dituzten
m osagaiko multzo bat lortu
da
∧
B oinarrirako, eta ondorioz, oinarriko soluzio berria osatzen du.
∧
xB=





xBi − xBr
yij
yrj
xBr
yrj
i = r
i = r
(2.5)
∧
xB oinarriko soluzio berria zein baldintzatan den bideragarria aztertu behar da
orain. Bideragarria izan dadin, osagai guztiek zero baino handiagoak edo berdinak
izan behar dute, hau da,
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

40
2. Simplex metodoa
• r. osagairako,
∧
xBr=
xBr
yrj
≥ 0.
yrj = 0 eta xBr ≥ 0 direnez,
xBr
yrj
≥ 0 izateko, yrj > 0 bete behar da.
• Gainerakoetarako,
∧
xBi= xBi − xBr
yij
yrj
≥ 0, i = 1, . . . , m, i = r
xBi ≥ 0, xBr ≥ 0 eta yrj > 0 izanik, ondoko kasuak eman daitezke:
–
yij < 0 bada,
∧
xBi= xBi − xBr
yij
yrj
≥ 0 betetzen da.
–
yij = 0 bada,
∧
xBi= xBi − xBr
yij
yrj
= xBi ≥ 0 da.
–
yij > 0 bada,
∧
xBi= xBi − xBr
yij
yrj
≥ 0 izateko,
∧
xBi= xBi − xBr
yij
yrj
≥ 0 ⇐⇒
xBi
yij
−
xBr
yrj
≥ 0 ⇐⇒
xBi
yij
≥
xBr
yrj
baldintza bete behar da.
Baldintza guztiak kontuan izanik, oinarrian ordezkatua izango den ar bekto-
reak ondoko baldintza bete behar du:
xBr
yrj
= min
i
{
xBi
yij
/yij > 0}
(2.6)
Oraingoz, frogatu da (2.6) irizpidea betetzen duen ar bektorea ordezkatua izan
daitekeela oinarrian eta oinarriko soluzio bideragarri berri bat lortuko dela. Ikus
dezagun zein baldintzatan izango den
∧
xB soluzioa xB baino hobea, hau da, zein
baldintzatan beteko den ondokoa:
∧
z=
∧
c
T
B
∧
xB≥ c
T
B xB = z.
∧
z kalkulatuko dugu r. batugaia bereiziz,
∧
z=
m
i=1
∧
cBi
∧
xBi=
m
i=1
i=r
∧
cBi
∧
xBi +
∧
cBr
∧
xBr .
∧
cBi,
∧
cBr,
∧
xBi eta
∧
xBr balioak ordezkatuz,
∧
z=
m
i=1
i=r
cBi(xBi − xBr
yij
yrj
) + cj
xBr
yrj
= (∗)
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
41
i = r denean, ondokoa betetzen da:
cBr(xBr − xBr
yrj
yrj
) = 0.
Ondorioz, batukarian
i = r baldintza ken daiteke, eta honela geratuko da:
(∗) =
m
i=1
cBi(xBi − xBr
yij
yrj
) + cj
xBr
yrj
.
Kalkuluak eginez,
∧
z=
m
i=1
cBixBi −
xBr
yrj
m
i=1
cBiyij + cj
xBr
yrj
= z −
xBr
yrj
(zj − cj).
Hau ondoriozta daiteke:
∧
z= z −
xBr
yrj
(zj − cj)
(2.7)
Hortaz,
∧
z≥ z
⇐⇒
−
xBr
yrj
(zj − cj) ≥ 0 ⇐⇒
xBr
yrj
(zj − cj) ≤ 0.
xBr ≥ 0 eta yrj > 0 betetzen denez, zj − cj < 0 denean,
∧
z≥ z betetzen da.
Oinarrian ar bektorea ordezkatzera sartuko den aj bektoreari dagokion balio
adierazleak
zj − cj < 0 baldintza bete behar du. Ohikoa da balio adierazle negati-
boen artetik minimoa duen bektorea aukeratzea, oinarrian sartuko den ak bektorea
ondoko irizpidea betetzen duena izango delarik:
zk − ck = min
j
{zj − cj/zj − cj < 0}
(2.8)
2
2.4.3
Oinarri aldaketarako aukeraketa-erregelak
Aurreko teoreman frogatutako prozesuaren arabera, oinarri bat aukeratu eta da-
gozkion oinarriko soluzio bideragarria eta helburu funtziorako balioa kalkulatu
behar dira; ondoren, oinarriko bektore bat ordezkatzera sartuko den bektorea au-
keratu behar da oinarri berri bat lortzeko, eta dagokion soluzioa bideragarria eta
hobea izango dela ziurtatuz. Bektoreen aukeraketarako erregelak ondokoak dira.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

42
2. Simplex metodoa
• Oinarrira sartuko den bektorea aukeratzeko erregela. Ondoko erregela be-
tetzen duen ak bektorea sartuko da oinarrian:
zk − ck = min
j
{zj − cj/zj − cj < 0}
Soluzio berri bat kalkulatzean, helburu funtziorako balio berria,
∧
z≥ z, ho-
bea izango dela bermatzen du erregela honek.
• Oinarritik irtengo den bektorea aukeratzeko erregela. Oinarrian sartuko den
ak bektoreak ondoko erregela betetzen duen oinarriko ar bektorea ordezka-
tuko du:
xBr
yrk
= min
i
xBi
yik
/yik > 0
Soluzio berria,
∧
xB≥ 0, bideragarria izango dela bermatzen du erregela ho-
nek.
2.4.4
∧
xB eta
∧
z kalkulatzeko formulak
Oinarrira sartuko den bektorea eta oinarritik irtengo dena aukeratzeko ikusi di-
tugun erregelak kontuan hartuz, oinarriko soluzio bideragarri berria eta helburu
funtziorako balio berria kalkulatzeko (2.5) eta 
(2.7) formulak honela geratuko di-
ra:
• Soluzio berriaren kalkulua.
∧
xB=





xBi − xBr
yik
yrk
xBr
yrk
i = r
i = r
(2.9)
• Helburu funtziorako balio berriaren kalkulua.
∧
z= z −
xBr
yrk
(zk − ck)
(2.10)
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
43
Adibidea. Ondoko problema linealean aurreko teorema aplikatuko dugu.
max z = 4x1 + 5x2 + x3
hauen mende
x1 + x2 + x3 ≤ 8
−x1 − 2x2 + x3 ≤ −2
x1, x2, x3 ≥ 0
Hasteko, eredua forma estandarrean jarri behar da. Horretarako
x4 eta x5
nasaitze-aldagaiak gehitu ditugu eta b
≥ 0 bihurtuko dugu.
max z = 4x1 + 5x2 + x3 + 0x4 + 0x5
hauen mende
x1 + x2 + x3 +x4
= 8
x1 + 2x2 − x3
−x5 = 2
x1, x2, x3, x4, x5 ≥ 0
Oinarri bat aukeratuko dugu, koeﬁzienteen matrizeko lehenengo eta laugarren
zutabeek osatutakoa, adibidez. Dagokion oinarriko soluzioa kalkulatuko dugu.
xB = B
−1b =


1 1
1 0


−1 

8
2


=


0
1
1 −1




8
2


=


2
6


Soluzio hau bideragarria da, eta beraz, soluzioen eskualdekoa da. Helburu
funtzioaren balioa honakoa da:
z = c
T
B xB = (4, 0)


2
6


= 8.
Azter dezagun soluzio hori hobetzeko aukera ba ote dagoen.
Oinarrira sartuko den bektorearen aukeraketa. Aukera egiteko beharrez-
koa gertatzen da oinarrikoak ez diren a2, a3 eta a5 bektoreei dagozkien
z2 − c2,
z3 − c3 eta z5 − c5 balioak kalkulatzea.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

44
2. Simplex metodoa
• z2 − c2 balioaren kalkulua.
a2
=


1
2


; y2 = B−
1a
2
=


0
1
1 −1




1
2


=


2
−1


z2 − c2 = cT
B y2 − c2 = (4, 0)


2
−1


− 5 = 3 > 0.
• z3 − c3 balioaren kalkulua.
a3
=


1
−1


; y3 = B−
1a
3
=


0
1
1 −1




1
−1


=


−1
2


z3 − c3 = (4, 0)


−1
2


− 1 = −5 < 0 → soluzioa hobe daiteke.
• z5 − c5 balioaren kalkulua.
a5
=


0
−1


; y5 = B−
1a
5
=


0
1
1 −1




0
−1


=


−1
1


z5 − c5 = (4, 0)


−1
1


− 0 = −4 < 0 → soluzioa hobe daiteke.
Soluzioa hobetzeko bi aukera daude: a3 edo a5 oinarriratzea. Oinarrian sartu-
ko den bektorearen aukeraketarako erregela erabili behar da erabakia hartzeko.
zk − ck = min
j
{zj − cj / zj − cj < 0} =
= min{z3 − c3 = −5 , z5 − c5 = −4} = −5.
Hortaz, a3 bektorea oinarriratuko da.
Oinarritik irtengo den bektorearen aukeraketa. Oinarritik irtengo den bek-
torea aukeratzeko, y3 koordenatu-bektorea eta xB soluzio-bektorea hartu behar
dira kontuan.
y3
=


y13
y23


=


−1
2


,
xB =


xB1
xB2


=


2
6


OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
45
Irteera-erregela betetzen duen ar bektorea irtengo da oinarritik,
xBr
yr3
= min
i
xBi
yi3
/ yi3 > 0 = min
xB2
y23
=
6
2
= 3.
Oinarriko bigarren bektorea irtengo da, hau da, a4. Oinarria aldatuko da, baita
oinarriko soluzioa eta helburu funtziorako balioa ere.
• (2.9) formula erabiliz, soluzio berria kalkulatuko dugu.
∧
xB1= xB1 − xB2
y13
y23
= 2 − 6
−1
2
= 5.
∧
xB2=
xB2
y23
=
6
2
= 3.
• (2.10) formula erabiliz, helburu funtziorako balio berria kalkulatuko dugu.
∧
z= z −
xB2
y23
(z3 − c3) = 8 −
6
2
(−5) = 23.
∧
xB soluzio berria bideragarria da eta helburu funtzioaren balioa hobetu egiten
du. Teorema berriro ere aplika daiteke
zj − cj balio guztiak ez-negatiboak izango
diren arte. Baldintza hori betetzen denean, soluzioa optimoa izango da; baldintza
hori ondoko teoreman ematen da.
2
2.4.2 Teorema. (Optimaltasunerako baldintzak). Izan bedi problema lineala
forma estandarrean.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bedi A matrizean aukeratutako B oinarria eta izan bitez xB = B
−1b da-
gokion oinarriko soluzio bideragarria eta
z = cT
B xB helburu funtziorako balioa.
A matrizeko aj bektore guztietarako zj − cj balioak zero baino handiagoak edo
berdinak badira, xB problemarako oinarriko soluzio bideragarri optimoa da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

46
2. Simplex metodoa
2.4.5
Soluzio optimo bornegabea
Eredu linealen ebazpen graﬁkoan ikusi genuen bezala, zenbait kasutan helburu
funtzioaren balio optimoa ez da ﬁnitua, etengabe haz daitekeelarik. Ondoko teo-
remak ﬁnkatuko ditu soluzioa bornegabea izateko bete behar diren baldintzak.
2.4.3 Teorema. Izan bedi ondoko problema lineala forma estandarrean.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bedi A matrizean aukeratutako B oinarria, eta izan bitez xB = B
−1b
dagokion oinarriko soluzio bideragarria eta
z = cT
B xB helburu funtzioaren ba-
lioa. A matrizean
zk − ck < 0 duen ak bektore bat existitzen bada eta ak bektore
horrentzat
yik, i = 1, . . . , m, koordenatu guztiak zero baino txikiagoak edo berdi-
nak badira, ereduaren soluzioa bornegabea da.
Froga. Izan bedi xB oinarriko soluzio bideragarri bat. Soluzioa denez, problema-
ren murrizketak betetzen ditu:
xB1a1 + xB2a2 + · · · + xBmam = b.
zk − ck < 0 duen ak bektore bat existitzen bada, helburu funtzioaren balioa
hobe daiteke. Baina,
yik ≤ 0, i = 1, . . . , m, betetzen denez, oinarriko bektore bat
bera ere ezin da ordezkatua izan beste oinarriko soluzio bideragarri bat kalkula-
tzeko. Hala ere, soluzio bat kalkula daiteke (ez oinarrikoa) zeinarentzat
z helburu
funtzioaren balioak inﬁniturantz joko duen; helburu funtzioaren balioa bornega-
bea izango da.
Aurreko ekuazioaren ezkerreko atalean
θak gehitu eta kendu daiteke, θ edo-
zein balio erreal positibo delarik. Hau lortuko da:
xB1a1 + xB2a2 + · · · + xBmam − θak + θak = b.
m
i=1
xBiai − θak + θak = b
(2.11)
B oinarrian ez dagoen bektore bat da ak, eta oinarrikoen konbinazio lineal
moduan idatz daiteke:
ak =
m
i=1
yikai.
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
47
(2.11) ekuazioan, ak bektorearen ordez oinarrriko bektoreekiko bere adieraz-
pena idazten badugu, soluzioa honela adieraz daiteke:
m
i=1
xBiai − θ
m
i=1
yikai + θak = b.
Kalkuluak eginez,
m
i=1
(xBi − θyik)ai + θak = b.
Modu honetan lortutako bektoreak zero baino handiagoak diren
m osagai bai-
no gehiago izan ditzake, eta beraz, oinarrikoa ez den soluzioa da.
∧
x=























xB1 − θy1k
xB2 − θy2k
..
.
xBm − θymk
0
..
.
θ
..
.
0























(2.12)
Egiazta daiteke aurreko soluzioa bideragarria dela.
θ > 0 izanik, eta jakinda
xBi ≥ 0, yik ≤ 0, i = 1, . . . , m, direla, xBi − θyik ≥ 0, i = 1, . . . , m.
Helburu funtzioaren balioa soluzio horretan
∧
z=
m
i=1
cBi(xBi − θyik) + ckθ =
m
i=1
cBixBi − θ
m
i=1
cBiyik + ckθ =
= z − θzk + θck = z − θ(zk − ck)
da;
zk − ck < 0 denez,
∧
z balioa hazi egingo da θ balioaren arabera, eta proble-
maren soluzioa bornegabea izango da.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

48
2. Simplex metodoa
Adibidea. Ondoko problemaren soluzioa kalkula dezagun.
max z = −3x1 + 2x2
hauen mende
x1 − x2 ≤ 5
2x1 − 3x2 ≤ 10
x1, x2 ≥ 0
Forma estandarra ondokoa da:
max z = −3x1 + 2x2 + 0x3 + 0x4
hauen mende
x1
−x2 +x3
= 5
2x1 −3x2
+x4 = 10
x1, x2, x3, x4 ≥ 0
B
= (a3 a4) oinarria aukeratu eta dagokion oinarriko soluzioa kalkulatuko
dugu.
xB = B
−1b =


5
10


Soluzio hori bideragarria da, eta helburu funtzioaren balioa honakoa da:
z = c
T
B xB = (0, 0)


5
10


= 0.
Hobekuntzaren teorema aplikatuko dugu.
z1 − c1 eta z2 − c2 kalkulatuko ditugu.
• z1 − c1 balioaren kalkulua.
a1
=


1
2


; y1 = B−
1a
1
=


1 0
0 1




1
2


=


1
2


z1 − c1 = cT
B y1 − c1 = (0, 0)


1
2


− (−3) = 3.
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
49
• z2 − c2 balioaren kalkulua.
a2
=


−1
−3


; y2 = B−
1a
2
=


1 0
0 1




−1
−3


=


−1
−3


z2 − c2 = cT
B y2 − c2 = (0, 0)


−1
−3


− 2 = −2.
Aukeraketarako erregela aplikatuz, a2 bektorea oinarriratzea erabakitzen da.
min
j
{ zj − cj / zj − cj < 0 } = min { z2 − c2 = −2 } = −2
Oinarritik irtengo den bektorea aukeratzerakoan, y2 bektorearen koordenatu
guztiak negatiboak direla ikusten dugu, eta ondorioz, oinarritik ezin da bektore bat
bera ere atera. 2.4.3. Teoremaren baldintzak betetzen dira eta soluzioa bornegabea
da.
Problemak jatorrizko bi aldagai besterik ez dituenez, graﬁkoki ebatz daiteke,
soluzioa bornegabea dela egiaztatzeko.
x1
x2
x1 − x2 = 5
2x1 − 3x2 = 10
max
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

50
2. Simplex metodoa
2.4.6
Soluzio optimo anizkoitza
Soluzio graﬁkoan ikusi dugu problemarako soluzio optimo bat baino gehiago exis-
titu daitekeela. Horrelakoetan, problemak soluzio optimo anizkoitza duela esaten
da. Soluzio mota hau aldagai bornatuetarako edo aldagai bornegabeetarako aurki
daiteke.
Ondoko teoremetan soluzio optimo anizkoitza egoteko baldintzak ﬁnkatuko
dira.
2.4.4 Teorema. Izan bedi ondoko eredu lineala forma estandarrean.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bedi A matrizean aukeratutako B oinarria eta izan bitez xB = B
−1b
dagokion oinarriko soluzio bideragarria eta
z = cT
B xB helburu funtzioaren ba-
lioa. A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen bada, xB soluzioa
optimoa da. Horretaz gain,
zk − ck = 0 duen, oinarrikoa ez den eta koordenatu-
ren bat
yik > 0, i = 1, . . . , m, duen ak bektore bat existitzen bada, soluzio optimo
anizkoitza existitzen da.
Froga. Izan bedi xB oinarriko soluzio bideragarri bat. A matrizeko aj bektore
guztietarako
zj − cj ≥ 0 betetzen denez, 2.4.2. Teorematik esan dezakegu xB
optimoa dela.
zk − ck = 0 duen, B oinarrikoa ez den eta koordenaturen bat yik > 0, i =
1, . . . , m, duen ak bektore bat existitzen bada, ak bektorea oinarrian sar daiteke
ondoko erregela betetzen duen oinarriko ar ordezkatzera:
xBr
yrk
= min
i
xBi
yik
/yik > 0
∧
B oinarri berri bat sortu da, baita
∧
xB oinarriko soluzio bideragarri berri bat
ere. Helburu funtzioaren balioa soluzio berrian ondokoa da:
∧
z= z −
xBr
yrk
(zk − ck) = z − 0 = z.
Ondorioz,
∧
xB ere optimoa da, helburu funtzioaren balioa xB soluzioarekin
lortutako berbera baita.
2
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
51
2.4.5 Teorema. Izan bedi ondoko eredu lineala forma estandarrean.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bitez x1
, . . . , xp ereduaren oinarriko soluzio bideragarri optimoak. Soluzio
horien konbinazio lineal ganbil orokortu guztiak ereduaren soluzio bideragarri
optimoak dira.
Froga. Izan bedi konbinazio lineal ganbil guztiek osatutako x bektorea.
x
=
p
i=1
µixi , µi ≥ 0,
i = 1, . . . , p ,
p
i=1
µi = 1
Froga dezagun x soluzioa, bideragarria eta optimoa dela.
1. x soluzioa da.
xi, i = 1, . . . , p, soluzioak direnez, Axi = b betetzen dute. Orduan,
Ax
= A(
p
i=1
µixi) =
p
i=1
µiAxi = b
p
i=1
µi = b.
Ondorioz, x soluzioa da.
2. x bideragarria da.
xi ≥ 0 eta µi ≥ 0, i = 1, . . . , p, betetzen direnez,
x
=
p
i=1
µixi ≥ 0.
Ondorioz, x bideragarria da.
3. x optimoa da.
xi, i = 1, . . . , p, optimoak dira, hau da, z
∗ = cT xi. Orduan,
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

52
2. Simplex metodoa
c
T x = cT
p
i=1
µixi =
p
i=1
µic
T x
i = z
∗
p
i=1
µi = z
∗ .
Ondorioz, x optimoa da.
2
2.4.4. Teoreman eta 2.4.5. Teoreman soluzio optimo anizkoitzerako baldin-
tzak ezartzen dira, aldagai bornatuetarako. Dena den, helburu funtzioari balio
bornatua emango dion soluzio optimo anizkoitza egon daiteke, aldagaien balio
bornegabeetarako. Ondoko teoreman ﬁnkatuko dira mota honetako soluziorako
baldintzak.
2.4.6 Teorema. Izan bedi ondoko problema lineala forma estandarrean.
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
Izan bedi A matrizean aukeratutako B oinarria, eta izan bitez xB = B
−1b
dagokion oinarriko soluzio bideragarria eta
z = cT
B xB helburu funtzioaren ba-
lioa. A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen bada, xB soluzioa
optimoa da. Oinarrikoa ez den eta
zk −ck = 0 duen ak bektore bat existitzen bada
eta bere
yik, i = 1, . . . , m, koordenatu guztiak zero baino txikiagoak edo berdinak
baditu, aldagaietarako balio bornegabeko soluzio optimo anizkoitza existitzen da.
Froga. Soluzioak 2.4.3. Teoreman bezala kalkulatzen dira, eta (2.12)-ren
modukoak dira (ikus 47. orrialdea).
Aipatutako teoreman bezala, helburu funtzioaren balioa honela kalkula daite-
ke:
∧
z= z − θ(zk − ck).
Kasu honetan
zk − ck = 0 denez,
∧
z= z betetzen da. Ondorioz, (2.12) ekuazio-
ko
∧
x soluzioaren moduko soluzio guztiak optimoak dira.
2
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
53
2.4.7
Hasierako oinarriko soluzio bideragarria
Forma estandarrean dagoen eredu lineal baten soluzio optimoa kalkulatzeko, oi-
narriko soluzio bideragarri batetik hasiko gara. Hasierako oinarritzat oinarri ka-
nonikoa hartzen bada, dagokion oinarriko soluzio bideragarria kalkulatzea erraza
izango da, B
−1 = B = I betetzen delako. Lehenengo soluzioa kalkulatu ondoren,
hobekuntzaren 2.4.1. Teorema aplikatuko dugu, optimaltasunare 2.4.2. Teorema-
ren baldintzak betetzen diren arte.
Lehenengo oinarri kanonikoa aukeratzeko ondoko bi kasuak gerta daitezke.
1. Kasua. Nasaitze-aldagaiez osatutako lehenengo oinarria.
Eredu lineala honelakoa bada:
max z = c
T x
hauen mende
Ax
≤ b
x
≥ 0
b
≥ 0 izanik, eredua forma estandarrean idazteko, nasaitze-aldagaiez osa-
tutako y bektorea gehituko dugu.
max z = c
T x + 0T y
hauen mende
Ax
+ Iy = b
x
, y ≥ 0
Horrela, B
= I oinarria aukeratu ahal izango dugu. B−
1 = I da eta oinarri
honetarako kalkuluak egingo ditugu.
• Soluzioaren kalkulua. Soluzioa bideragarria da.
xB = B
−1b = Ib = b ≥ 0.
• Helburu funtzioaren balioa. B oinarriko bektore guztiak nasaitze-
aldagaiei dagozkienez, cT
B = 0 betetzen da.
z = c
T
B xB = 0
T x
B = 0.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

54
2. Simplex metodoa
• A matrizeko aj bektoreetarako ondoko kalkuluak egin behar dira:
– Koordenatu-bektorea.
yj = B
−1a
j = Iaj = aj .
–
zj − cj balioaren kalkulua. B oinarriko bektore guztiak nasaitze-
aldagaiei dagozkienez, cT
B = 0 betetzen da.
zj − cj = c
T
B yj − cj = 0 − cj = −cj .
Hasierako oinarria kanonikoa aukeratzen bada, oinarri horri dagozkion kal-
kuluak problema linealaren parametroekin bat datozela ikusten da, eta hori
abantaila bat da.
Adibidea. Izan bedi ondoko eredu lineala:
max z = 2x1 + 3x2
hauen mende
3x1 + x2 ≤ 2
x1 − x2 ≤ 3
x1, x2 ≥ 0
Nasaitze-aldagaiak gehituz, ereduaren forma estandarra ondokoa da:
max z = 2x1 + 3x2 + 0x3 + 0x4
hauen mende
3x1 + x2 +x3
= 2
x1 − x2
+x4 = 3
x1, x2, x3, x4 ≥ 0
B
= (a3 a4) = I oinarri kanonikoa aukeratuko dugu.
• Soluzioaren kalkulua. Soluzioa bideragarria da.
xB = B
−1b = I


2
3


=


2
3


OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
55
• Helburu funtzioaren balioa.
z = c
T
B xB = (0, 0)


2
3


= 0
• yj koordenatu-bektoreen eta zj − cj balioen kalkulua A matrizeko
bektore guztietarako.
a1
=


3
1


→ y1 = B
−1a
1
=


1 0
0 1




3
1


=


3
1


z1 − c1 = c
T
B y1 − c1 = (0, 0)


3
1


− 2 = −2
a2
=


1
−1


→ y2 = B
−1a
2
=


1 0
0 1




1
−1


=


1
−1


z2 − c2 = c
T
B y2 − c2 = (0, 0)


1
−1


− 3 = −3
a3
=


1
0


→ y3 = B
−1a
3
=


1 0
0 1




1
0


=


1
0


z3 − c3 = c
T
B y3 − c3 = (0, 0)


1
0


− 0 = 0
a4
=


0
1


→ y4 = B
−1a
4
=


1 0
0 1




0
1


=


0
1


z4 − c4 = c
T
B y4 − c4 = (0, 0)


0
1


− 0 = 0
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

56
2. Simplex metodoa
2. kasua. Aldagai artiﬁzialak hasierako oinarrian.
Eredu linealean
= moduko murrizketak baldin badaude edo ≥ modukoak
b positiboa izanik, ezin izango da nasaitze-aldagaiekin oinarri kanonikoa
osatu. Arazo hau gainditzeko eta hasierako oinarri gisa kanonikoa aukera-
tu ahal izateko, aldagai laguntzaile batzuk erabiliko dira, aldagai artiﬁzial
izenez ezagutzen direnak. Ondoko adibidean ikusiko dugu.
Adibidea. Izan bedi ondoko eredu lineala:
max z = 3x1 + x2
hauen mende
x1 + x2 ≤ 3
x1 + 2x2 ≥ 2
x1, x2 ≥ 0
Ereduaren forma estandarra lortzeko lehenengo murrizketan
x3 nasaitze-
aldagaia gehitu eta bigarren murrizketan
x4 nasaitze-aldagaia kenduko dira.
max z = 3x1 + x2 + 0x3 + 0x4
hauen mende
x1 + x2 +x3
= 3
x1 + 2x2
−x4 = 2
x1, x2, x3, x4 ≥ 0
Koeﬁzienteen matrizean ezin da identitatea aukeratu. Oinarri kanonikoa
aukeratu ahal izateko, behar adina aldagai artiﬁzial gehituko dugu. Kasu
honetan, bigarren murrizketan
w1 ≥ 0 aldagai artiﬁziala gehitzen badugu,
murrizketak honela geratuko dira:
x1 + x2
+x3
= 3
x1 + 2x2
−x4 + w1 = 2
OpenCourseWare, UPV/EHU

2.4. Simplex metodoa
57
Horrela, B
= (a3 aw1) oinarri kanonikoa aukeratu ahal izango dugu eta
dagokion soluzioa bideragarria da.
xB = B
−1b =


1 0
0 1




3
2


=


3
2


Baina, xB ez da hasierako problemaren soluzioa, w1 = 2 > 0 delako, eta
ondorioz,
x1 + 2x2 − x4 = 2 murrizketa ez da betetzen.
2
2.4.8
Simplex metodoaren taula
Forma estandarrean dagoen eredu lineal baten soluzio optimoa kalkulatzerakoan,
oinarri bakoitzari dagozkion kalkuluak taula batean jasoko dira, Simplex meto-
doaren taula. Prozesua beti A matrizean oinarri kanonikoa aukeratuz hasten da.
Eredua forma estandarrean jartzean ezin bada nasaitze-aldagaiez osatutako oina-
rri kanonikoa aukeratu, behar adina aldagai artiﬁzial gehituko zaizkio ereduari.
Simplex metodoaren taula ondokoa da:
Jatorrizko aldagaiak
Aldagai laguntzaileak
x1
. . .
xn
xn+1
. . .
xj
. . .
z1 − c1
. . .
zn − cn zn+1 − cn+1 . . .
zj − cj
. . .
z
cB1
aB1
y11
. . .
y1n
y1,n+1
. . .
y1,j
. . .
xB1
..
.
..
.
..
.
..
.
..
.
cBi
aBi
yi1
. . .
yin
yi,n+1
. . .
yi,j
. . .
xBi
..
.
..
.
..
.
..
.
..
.
cBm
aBm
ym1
. . .
ymn
ym,n+1
. . .
ym,j
. . . xBm
• Ereduaren jatorrizko aldagaiak, x1, . . . , xn, eta ereduari gehitutako nasaitze-
aldagaiak eta aldagai artiﬁzialak,
xn+1, . . . , xj, . . . , taularen goikaldean ager-
tzen dira.
• Lehenengo zutabean oinarriko bektoreak daude: aB1, . . . , aBi, . . . , aBm.
• Gainerako zutabeetan ereduaren aj bektore guztien yj koordenatu-bektoreak
agertzen dira oinarriarekiko.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

58
2. Simplex metodoa
• Taulatik kanpo cT bektorearen cB1, . . . , cBi, . . . , cBm oinarriko osagaiak ager-
tzen dira.
• Taularen azken zutabean daude oinarriko soluzio bideragarriaren osagaiak:
xB1, . . . , xBi, . . . , xBm.
• Lehenengo errenkadan daude zj − cj balioak. Balio horiei balio adierazle
deitzen zaie, eta errenkadari adierazleen errenkada. Errenkadako azken
balioa,
z, helburu funtzioaren balioa da.
Adibidea. Har dezagun 54. orrialdeko adibideko eredua forma estandarrean.
Oinarri kanonikoari dagokion bere simplex taula ondokoa da:
x1
x2
x3
x4
−2
−3
0
0
0
0 a3
3
1
1
0
2
0 a4
1
−1
0
1
3
2
Aurreko adibidean bezala, hasierako oinarri kanonikoan nasaitze-aldagaiak
besterik ez badaude, simplex metodoaren taula B oinarriarekiko honela idatz dai-
teke:
x1 x2 . . . xn
xn+1 xn+2 . . . xn+m
cT
B B
−1A − cT
cT
B B
−1
cT
B xB
cB
B
B
−1A
B
−1
xB
Hasierako taulan B
−1 = I da. Dena den, oinarria edozein dela ere, hasiera-
ko taulan identitate matrizeari dagozkion zutabeetan aurkitzen da B
−1, simplex
metodoaren edozein iteraziotan. Aurreko adibidean bezala, lehenengo oinarria
nasaitze-aldagaiez osaturik badago, aurreko taulan adierazitako lekuan agertuko
da B
−1. Aldiz, lehenengo oinarrian aldagai artiﬁzialak baldin badaude, B−1 zu-
tabeen kokapena identiﬁkatu egin beharko da.
OpenCourseWare, UPV/EHU

2.5. Zigortze-metodoa
59
2.5
Zigortze-metodoa
Ereduaren forma estandarrean, hasierako oinarri kanonikoa aukeratu ezin den ka-
suetan erabili behar da metodo hau. 56. orrialdeko adibidean ikusi dugun bezala,
arazoari aurre egiteko aldagai artiﬁzialak gehituko dira.
Murrizketetan aldagai artiﬁzialak gehitzeak jatorrizko problemaren formula-
zioa aldatu egiten du. Aldagai artiﬁzialak dituen problemaren soluzioa ez da ja-
torrizko problemaren soluzio izango aldagai artiﬁzialen batek zero baino balio
handiago bat hartzen badu. Oinarri optimoan aldagai artiﬁzialen agerpena ekidi-
teko, beharrezkoa da helburu funtzioa zigortzea. Zigortze honek ziurtatu behar du
helburu funtzioaren balioa neurri handi batean kaltetua izango dela aldagai artiﬁ-
zialen batek balio positiboa hartzen badu.
Adibidea. Izan bedi ondoko eredu lineala.
max z = −5x1 + 6x2 + 7x3
hauen mende
2x1 + 10x2 − 6x3 ≥ 30
5
2
x1 − 3x2 + 5x3 ≤ 10
2x1 + 2x2 + 2x3 = 5
x1, x2, x3 ≥ 0
Identitate matrizea lortzeko behar diren aldagai artiﬁzialak gehitu eta helburu
funtzioa zigortu ondoren, lortuko den forma estandarra ondokoa da:
max z = −5x1 + 6x2 + 7x3 + 0x4 + 0x5 − Mw1 − Mw2
hauen mende
2x1 + 10x2 − 6x3 −x4
+w1
= 30
5
2 x1 − 3x2 + 5x3
+x5
= 10
2x1 + 2x2 + 2x3
+w2
= 5
x1, x2, x3, x4, x5, w1, w2 ≥ 0
B
= I lortzeko, bi aldagai artiﬁzial gehitu ditugu, w1 eta w2, eta helburu fun-
tzioa zigortu dugu positiboa eta behar bezain handia izango den
M balio batez.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

60
2. Simplex metodoa
Zigortze-metodoa aplikatzeak esan nahi du hasierako oinarri kanonikoa lortze-
ko, aldagai artiﬁzialak behar izan direla, B
= (aw
1
a5 aw
2 ), eta helburu funtzioa
zigortu dela. Oinarrian aldagai artiﬁzialak daudenez, adierazleen errenkada kal-
kulatzeko, cT
B = (−M, 0, −M ) dela kontuan izan behar da.
Adibide honetarako, simplex metodoaren taula ondokoa da:
x1
x2
x3
x4
x5 w1 w2
−4M + 5 −12M − 6 4M − 7
M
0
0
0 −35M
−M aw1
2
10
−6
−1
0
1
0
30
0
a5
5
2
−3
5
0
1
0
0
10
−M aw2
2
2
2
0
0
0
1
5
2
2.6
Simplex algoritmoa
Har dezagun maximizatze-forma estandarrean idatzitako problema lineal bat, ha-
sierako B
= I oinarria lortzeko behar izan diren aldagai artiﬁzial guztiekin. Sim-
plex algoritmoaren urratsak ondokoak dira.
1. urratsa. Hasierako taula eraiki.
2. urratsa.
• zj − cj < 0 existitzen bada, soluzioa hobe daiteke. 4. urratsera joan.
• A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen bada, 3.
urratsera joan.
3. urratsa.
• Balio positiboa duen aldagai artiﬁzialen bat existitzen bada1, proble-
ma bideraezina da. Amaitu.
1Balio positiboa duen aldagai artiﬁzialik ez bada existitzen, baina oinarrian zero balioa duen al-
dagai artiﬁzialen bat baldin badago, bi kasu gerta daitezke:
 soluzioa endekatua izatea edo ekuazio
erredundanteak egotea (ikus adibideak 82. orrialdean).
OpenCourseWare, UPV/EHU

2.6. Simplex algoritmoa
61
• Oinarrian aldagai artiﬁzialik ez badago, taulako xB soluzioa optimoa
da.
* A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen da.
Baldin oinarriko ez diren aj bektore guztietarako zj − cj > 0
betetzen bada, xB soluzio optimo bakarra da. Amaitu.
* A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen da. A
matrizean oinarrikoa ez den eta
zk − ck = 0 duen ak bektore-
ren bat existitzen bada, eta bektore horrentzat
yik, i = 1, . . . , m,
koordenaturen bat zero baino handiagoa bada, beste oinarriko
soluzio bideragarri bat kalkula daiteke. Problemak soluzio op-
timo anizkoitza du. 5. urratsera joan.
* A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen da. A
matrizean oinarrikoa ez den eta
zk − ck = 0 duen ak bektoreren
bat existitzen bada, eta bektore horrentzat
yik ≤ 0 betetzen bada
i = 1, . . . , m, problemak soluzio optimo anizkoitza du, baina ez
da oinarriko soluzioa. Amaitu.
4. urratsa.
• A matrizean zj − cj < 0 duen aj bektoreren bat existitzen bada eta
yj koordenatu-bektorean ez badago osagai positiborik, soluzioa bor-
negabea da. Amaitu.
• A matrizean zj − cj < 0 duen aj bektoreren bat existitzen bada eta yj
koordenatu-bektorean zero baino handiagoa den osagairen bat badu,
5. urratsera joan.
5. urratsa. Oinarrian ondoko erregelak betetzen dituzten ak eta ar bektoreak
sartu eta irtengo dira, hurrenez hurren.
• Sartuko den ak bektoreak hau betetzen du:
zk − ck = min
j
{zj − cj/zj − cj ≤ 0}
k. zutabea pibot-zutabea da.
• Irtengo den ar bektoreak hau betetzen du:
xBr
yrk
= min
i
xBi
yik
/yik > 0
r. errenkada pibot-errenkada da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

62
2. Simplex metodoa
Sartuko den bektoreari dagokion zutabean eta irtengo den bektoreari dago-
kion errenkadan dagoen
yrk koordenatuari pibot esaten zaio.
6. urratsa. Hurrengo taula kalkulatu.
• Taularen lehenengo zutabean oinarri berriko bektoreak kokatu.
• Taula berriko r. errenkada kalkulatzeko, aurreko taulako r. errenka-
dako osagaiak, pibot-errenkadakoak,
yrk pibot balioaz zatituz kalkula-
tuko da.
• Gainerako errenkadak kalkulatzeko, errenkada bakoitzerako biderka-
tzaile bat deﬁnituko da lehenik.
*
i. errenkadarako biderkatzailea: mi =
yik
yrk
, i = 1, . . . , m, i = r.
* Balio adierazleen errenkadarako biderkatzailea:
m0 =
zk − ck
yrk
.
Errenkada berri bakoitza kalkulatzeko, aurreko taulako errenkadari
pibot-errenkada biderkatzaileaz biderkatu ondoren kenduko zaio.
Balio adierazleen errenkada biderkatzaileen bidezko kalkulua erabiliz
eguneratu beharrean, deﬁnizioa aplikatuz egin daiteke, hau da,
zj −
cj = c
T
B yj − cj kalkulatuz.
Taula berriko errenkada guztiak kalkulatuak izan direnean, 2. urratsera joan.
Problemak soluzio optimo anizkoitza duen kasuan, oinarri optimo berriak kal-
kulatuko dira dagoeneko kalkulatuak izan direnak errepikatuko diren arte.
2.7
Eredu linealen ebazpena
Atal honetan lau adibide ebatziko dira simplex algoritmoa erabiliz, eta lortutako
taulak interpretatuko dira lau soluzio mota desberdinetarako:
 soluzio optimo ba-
karra, problema bideraezina, soluzio optimo anizkoitza eta problema bornegabea.
OpenCourseWare, UPV/EHU

2.7. Eredu linealen ebazpena
63
Adibidea. (Soluzio optimo bakarra). Ondoko problema ebatziko dugu sim-
plex algoritmoa erabiliz.
max z = 6x1 + 4x2 + 5x3 + 5x4
hauen mende
x1 + x2 + x3 + x4 ≤ 3
2x1 + x2 + 4x3 + x4 ≤ 4
x1 + 2x2 − 2x3 + 3x4 ≤ 10
x1, x2, x3, x4 ≥ 0
Ereduaren forma estandarra honakoa da:
max z = 6x1 + 4x2 + 5x3 + 5x4 + 0x5 + 0x6 + 0x7
hauen mende
x1 + x2 + x3 + x4 +x5
= 3
2x1 + x2 + 4x3 + x4
+x6
= 4
x1 + 2x2 − 2x3 + 3x4
+x7 = 10
x1, x2, x3, x4, x5, x6, x7 ≥ 0
Hasierako taula B
= (a5 a6 a7) oinarriarekiko kalkulatuko dugu. Oinarria
kanonikoa izanik, 54. orrialdeko adibidean ikusi dugun bezala, oinarri horri da-
gozkion kalkuluak bat datoz ereduaren parametroekin, eta hasierako taulan jasoko
dira. Bigarren eta hirugarren tauletan jasoko dira soluzio optimora iristeko egin
behar izan diren simplex algoritmoaren bigarren eta hirugarren iterazioetan egin-
dako kaluluak. Pibot balioa laukitxo batean adierazita agertzen da eta errenkade-
tarako biderkatzaileak taulatik kanpo, eskuin aldean.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

64
2. Simplex metodoa
x1
x2
x3
x4
x5
x6
x7
−6
−4
−5 −5
0
0
0
0
0 a5
1
1
1
1
1
0
0
3 m1 =
y11
y21 =
1
2
0 a6
2
1
4
1
0
1
0
4
0 a7
1
2
−2
3
0
0
1 10 m3 =
y31
y21 =
1
2
0
−1
7 −2
0
3
0 12
0 a5
0
1
2
−1
1
2
1 −
1
2
0
1
6 a1
1
1
2
2
1
2
0
1
2
0
2
m2 =
y24
y14 = 1
0 a7
0
3
2
−4
5
2
0 −
1
2
1
8
m3 =
y34
y14 = 5
0
1
3
0
4
1
0 16
5 a4
0
1
−2
1
2
−1
0
2
6 a1
1
0
3
0 −1
1
0
1
0 a7
0
−1
1
0 −5
2
1
3
A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen denez, simplex
algoritmoaren iterazioak amaitu dira. Problemak soluzio optimo bakarra dauka.
x
∗
1 = 1, x
∗
2 = 0, x
∗
3 = 0, x
∗
4 = 2, x
∗
5 = 0, x
∗
6 = 0, x
∗
7 = 3,
z
∗ = 16
Iterazio bakoitzean egindako kalkuluen zehaztapenak ondokoak dira:
1. iterazioa
Hasierako taulan balio adierazle negatiboak daude, eta ondorioz, soluzioa ho-
be daiteke.
• Oinarrian sartuko den ak bektorea. zk − ck = min
j
{zj − cj/zj − cj ≤ 0}.
min{−6, −4, −5, −5} = −6 → a1 sartuko da.
Lehenengo taulako lehenengo zutabea pibot-zutabea da.
OpenCourseWare, UPV/EHU

2.7. Eredu linealen ebazpena
65
• Oinarritik irtengo den ar bektorea.
xBr
yr1
= min
i
xBi
yi1
/yi1 > 0 .
min
3
1
,
4
2
,
10
1
= min{3, 2, 10} = 2 → a6 irtengo da.
Lehenengo taulako bigarren errenkada pibot-errenkada da.
• Pibota: 2
Bigarren taula, hau da, B
= (a5 a1 a7) oinarri berriari dagokiona, kalkulatzeko
egin beharreko kalkuluak honakoak dira:
• Pibot-errenkada. Taula berriko bigarren errenkada berria kalkulatzeko,
hasierako taulako pibot-errenkada pibotaz zatitu behar da.
1
2
(2, 1, 4, 1, 0, 1, 0, 4) = (1,
1
2
, 2,
1
2
, 0,
1
2
, 0, 2)
• 1. errenkada. Biderkatzailea: m1 =
y11
y21 =
1
2 . Bigarren taulako lehenengo
errenkada kalkulatzeko, ondoko eragiketa egin behar da lehenengo taulako
errenkaden artean.
“lehenengo errenkada”
− “biderkatzailea” × “pibot-errenkada”
(1 , 1 , 1 , 1 , 1 , 0 , 0 , 3) −
1
2
(2 , 1 , 4 , 1 , 0 , 1 , 0 , 4) =
= (0 ,
1
2
, −1 ,
1
2
, 1 , −
1
2
, 0 , 1)
• 3. errenkada. Biderkatzailea: m3 =
y31
y21 =
1
2 . Bigarren taulako hirugarren
errenkada kalkulatzeko, ondoko eragiketa egin behar da lehenengo taulako
errenkaden artean.
“hirugarren errenkada”
− “biderkatzailea” × “pibot-errenkada”
(1 , 2 , −2 , 3 , 0 , 0 , 1 , 10) −
1
2
(2 , 1 , 4 , 1 , 0 , 1 , 0 , 4) =
= (0 ,
3
2
, −4 ,
5
2
, 0 , −
1
2
, 1 , 8)
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

66
2. Simplex metodoa
• zj − cj balio adierazleen errenkada. Biderkatzailea:
z1−c1
y21
= −
6
2 = −3.
Bigarren taulako adierazleen errenkada kalkulatzeko, ondoko eragiketa egin
behar da lehenengo taulako errenkaden artean.
“adierazleen errenkada”
− “biderkatzailea” × “pibot-errenkada”
(−6 , −4 , −5 , −5 , 0 , 0 , 0 , 0) − (−3)(2 , 1 , 4 , 1 , 0 , 1 , 0 , 4) =
= (0 , −1 , 7 , −2 , 0 , 3 , 0 , 12)
Balio adierazleen errenkada berria kalkulatzeko beste modu bat deﬁnizioa
aplikatuz egitea da, hau da, oinarri berriarekiko
zj − cj = cT
B yj − cj kalku-
latuz. Adibidez,
z1 − c1 = (0 , 6 , 0)





0
1
0





− 6 = 6 − 6 = 0
• Helburu funtzioaren balioa. Deﬁnizioa aplikatuko dugu bigarren taulan
dugun oinarri berriarekiko, hau da,
z = c
T
B xB = (0, 6, 0)





1
2
8





2. iterazioa
Bigarren taulan balio adierazle negatiboak existitzen dira, eta ondorioz, solu-
zioa hobe daiteke. Kalkuluak aurreko iterazioan bezala egiten dira.
• Sarrera-bektorea. min{−1, −2} = −2 → a4 bektorea sartuko da. Pibot-
zutabea: bigarren taulako laugarrena.
• Irteera-bektorea. min{
1
1
2
,
2
1
2
,
8
5
2
} = min{2, 4,
16
5 } = 2 → a5 bektorea irten-
go da. Pibot-errenkada: bigarren taulako lehenengoa.
• Pibot:
1
2
.
OpenCourseWare, UPV/EHU

2.7. Eredu linealen ebazpena
67
• Pibot-errenkada.
2(0 ,
1
2
, −1 ,
1
2
, 1 , −
1
2
, 0 , 1) = (0 , 1 , −2 , 1 , 2 , −1 , 0 , 2)
• 2. errenkada. Biderkatzailea: m2 =
y24
y14
= 1
(1 ,
1
2
, 2 ,
1
2
, 0 ,
1
2
, 0 , 2) − 1(0 ,
1
2
, −1 ,
1
2
, 1 , −
1
2
, 0 , 1) =
= (1 , 0 , 3 , 0 , −1 , 1 , 0 , 1)
• 3. errenkada. Biderkatzailea: m3 =
y34
y14
= 5
(0 ,
3
2
, −4 ,
5
2
, 0 , −
1
2
, 1 , 8) − 5(0 ,
1
2
, −1 ,
1
2
, 1 , −
1
2
, 0 , 1) =
= (0 , −1 , 1 , 0 , −5 , 2 , 1 , 3)
• Adierazleen errenkada. Biderkatzailea:
z4 − c4
y14
= −4
(0 , −1 , 7 , −2 , 0 , 3 , 0 , 12) + 4(0 ,
1
2
, −1 ,
1
2
, 1 , −
1
2
, 0 , 1) =
= (0 , 1 , 3 , 0 , 4 , 1 , 0 , 16)
2
Adibidea. (Problema bideraezina). Ondoko ereduari dagokion hasierako
taula 59. orrialdeko adibidean eraiki da.
max z = −5x1 + 6x2 + 7x3 + 0x4 + 0x5 − Mw1 − Mw2
hauen mende
2x1 + 10x2 − 6x3 −x4
+w1
= 30
5
2 x1 − 3x2 + 5x3
+x5
= 10
2x1 + 2x2 + 2x3
+w2 = 5
x1, x2, x3, x4, x5, w1, w2 ≥ 0
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

68
2. Simplex metodoa
Hasierako taula horretatik abiatuz, simplex algoritmoaren urratsak emango di-
tugu taula optimora iritsi arte. Hona hemen kalkuluak jasotzen dituzten taulak:
x1
x2
x3
x4
x5
w1
w2
−4M + 5 −12M − 6 4M − 7 M
0
0
0
−35M
−M aw1
2
10
−6 −1
0
1
0
30
5
0 a5
5
2
−3
5
0
1
0
0
10 −
3
2
−M aw2
2
2
2
0
0
0
1
5
8M + 11
0 16M − 1 M
0
0 6M + 3 −5M + 15
−M aw1
−8
0
−16 −1
0
1
−5
5
0 a5
11
2
0
8
0
1
0
3
2
35
2
6 a2
1
1
1
0
0
0
1
2
5
2
Azkenengo taulan
zj − cj ≥ 0 betetzen da A matrizeko aj bektore guztie-
tarako. Simplex algoritmoaren iterazioak amaitu dira, eta jatorrizko problema
bideraezina dela ondorioztatzen da, aldagai artiﬁzialak gehituz ebatzi den eredu
linealaren soluzio optimoan
w1 = 5 lortu delako.
2
Adibidea. (Soluzio optimo anizkoitza.) Ondoko eredu lineala ebatziko dugu.
min z = 3x1 + 6x2
hauen mende
x1 + 2x2 ≥ 4
x1 + x2 ≤ 5
3x1 + 4x2 ≥ 10
x1, x2 ≥ 0
Eredua maximizatze-forma estandarrean jarriko dugu. Gainera, beharrezkoak
diren aldagai artiﬁzialak gehitu eta helburu funtzioa zigortuko dugu. Eredua ho-
nela geratuko da:
OpenCourseWare, UPV/EHU

2.7. Eredu linealen ebazpena
69
max (−z) = −3x1 − 6x2 + 0x3 + 0x4 + 0x5 − Mw1 − Mw2
hauen mende
x1 +2x2 −x3
+w1
= 4
x1
+x2
+x4
= 5
3x1 +4x2
−x5
+w2 = 10
x1, x2, x3, x4, x5, w1, w2 ≥ 0
Simplex algoritmoaren taulak ondokoak dira:
x1
x2
x3
x4
x5
w1
w2
−4M + 3
−6M + 6
M
0
M
0
0
−14M
−M
aw1
1
2
−1
0
0
1
0
4
0 a4
1
1
0
1
0
0
0
5
1
2
−M
aw2
3
4
0
0
−1
0
1
10
2
−M
0 −2M + 3
0
M
3M − 3
0 −2M − 12
−6 a2
1
2
1
−
1
2
0
0
1
2
0
2 −
1
4
0 a4
1
2
0
1
2
1
0
−
1
2
0
3
1
4
−M
aw2
1
0
2
0
−1
−2
1
2
−
3
2
0
0
0
3
2
M
M
−
3
2
−15
−6 a2
3
4
1
0
0
−
1
4
0
1
4
5
2
3
2
0 a4
1
4
0
0
1
1
4
0
−
1
4
5
2
1
2
0 a3
1
2
0
1
0
−
1
2
−1
1
2
1
0
0
3
0
0
M
− 3
M
−12
−6 a2
0
1
−
3
2
0
1
2
3
2
−
1
2
1
0 a4
0
0
−
1
2
1
1
2
1
2
−
1
2
2
1
−3 a1
1
0
2
0
−1
−2
1
2
−2
Matrizeko bektore guztietarako
zj − cj ≥ 0 betetzen da azken taulan; ez dago
aldagai artiﬁzialik oinarri optimoan, eta ondorioz, taulan problemarako oinarriko
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

70
2. Simplex metodoa
soluzio bideragarri optimo bat lortu dugu:
x∗
1 = 2, x
∗
2 = 1, x
∗
3 = 0, x
∗
4 = 2,
x∗
5 = 0, z
∗ = 12. Soluzio hau graﬁkoko A puntuari dagokio.
Taula optimoan ikus daiteke a5 ez dela oinarriko bektorea, eta bere balio adie-
razlea
z5 − c5 = 0 dela. Horrek esan nahi du problema honek soluzio optimo
anizkoitza duela. Simplex algoritmoaren beste iterazio bat egin daiteke beste oi-
narriko soluzio bideragarri optimo bat kalkulatzeko. Horretarako, aurreko taula
optimoan a5 bektorea aukeratuko dugu oinarrian sartzeko. Irteera-bektorea auke-
ratzeko erregela aplikatuz, a2 bektorea ateratzea erabakiko da. Pibota
1
2 da, eta
taula berrirako kalkulu guztiak egin ondoren, lortuko den taula hau da:
x1
x2
x3
x4
x5
w1
w2
0
0
3
0
0 M − 3
M
−12
0
a5
0
2
−3
0
1
3 −1
2
0
a4
0
−1
1
1
0
−1
0
1
−3
a1
1
2
−1
0
0
1
0
4
Lortutako beste soluzio optimo bat honakoa da:
x∗
1 = 4, x
∗
2 = 0, x
∗
3 = 0,
x∗
4 = 1, x
∗
5 = 2, z
∗ = 12. Soluzio hau 71. orrialdeko irudiko B puntuari dagokio.
Taula berri horretan berriro ere soluzio optimo anizkoitzerako baldintzak be-
tetzen dira, hau da,
z2 − c2 = 0 da, a2 oinarrikoa ez den bektore bat izanik. a2
bektorea oinarrian sartuko bagenu, a5 atera beharko genuke, eta aurretik genuen
oinarri berberera bueltatuko ginateke. Hortaz, simplex algoritmoaren iterazioak
amaitu egin dira.
A eta B puntuak lotzen dituen segmentuko puntu guztiak ere problemaren
soluzio optimoak dira.
OpenCourseWare, UPV/EHU

2.7. Eredu linealen ebazpena
71
000
000
111
111
000
000
111
111
x1
x2
x1 + 2x2 = 4
x1 + x2 = 5
3x1 + 4x2 = 10
A
B
min
2
Adibidea. (Soluzio bornegabea.) Ebatz dezagun ondoko eredu lineala.
max z = x1 − 3x2
hauen mende
2x1 + 2x2 ≥ 4
−4x1 − 2x2 ≤ −6
x1, x2 ≥ 0
Forma estandarrean eta B
= I oinarri kanonikoa lortzeko behar diren aldagai
artiﬁzial guztiak gehitu ondoren, eredua honela geratuko da:
max z = x1 − 3x2 + 0x3 + 0x4 − Mw1 − Mw2
hauen mende
2x1 + 2x2 −x3
+w1
= 4
4x1 + 2x2
−x4
+w2 = 6
x1, x2, x3, x4, w1, w2 ≥ 0
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

72
2. Simplex metodoa
Hauek dira simplex algoritmoaren hiru iterazioetan egindako kalkulu guztiak.
x1
x2
x3
x4
w1
w2
−6M − 1
−4M + 3
M
M
0
0
−10M
−
M
aw1
2
2
−1
0
1
0
4
1
2
−
M
aw2
4
2
0
−1
0
1
6
0
−M +
7
2
M
−
1
2 M −
1
4
0
3
2 M +
1
4
−M +
3
2
−
M
aw1
0
1
−1
1
2
1
−
1
2
1
1
a1
1
1
2
0
−
1
4
0
1
4
3
2
1
2
0
0
7
2
−2
M
−
7
2
M
+ 2
−2
−3
a2
0
1
−1
1
2
1
−
1
2
1
1
a1
1
0
1
2
−
1
2
−
1
2
1
2
1
−1
0
4 −
1
2
0 M + 1
2
M
2
0
a4
0
2
−2
1
2
−1
2
1
a1
1
1 −
1
2
0
1
2
0
2
Azkenengo taulan ikus daiteke a3 bektorea ez dagoela oinarrian,
z3 − c3 < 0
dela eta
yi3 ≤ 0, i = 1, 2, direla. Soluzioa bornegabea da.
OpenCourseWare, UPV/EHU

2.8. Bi faseko metodoa
73
x1
x2
2x1 + 2x2 = 4
−4x1 − 2x2 = −6
max
Ebazpen graﬁkoan ikusten da helburu funtzioa etengabe desplaza daitekeela,
helburu funtzioaren balioak inﬁnituruntz joko duelarik.
2
2.8
Bi faseko metodoa
Metodo hau zigortze-metodoaren antzekoa da, biak erabiltzen baitira hasierako
B
= I oinarri kanonikoa lortzeko, ereduari aldagai artiﬁzialak gehitu behar zaiz-
kionean. Problemak soluziorik izatekotan, optimaltasunaren baldintzak beteko
dituen taula 
(eta oinarrian aldagai artiﬁzialik gabea) lortzea da helburua. Zigortze-
metodoan helburu funtzioa zigortu egiten da horretarako; bi faseko metodoan, al-
diz, lehenengo fase batean aldagai artiﬁzialen batura minimizatu egiten da. Hauek
dira bi faseko metodoan eman beharreko urratsak.
1. fasea. Lehenengo fase honetan, problema linealaren murrizketak hartuko
dira kontuan; baina, problemaren jatorrizko helburu funtzioa optimizatu
beharrean, aldagai artiﬁzialen batura minimizatuko da. Simplex algoritmoa
erabiltzen da lehen fase honetako eredua ebazteko, eta ondoko bi kasuak
gerta daitezke:
• Helburu funtzioaren balio optimoa zero baino handiagoa bada, jato-
rrizko problema lineala bideraezina da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

74
2. Simplex metodoa
• Kontrako kasuan, jatorrizko problema linealak badu soluziorik, eta
metodoaren bigarren fasean jarraitu behar da kalkulatzeko.
2. fasea. Bigarren fase honetan, optimizatuko den helburu funtzioa jatorrizko
problemarena da. Lehenengo fasean lortutako taula optimotik abiatu behar
da, eta balio adierazleen errenkada berria kalkulatu, hori baita helburu fun-
tzioa aldatzearen ondorioz taulan aldatuko den kalkulu bakarra. Ondoren,
simplex algoritmoaren iterazioekin jarraitu behar da optimaltasun baldin-
tzak betetzen diren arte.
Ondoren, bi faseko metodoaren bidez ebatzitako bi adibide aztertuko ditugu.
Adibidea. Ebatz dezagun ondoko problema lineala bi faseko metodoa erabi-
liz.
max z = 2x1 + 3x2 − 5x3
hauen mende
2x1 + 2x2 + 2x3 = 14
−2x1 + 5x2 − x3 ≤ −10
x1, x2, x3 ≥ 0
Forma estandarrean eta
w1 eta w2 aldagai artiﬁzialak gehitu ondoren, eredua
honela geratuko da:
max z = 2x1 + 3x2 − 5x3 + 0x4 + 0w1 + 0w2
hauen mende
2x1 + 2x2 + 2x3
+w1
= 14
2x1 − 5x2 + x3 −x4
+w2 = 10
x1, x2, x3, x4, w1, w2 ≥ 0
1. fasea. Eredu linealari gehitutako bi aldagai artiﬁzialen batura minimizatuko
dugu fase honetan, hau da,
min z′ = w1 + w2. Simplex algoritmoa erabili ahal
izateko, helburu funtzioa maximizatze-forman jarriko dugu.
OpenCourseWare, UPV/EHU

2.8. Bi faseko metodoa
75
max (−z′) = 0x1 + 0x2 + 0x3 + 0x4 − w1 − w2
hauen mende
2x1 + 2x2 + 2x3
+w1
= 14
2x1 − 5x2 + x3 −x4
+w2 = 10
x1, x2, x3, x4, w1, w2 ≥ 0
Simplex algoritmoaren taulak ondokoak dira:
x1
x2
x3
x4
w1
w2
−4
3 −3
1
0
0 −24
−1
aw1
2
2
2
0
1
0
14
1
−1
aw2
2
−5
1
−1
0
1
10
0
−7
−1
−1
0
2
−4
−1
aw1
0
7
1
1
1
−1
4
0
a1
1
−
5
2
1
2
−
1
2
0
1
2
5 −
5
14
0
0
0
0
1
1
0
0
a2
0
1
1
7
1
7
1
7
−
1
7
4
7
0
a1
1
0
6
7
−
1
7
5
14
1
7
45
7
A matrizeko bektore guztietarako
zj − cj ≥ 0 betetzen denez, lehenengo
faserako taula optimoa lortu da. Gainera,
z′∗ = 0 lortu denez, jatorrizko problema
linealak badu soluziorik. Bigarren fasera goaz.
2. fasea. Jatorrizko problema linealaren helburu funtzioa optimizatuko du-
gu:
max z = 2x1 + 3x2 − 5x3. Aurreko fasean lortutako taula optimoan balio
adierazleen errenkada eguneratuko dugu honela:
• z1 − c1 = cT
B y1 − c1 = (3 , 2)


0
1


− 2 = 0.
• z2 − c2 = cT
B y2 − c2 = (3 , 2)


1
0


− 3 = 0.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

76
2. Simplex metodoa
• z3 − c3 = c
T
B y3 − c3 = (3 , 2)


1
7
6
7


+ 5 =
50
7
.
• z4 − c4 = cT
B y4 − c4 = (3 , 2)


1
7
−
1
7


− 0 =
1
7
.
• z = cT
B xB = (3 , 2)


4
7
45
7


=
102
7
.
Bigarren faseko lehenengo taulan aldagai artiﬁzialei dagozkien zutabeak ez
dira agertuko, aldagai horiek ez daudelako helburu funtzioan. Balio adierazleen
errenkada eguneratu ondoren, honakoa da hasierako taula hori:
x1
x2
x3
x4
0
0
50
7
1
7
102
7
3 a2
0
1
1
7
1
7
4
7
2 a1
1
0
6
7
−
1
7
45
7
Hasierako taula horretan A matrizeko bektore guztietarako
zj − cj ≥ 0 be-
tetzen da, eta ondorioz, jatorrizko problema linealaren soluzio optimoa taulakoa
da.
x
∗
1 =
45
7
,
x
∗
2 =
4
7
,
x
∗
3 = 0,
x
∗
4 = 0,
z
∗ =
102
7
.
Gerta liteke bigarren fase honetan simplex algoritmoaren iterazio batzuk behar
izatea taula optimora iritsi baino lehen.
2
Adibidea. Bi faseko metodoa erabiliz 71. orrialdeko adibideko eredu lineala
ebatziko dugu.
max z = x1 − 3x2 + 0x3 + 0x4 + 0w1 + 0w2
hauen mende
2x1 + 2x2 −x3
+w1
= 4
4x1 + 2x2
−x4
+w2 = 6
x1, x2, x3, x4, w1, w2 ≥ 0
OpenCourseWare, UPV/EHU

2.8. Bi faseko metodoa
77
1. fasea. Helburu funtzioa:
min z′ = w1 + w2 → max(−z′) = −w1 − w2.
max(−z
′ ) = 0x
1
+ 0x2 + 0x3 + 0x4 − w1 − w2.
x1
x2
x3
x4
w1
w2
−6
−4
1
1
0
0 −10
−1
aw1
2
2
−1
0
1
0
4
1
2
−1
aw2
4
2
0
−1
0
1
6
0
−1
1 −
1
2
0
3
2
−1
−1
aw1
0
1
−1
1
2
1 −
1
2
1
0
a1
1
1
2
0 −
1
4
0
1
4
3
2
1
2
0
0
0
0
1
1
0
0
a2
0
1
−1
1
2
1 −
1
2
1
0
a1
1
0
1
2
−
1
2
−
1
2
1
2
1
2. fasea. Jatorrizko problemaren helburu funtzioa:
max z = x1 − 3x2. Au-
rreko faseko taula optimoan balio adierazleak eguneratuz,
x1
x2
x3
x4
0
0
7
2
−2
−2
−3
a2
0
1
−1
1
2
1
1 a1
1
0
1
2
−
1
2
1 −1
0
4
−
1
2
0
2
0 a4
0
2
−2
1
2
1 a1
1
1
−
1
2
0
2
Azkeneko taulan
z3 − c3 < 0 betetzen da, y3 bektorearen osagai guztiak ne-
gatiboak izanik. Hortaz, problema bornegabea da.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

78
2. Simplex metodoa
2.9
Simplex metodo berrikusia
Aurreko ataletan aztertu dugun simplex algoritmoan beharrezkoak direnak bai-
no kalkulu gehiago egiten dira eredu lineal baten soluzio optimoaren kalkuluan.
Beharrezkoak ez diren kalkuluak ekidinez sortu da simplex algoritmoaren berri-
kuspen bat den simplex metodo berrikusia.
Izan bedi eredu lineala forma estandarrean:
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
B oinarri bat eta xB oinarriko soluzio bideragarria emanik, soluzio hori ho-
betzeko
zj − cj = cT
B B
−1aj − cj balio adierazleak kalkulatuko dira. Oinarrian
sartuko da ondoko erregela betetzen duen ak bektorea:
zk − ck = min
j
{ zj − cj / zj − cj ≤ 0 }.
Oinarritik irtengo den bektorea aukeratzeko, ak bektorearen koordenatu-bek-
torea kalkulatzen da, hau da, yk = B
−1ak pibot-zutabea, eta koordenatu horiek
eta xB bektorearen osagaiak erabiliz, oinarritik irtengo den ar bektorea aukeratu-
ko da ondoko erregela aplikatuz:
xBr
yrk
= min
i
xBi
yik
/ yik > 0
.
Kalkulu horiek guztiak egin ahal izateko simplex algoritmoaren iterazio ba-
koitzean aldatzen den B
−1 ezagutzea beharrezkoa da. Horretaz gain, beharrez-
koak diren gainerako datuak eredu linealean bertan daude. Hortaz, honelako taula
murriztu batean jaso daitezke kalkuluak.
xn+1 xn+2 . . . xn+m
cT
B B
−1
cT
B xB
cB
B
B−
1
xB
OpenCourseWare, UPV/EHU

2.9. Simplex metodo berrikusia
79
Adibidea. Har dezagun 63. orrialdeko adibideko eredu lineala.
max z = 6x1 + 4x2 + 5x3 + 5x4 + 0x5 + 0x6 + 0x7
hauen mende
x1 + x2 + x3 + x4 +x5
= 3
2x1 + x2 + 4x3 + x4
+x6
= 4
x1 + 2x2 − 2x3 + 3x4
+x7 = 10
x1, x2, x3, x4, x5, x6, x7 ≥ 0
B
= (a5 a6 a7) oinarri kanonikorako hasierako taula osatzeko kalkuluak egin-
go ditugu.
B
=





1 0 0
0 1 0
0 0 1





,
N
=





1 1
1
1
2 1
4
1
1 2 −2 3





c
T
B = (0 , 0 , 0),
c
T
B B
−1 = (0, 0, 0),
c
T
N = (6 , 4 , 5 , 5)
xB = B
−1b =





1 0 0
0 1 0
0 0 1










3
4
10





=





3
4
10





Simplex metodo berrikusirako hasierako taula honakoa da:
x5
x6
x7
0
0
0
0
0 a5
1
0
0
3
0 a6
0
1
0
4
0 a7
0
0
1 10
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

80
2. Simplex metodoa
Oinarrikoak ez diren N
= (a1 a2 a3 a4) bektoreen balio adierazleak kalkula-
tuko ditugu, oinarrian sartuko den bektorea aukeratzeko.
c
T
B B
−1N − cT
N = (0, 0, 0)





1 1
1 1
2 1
4 1
1 2 −2 3





− (6, 4, 5, 5) = (−6, −4, −5, −5).
z1 − c1 = min{−6, −4, −5, −5} = −6 → a1 sartuko da.
Kalkula dezagun y1 pibot-zutabea.
y1
= B
−1a
1
=





1 0 0
0 1 0
0 0 1










1
2
1





=





1
2
1





Ondoko erregela betetzen duen ar bektorea irtengo da oinarritik.
xBr
yr1
= min
3
1
,
4
2
,
10
1
= 2 → a6 irtengo da.
Taulako bigarren errenkada pibot-errenkada da, eta pibota
2 da. Lehenengo
errenkadarako biderkatzailea
1
2 da, hirugarren errenkadarako
1
2 eta balio adieraz-
leen errenkadarako
−
6
2 . Kalkuluak eginez, taula berria honakoa da:
x5
x6
x7
0
3
0
12
0
a5
1
−
1
2
0
1
6
a1
0
1
2
0
2
0
a7
0
−
1
2
1
8
Orain, oinarria B
= (a5 a1 a7) da. N = (a2 a3 a4 a6) izanik, oinarrikoak ez
diren bektore horietarako balio adierazleak kalkulatuko ditugu.
OpenCourseWare, UPV/EHU

2.9. Simplex metodo berrikusia
81
c
T
B B
−1N − cT
N = (0, 3, 0)





1
1 1 0
1
4 1 1
2 −2 3 0





− (4, 5, 5, 0) = (−1, 7, −2, 3)
z4 − c4 = min{−1, −2} = −2 → a4 sartuko da.
Pibot-zutabea kalkulatuko dugu.
y4
= B
−1a
4
=





1 −
1
2
0
0
1
2
0
0 −
1
2
1










1
1
3





=





1
2
1
2
5
2





Ondoko erregela betetzen duen ar bektorea irtengo da oinarritik.
xBr
yr4
= min
1
1
2
,
2
1
2
,
8
5
2
= min 2, 4,
16
5
= 2 → a5 irtengo da.
Taulako lehenengo errenkada pibot-errenkada da, eta pibota
1
2 da.
Bigarren
errenkadarako biderkatzailea
1 da, hirugarren errenkadarako 5 eta balio adieraz-
leen errenkadarako
−4. Kalkuluak eginez taula berria honakoa da.
x5
x6
x7
4
1
0 16
5
a4
2 −1
0
2
6
a1
−1
1
0
1
0
a7
−5
2
1
3
Orain, oinarria B
= (a4 a1 a7) da. N = (a2 a3 a5 a6) izanik, oinarrikoak ez
diren bektore horietarako balio adierazleak kalkulatuko ditugu.
c
T
B B
−1N − cT
N = (4, 1, 0)





1
1 1 0
1
4 0 1
2 −2 0 0





− (4, 5, 0, 0) = (1, 3, 4, 1).
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

82
2. Simplex metodoa
Balio adierazle negatiborik ez dagoenez, soluzioa optimoa da. Gainera, baka-
rra da:
x∗
1 = 1, x
∗
2 = 0, x
∗
3 = 0, x
∗
4 = 2, x
∗
5 = 0, x
∗
6 = 0, x
∗
7 = 3, z
∗ = 16.
2
2.10
Oharrak
1. Biribiltze-erroreak. Simplex algoritmoaren iterazioetan egin beharreko kal-
kuluak eskuz egiten badira, ez dago biribiltzeko beharrik. Baina, konputagailuek
zatikiak zehaztasun aritmetiko ﬁnituko biribiltzeen bidez kalkulatzen dituztenez,
kasuren batean, simplex metodoaren bidez lortutako oinarriko soluzio bideragarri
optimoak problemaren murrizketak ez betetzea, edo beteta ere, soluzioa optimo
ez izatea gerta daiteke. Hori biribiltze-
erroreen pilaketagatik gertatzen da. Errorea
modu honetan ebaluatua izan daiteke. BxB = b bada, biribiltze-erroreak daude-
la ondoriozta daiteke. Errorea esanguratsua bada, zuzendua izan daiteke honela:
zuzenean B
−1 kalkulatu, taularen erroreak zuzendu eta iterazioekin jarraitu.
2. Aldagai artiﬁzialak oinarri optimoan. Gerta liteke oinarri optimoan alda-
gai artiﬁzialak zero balioarekin agertzea. Horrek bi egoera adieraz ditzake:
 eredu
linealean murrizketa erredundanteak daudela edo soluzioa endekatua dela. Ikus
ditzagun bi kasu horietarako adibide bana.
Adibidea. (Murrizketa erredundanteak). Har dezagun ondoko eredu linea-
la.
max z = x1 + 2x2 − x3
hauen mende
2x1 − x2 + x3 = 12
−x1 + 2x2 + x3 = 10
x1 + x2 + 2x3 = 22
x1, x2, x3 ≥ 0
w1, w2 eta w3 aldagai artiﬁzialak gehitu, helburu funtzioa zigortu eta simplex
algoritmoaren hiru iterazio egin ondoren, taula optimoa lortuko da.
OpenCourseWare, UPV/EHU

2.10. Oharrak
83
x1
x2
x3
w1
w2
w3
−2M − 1
−2M − 2
−4M + 1
0
0
0
−44M
−M
aw1
2
−1
1
1
0
0
12
1
−M
aw2
−1
2
1
0
1
0
10
−M
aw3
1
1
2
0
0
1
22
2
−6M
6M − 4
0
0
4M − 1
0 −4M − 10
−M
aw1
3
−3
0
1
−1
0
2
−1
a3
−1
2
1
0
1
0
10 −
1
3
−M
aw3
3
−3
0
0
−2
1
2
1
0
−4
0
2M
2M − 1
0
−10
1
a1
1
−1
0
1
3
−
1
3
0
2
3
−1
−1
a3
0
1
1
1
3
2
3
0
32
3
−M
aw3
0
0
0
−1
−1
1
0
0
0
0
4 2M + 4
3
2M +
5
3
0
98
3
1
a1
1
0
1
2
3
1
3
0
34
3
2
a2
0
1
1
1
3
2
3
0
32
3
−M
aw3
0
0
0
−1
−1
1
0
w3 aldagai artiﬁziala oinarri optimoan dago, baina zero balioa hartzen du. Ka-
su honetan, problemak ekuazio erredundanteak ditu. Eredu linealaren murrizketak
aztertzen baditugu, egiazta daiteke hirugarren murrizketa aurreko bien batura dela.
Eredutik hirugarren murrizketa kenduz gero, eredu linealak badu soluziorik.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

84
2. Simplex metodoa
Adibidea. (Soluzio endekatua). Izan bedi ondoko eredu lineala:
max z = x1 + x2 + 3x3
hauen mende
x1 + 5x2 + x3 ≤ 7
x1 − x2 + x3 = 5
1
2
x1 − 2x2 + x3 = 5
x1, x2, x3 ≥ 0
x4 nasaitze-aldagaia eta w1 eta w2 aldagai artiﬁzialak gehitu, helburu fun-
tzioa zigortu eta simplex algoritmoa aplikatuz, taula optimoa lortuko da.
x1
x2
x3
x4
w1
w2
−
3
2 M − 1
3M − 1 −2M − 3
0
0
0
−10M
0
a4
1
5
1
1
0
0
7
−M
aw1
1
−1
1
0
1
0
5
−M
aw2
1
2
−2
1
0
0
1
5
1
2 M + 2
M − 4
0
0
2M + 3
0
15
0
a4
0
6
0
1
−1
0
2
3
a3
1
−1
1
0
1
0
5
−M
aw2
−
1
2
−1
0
0
−1
1
0
Taula optimoan
w2 aldagai artiﬁziala oinarrian dagoela ikusten da. Oraingoan
ere, aurreko adibidean bezala, zero balioa hartzen du. Hala ere, kasu honetan
ereduak ez du murrizketa erredundanterik.
Oinarri aldaketa bat eginez, beste taula optimo hau lor daiteke. Bertan ikusten
den bezala, soluzio optimoa endekatua da.
x1
x2 x3 x4
w1
w2
4
0
0
0 7 + M −4 + M 15
0 a4 −3
0
0
1
−7
6
2
3 a3
3
2
0
1
0
2
−1
5
1 a2
1
2
1
0
0
1
−1
0
OpenCourseWare, UPV/EHU

2.10. Oharrak
85
2
3. Ziklatzearen arazoa. Simplex algoritmoan, oinarrian sartuko den bekto-
rea aukeratzerakoan, erregela bektore batek baino gehiagok betetzea gerta daiteke.
Berdinketa kasuan, bektore horien artean edozein aukeratuko dugu, erabaki honek
soluzio optimora iristeko egin beharreko iterazio kopuruan eragin nabarmena sor-
tuko ez duelarik.
Tamalez, ez da gauza bera gertatzen oinarritik irtengo den bektorearen aukera-
ketarekin. Irteera-
erregela bektore batek baino gehiagok betetzen badu, eta horien
arteko aukeraketa modu egokian egiten ez bada, ziklatzea gerta daiteke, hau da,
zenbait iterazioren ondoren, aurretik lortutako oinarri batera itzultzea, simplex al-
goritmoa etengabe ziklatzen geratuko delarik inoiz optimora iritsi gabe. Taulako
soluzioa endekatua denean eta irteera-
erregelan berdinketa zerorekin denean gerta
daiteke arazo hori2.
Badira ziklatze hori gerta ez dadin erabil daitezkeen erregelak, erregela lexi-
kograﬁkoak eta Bland-
en erregela, adibidez. Horiei esker, oinarritik irtengo den
aldagaia aukeratzen jakingo dugu inolako arazorik gabe.
4. Simplex algoritmoaren eraginkortasuna. Simplex algoritmoaren eragin-
kortasuna aztertzeko, ikerlanak egin izan dira, eta lortutako emaitzek diotenez,
soluzio optimora iristeko egin beharreko kalkulu kopurua eredu linealaren aldagai
kopuruaren mende baino murrizketa kopuruaren mende dagoela.
2Adibide bat ikus Linear programming and network ﬂows. M. S. Bazaraa et al. liburuan
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

86
2. Simplex metodoa
OpenCourseWare, UPV/EHU

3. Kapitulua
Dualtasuna
Programazio linealaren teoriaren garapenean, dualtasuna kontzepturik garrantzi-
tsuenetarikoa da, bai teorikoki eta bai ikuspuntu praktikotik ere. Eredu lineal bat
izanik, dagokion eredu duala idatzi ahal izango da beti. Ikusiko dugun bezala, bi
ereduetako bat ebatziz bietarako soluzioa lortuko da, ebatzitako ereduaren taula
optimoan dagokion eredu dualaren soluzio optimoa ere agertuko baita. Dualtasu-
na kontuan hartzea komenigarria da; hona hemen arrazoi batzuk.
1. Simplex algoritmoaren iterazio kopurua eredu linealak duen aldagai kopu-
ruaren mende baino murrizketen mende dagoela kontuan izanik, eta eredu
lineal bat ebazterakoan dagokion eredu dualaren soluzio optimoa ere lor-
tuko denez, ereduen artean ebatzia izango dena aukera daiteke bietarako
soluzioa lortzeko.
2. Dualtasunak problema linealaren interpretazio ekonomikoa ahalbidetzen du.
Ikusiko dugun bezala, eredu dualaren soluzioak eredu primalaren soluzioari
buruzko informazioa ematen du.
3. Dualtasunaren propietateak kontuan hartuz, algoritmo berri bat sortu da,
simplex dual algoritmoa, zenbait eredu lineal ebazteko simplex algoritmoa
baino eraginkorragoa dena. Gainera, algoritmo berri hori erabiliko da aurre-
rago aztertuko ditugun sentikortasunaren analisian eta programazio osoan.
3.1
Problema duala
3.1.1 Deﬁnizioa. (Maximizatze-forma simetrikoa) Eredu lineala maximizatze-
forma simetrikoan dagoela esaten da baldin
87

88
3. Dualtasuna
• Helburua maximizatzea bada
• Murrizketa guztiak ≤ modukoak badira
• Aldagai guztiak ez-negatiboak badira
Adibidea. Ondoko eredua maximizatze-forma simetrikoan idatziko dugu:
max z = x1 − 3x2 + x3
hauen mende
x1 + x2 + x3 ≥ 2
−x1 + 2x2 − x3 ≤ 3
x1 − x2 + 2x3 = −1
x1, x2, x3 ≥ 0
Maximizatze-forma simetrikoa honakoa da:
max z = x1 − 3x2 + x3
hauen mende
−x1 − x2 − x3 ≤ −2
−x1 + 2x2 − x3 ≤ 3
x1 − x2 + 2x3 ≤ −1
−x1 + x2 − 2x3 ≤ 1
x1, x2, x3 ≥ 0
2
3.1.2 Deﬁnizioa. (Minimizatze-forma simetrikoa) Eredu lineala minimizatze-
forma simetrikoan dagoela esaten da baldin
• Helburua minimizatzea bada
• Murrizketa guztiak ≥ modukoak badira
• Aldagai guztiak ez-negatiboak badira
OpenCourseWare, UPV/EHU

3.1. Problema duala
89
Adibidea. Har dezagun honako eredu lineala:
max z = x1 − x2
hauen mende
3x1 + 2x2 ≤ 1
x1 − 2x2 ≥ 3
x1, x2 ≥ 0
Minimizatze-forma simetrikoa honakoa da:
min (−z) = −x1 + x2
hauen mende
−3x1 − 2x2 ≥ −1
x1 − 2x2 ≥ 3
x1, x2 ≥ 0
2
3.1.1
Primal-dual erlazioa
Har dezagun maximizatze-forma simetrikoan dagoen eredu lineala.
max z = c
T x
hauen mende
Ax
≤ b
x
≥ 0
Eredu horri primal deituko diogu. Bere duala minimizatze-forma simetrikoan
dagoen ondoko eredu lineala da:
min G = b
T y
hauen mende
A
T y ≥ c
y
≥ 0
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

90
3. Dualtasuna
Adibidea. Har dezagun honako eredu lineala.
max z = 2x1 − x2 + 3x3
hauen mende
x1 − x2 + x3 ≤ 2
3x1 − x2 + 2x3 ≤ 1
x1, x2, x3 ≥ 0
Dagokion eredu duala honakoa da:
min G = 2y1 + y2
hauen mende
y1 + 3y2 ≥ 2
−y1 − y2 ≥ −1
y1 + 2y2 ≥ 3
y1, y2 ≥ 0
2
3.1.2
Eredu primalaren eta dualaren osagaiak
Eredu lineal bat, primala, eta dagokion eredu duala izanik, bi eredu horien osa-
gaien artean ondoko erlazioa dago.
• Eredu primalaren A matrizea m × n tamainakoa bada, eredu primalak m
murrizketa eta
n aldagai ditu. Eredu dualaren koeﬁziente teknologikoen
matrizea A
T da, eta ondorioz, eredu dualak n murrizketa eta m aldagai
izango ditu.
• b bektorea problema primalaren baliabide-bektorea da eta problema duala-
ren kostuen bektorea.
• c bektorea problema primalaren kostu-bektorea da eta problema dualaren
baliabide-bektorea.
• Problema primalak duen murrizketa kopurua eta problema dualak duen al-
dagai kopurua berdinak dira.
• Problema primalak duen aldagai kopurua eta problema dualak duen murriz-
keta kopurua berdinak dira.
OpenCourseWare, UPV/EHU

3.1. Problema duala
91
3.1.3
Dualtasuna. Kasu orokorra
Oro har, ereduaren murrizketak
≤, = edo ≥ modukoak izan daitezke. Dagokion
eredu duala kalkulatzeko, eredua forma simetrikoan idatzi eta primal-dual erla-
zioa erabil daiteke. Dena den, forma simetrikoan idatzi gabe 3.1. Taula erabiliz,
kalkula daiteke maximizatze-forma simetrikoan ez dagoen eredu baten duala.
Helburu funtzioa: max
⇐⇒ Helburu funtzioa: min
i. murrizketa ≤ bi modukoa ⇐⇒ i. aldagaia ≥ 0
i. murrizketa = bi modukoa ⇐⇒ i. aldagaia ez-murriztua
i. murrizketa ≥ bi modukoa ⇐⇒ i. aldagaia ≤ 0
i. aldagaia ≥ 0
⇐⇒ i. murrizketa ≥ bi modukoa
i. aldagaia ez-murriztua
⇐⇒ i. murrizketa = bi modukoa
i. aldagaia ≤ 0
⇐⇒ i. murrizketa ≤ bi modukoa
3.1. Taula: Primal-dual erlazioa
Atal honetan taulako erlazio batzuk frogatuko ditugu; gainerakoak modu be-
rean froga daitezke.
1. kasua. Helburu funtzioa maximizatze-forman duen eredu lineal batean mu-
rrizketak
≥ modukoak badira, eredu dualaren aldagaiak zero baino txikia-
goak edo berdinak dira (
≤ 0, taulako hirugarren errenkadan adierazten den
bezala). Hau da, eredu lineala:
max z = c
T x
hauen mende
Ax
≥ b
x
≥ 0
izanik, dagokion duala ondokoa da:
min G = b
T y
hauen mende
A
T y ≥ c
y
≤ 0
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

92
3. Dualtasuna
Froga. Hasteko, eredu primala maximizatze-forma simetrikoan idatziko
dugu.
max z = c
T x
hauen mende
−Ax ≤ −b
x
≥ 0
Aurreko 3.1.1. atalean emandako primal-dual erlazioa erabiliz, duala kal-
kula dezakegu.
min G = −b
T y
hauen mende
−A
T y ≥ cT
y
≥ 0
y
= −y aldagai-aldaketa eginez, honela geratuko da eredua:
min G = b
T y
hauen mende
A
T y ≥ cT
y
≤ 0
2
2. kasua. Eredu primalaren murrizketak
= modukoak badira, dualaren alda-
gaiak ez daude zeinuz murriztuak (ez-murriztuak, taulako bigarren errenka-
dan adierazten den bezala). Hau da, eredu lineala
max z = c
T x
hauen mende
Ax
= b
x
≥ 0
izanik, dagokion duala ondokoa da:
min G = b
T y
hauen mende
A
T y ≥ c
y
: ez-murriztua
OpenCourseWare, UPV/EHU

3.1. Problema duala
93
Froga. Idatz dezagun eredua maximizatze-forma simetrikoan.
max z = c
T x
hauen mende
Ax
≤ b
−Ax ≤ −b
x
≥ 0
Dagokion eredu duala honakoa da:
min G = (b
T , −bT )


u
v


hauen mende
(A
T , −AT )


u
v


≥ c
u
, v ≥ 0
u eta v bektoreek
m osagai dituztelarik. Eredu duala beste modu honetan
idatzia izan daiteke:
min G = b
T (u − v)
hauen mende
A
T (u − v) ≥ c
u
, v ≥ 0
y
= u − v aldagai-aldaketa eginez, honakoa lortuko da:
min G = b
T y
hauen mende
A
T y ≥ c
y
: ez-murriztua
y bektorearen osagaiak ez daude zeinuz murriztuta, osagai bakoitza bi al-
dagai positiboren kenketa delako.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

94
3. Dualtasuna
Adibidea. Izan bedi honako eredu primala.
max z = x1 − 4x2 − x3
hauen mende
x1 + x2 − x3 ≥ 4
2x1 + 3x2 − 5x3 ≤ 2
2x1 − x2 + 2x3 = 6
x1 ≤ 0, x2 ≥ 0, x3 : ez-murriztua
3.1. Taulako erlazioak erabiliz, dagokion duala kalkulatuko dugu.
min G = 4y1 + 2y2 + 6y3
hauen mende
y1 + 2y2 + 2y3 ≤ 1
y1 + 3y2 − y3 ≥ −4
−y1 − 5y2 + 2y3 = −1
y1 ≤ 0, y2 ≥ 0, y3 : ez-murriztua
2
3.2
Dualtasunerako teoremak
Atal honetan aztertuko ditugun teoremek problema primalaren, dualaren eta beren
soluzioen arteko erlazioak ezarriko dituzte. Teoremen enuntziatuak ereduen forma
primal-dual simetrikoetarako ematen dira.
Primala
Duala
max z = cT x
min G = bT y
hauen mende
hauen mende
Ax
≤ b
AT y
≥ c
x
≥ 0
y
≥ 0
3.2.1 Teorema. Problema dualaren duala problema primala da.
OpenCourseWare, UPV/EHU

3.2. Dualtasunerako teoremak
95
Froga. Har dezagun problema primala.
min G = b
T y
hauen mende
A
T y ≥ c
y
≥ 0
Problemaren duala kalkulatzeko, eredua maximizatze-forma simetrikoan ida-
tzi eta primal-dual erlazioa erabiliko dugu.
− max (−G) = −b
T y
hauen mende
−A
T y ≤ −c
y
≥ 0
Dagokion duala honakoa da:
− min (−z) = −c
T x
hauen mende
−Ax ≥ −b
x
≥ 0
Beste forma baliokide honetan jarriz gero, daukagun problema primala dela
ikusten dugu.
max z = c
T x
hauen mende
Ax
≤ b
x
≥ 0
2
Aurreko teorematik hau ondoriozta daiteke: eredu primalaren helburua mini-
mizatzea bada forma dual simetrikoan gertatzen den bezala, eredu dualaren hel-
burua maximizatzea izango dela. Hori hala izanik, helburua minimizatzea duen
eredu baten duala kalkulatzeko, 3.1. Taula erabil daiteke erlazioak eskuinetik ez-
kerrera irakurriz.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

96
3. Dualtasuna
Adibidea. Izan bedi honako eredu primala:
min z = x1 − 4x2 − x3
hauen mende
x1 + x2 − x3 ≥ 4
2x1 + 3x2 − 5x3 ≤ 2
2x1 − x2 + 2x3 = 6
x1 ≤ 0, x2 ≥ 0, x3 : ez-murriztua
3.1. Taula erabiliz, dagokion duala kalkulatuko dugu.
max G = 4y1 + 2y2 + 6y3
hauen mende
y1 + 2y2 + 2y3 ≥ 1
y1 + 3y2 − y3 ≤ −4
−y1 − 5y2 + 2y3 = −1
y1 ≥ 0, y2 ≤ 0, y3 : ez-murriztua
2
3.2.2 Teorema. (Dualtasun ahula) Izan bitez x eta y problema primalaren eta
dualaren soluzio bideragarriak, hurrenez hurren. Honakoa betetzen da:
z = c
T x ≤ bT y = G.
Froga.
x primalaren soluzio bideragarria denez, Ax
≤ b eta x ≥ 0 betetzen dira.
y dualaren soluzio bideragarria denez, A
T y ≥ c eta y ≥ 0 betetzen dira.
Ax
≤ b desberdintzaren bi atalak ezkerretik yT bektoreaz biderkatuz, eta
AT y
≥ c desberdintzarenak xT bektoreaz, hau daukagu:
y
T Ax ≤ yT b = bT y.
x
T AT y ≥ xT c = cT x.
xT AT y
= yT Ax denez, hau beteko da:
z = c
T x ≤ yT Ax ≤ bT y = G.
OpenCourseWare, UPV/EHU

3.2. Dualtasunerako teoremak
97
2
Aurreko teorematik hau ondoriozta daiteke: helburu primalaren balio maxi-
moa helburu dualaren balio minimorako behe-bornea da. Eta, alderantziz, helbu-
ru dualaren balio minimoa helburu primalaren balio maximorako goi-bornea da.
Datozen emaitzak aurreko teoremen ondorioak dira.
3.2.1 Korolarioa. x
∗ eta y∗ soluzio bideragarriek cT x∗ = bT y∗ betetzen badute,
x∗ eta y
∗ primalaren eta dualaren soluzio optimoak dira, hurrenez hurren.
Froga. Dualtasun ahularen teoremak ziurtatzen du x eta y soluzioetarako hona-
koa beteko dela:
c
T x ≤ bT y.
y∗ dualaren soluzioa hartzen badugu, cT x
≤ bT y∗ betetzen da. cT x∗ = bT y∗
betetzen denez, problema primalaren edozein x soluziotarako hau beteko da:
c
T x ≤ cT x∗.
Hortik ondoriozta daiteke x
∗ problema primalaren soluzio optimoa dela.
Modu berean, eta b
T y∗ = cT x∗ ≤ bT y betetzen denez, problema dualaren
edozein y soluziotarako hau beteko da:
b
T y∗ ≤ bT y.
Hortik ondoriozta daiteke y
∗ problema dualaren soluzio optimoa dela.
2
3.2.2 Korolarioa. Problema primala bideragarria eta bornegabea bada, duala
bideraezina da.
Froga. Edozein x eta y soluziok cT x
≤ bT y betetzen dutela kontuan izanik,
helburu primala bornegabea bada, ez da existitzen problema primalaren goi-borne
izango den dualaren y soluziorik.
Modu berean ondorioztatuko da ondoko emaitza.
3.2.3 Korolarioa. Problema duala bideragarria eta bornegabea bada, primala
bideraezina da.
Problema primala bideraezina bada, duala bideraezina edo bornegabea izan
daiteke. Eta, problema duala bideraezina bada, primala bideraezina edo bornega-
bea izan daiteke.
Adibidea. Honako problema primalerako eta dualerako 3.2.2. Korolarioa
betetzen dela ikus daiteke. Kasu honetan primala bornegabea da eta duala bide-
raezina.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

98
3. Dualtasuna
max z = 3x1 + 2x2
min G = 2y1 + 4y2
hauen mende
hauen mende
−2x1 + x2 ≤ 2
−2y1 + 2y2 ≥ 3
2x1 + x2 ≥ 4
y1 + y2 ≥ 2
x1, x2 ≥ 0
y1 ≥ 0, y2 ≤ 0
Problema primalaren ebazpen graﬁkoan bornegabea dela ikus daiteke.
x1
x2
−2x1 + x2 = 2
2x1 + x2 = 4
max
Dualaren bideragarritasun eskualdean ez dago punturik; bideraezina da.
y1
y2
−2y1 + 2y2 = 3
y1 + y2 = 2
OpenCourseWare, UPV/EHU

3.3. Osagarrizko nasaitasunaren baldintzak
99
2
3.2.3 Teorema. (Dualtasunaren funtsezko printzipioa) Problema primalaren x
∗
soluzio optimoa existitzen bada, problema dualaren y
∗ soluzio optimoa existitzen
da. Modu berean, problema dualaren y
∗ soluzio optimoa existitzen bada, pro-
blema primalaren x
∗ soluzio optimoa existitzen da. Bi kasuetan z∗ = cT x∗ =
bT y
∗ = G∗ betetzen da.
Adibidea. Har ditzagun ondoko problema primala eta duala:
max z = 2x1 + 3x2
min G = 2y1 + 3y2 + 5y3
hauen mende
hauen mende
x1 + x2 ≤ 2
y1 + 2y2 + y3 ≥ 2
2x1 − x2 ≤ 3
y1 − y2 + 3y3 ≥ 3
x1 + 3x2 ≤ 5
y1, y2, y3 ≥ 0
x1, x2 ≥ 0
Primalaren eta dualaren edozein bi soluzio hartuta
z ≤ G betetzen da. Adi-
bidez, xT
= (1, 1) primalaren soluzio bideragarria da murrizketak betetzen di-
tuelako, eta y
T = (1, 1, 1) dualaren soluzio bideragarria da; z = 5 ≤ 10 = G
betetzen da.
Problema primalaren eta dualaren soluzio optimoak hauek dira:
x
∗
T = (
1
2
,
3
2
),
y
∗
T = (
3
2
, 0,
1
2
).
Bi problemetarako helburu funtzioek balio bera hartuko dute soluzio opti-
moan,
z∗ =
11
2
= G∗.
2
3.3
Osagarrizko nasaitasunaren baldintzak
Osagarrizko nasaitasunaren baldintzei esker, primalaren soluzio optimotik abia-
tuz dualaren soluzio optimoa kalkula daiteke, eta alderantziz. Baldintza horiek
teorema honen ondorioak dira.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

100
3. Dualtasuna
3.3.1 Teorema. (Osagarrizko nasaitasunarena) x
∗ eta y∗ problema primalaren
eta dualaren soluzio bideragarriak izanik, hurrenez hurren, optimoak izango dira
baldin ondoko baldintza betetzen badute:
x
∗
T (AT y∗ − c) + y∗T (b − Ax∗) = 0.
Emaitza horren interpretaziotik lortuko dira osagarrizko nasaitasunaren bal-
dintzak. Gogora dezagun ereduak primal-dual forma simetrikoan daudela.
3.3.1
Osagarrizko nasaitasunaren baldintzen interpretazioa
x∗ eta y
∗ primalaren eta dualaren soluzio optimoak izanik, hurrenez hurren, bi
problemen murrizketak honela idatz daitezke:
b
− Ax
∗ ≥ 0.
A
T y∗ − c ≥ 0.
Bestalde, x
∗ eta y∗ primalaren eta dualaren soluzio optimoak osagai negati-
borik gabeko bektoreak dira. Ondorioz, aurreko desberdintzaren bi atalak y
∗
T eta
x∗T bektoreez ezkerretik biderkatzen baditugu, hurrenez hurren, desberdintzak
honela geratuko dira:
x
∗
T (AT y∗ − c) ≥ 0.
y
∗
T (b − Ax∗) ≥ 0.
Osagarrizko nasaitasunaren teoremak ziurtatzen du aurreko bi desberdintzen
ezkerreko atalen batura zero dela. Bi batugaiak zero baino handiagoak edo ber-
dinak direla kontuan izanik, ondoriozta daiteke biek zero izan behar dutela, hau
da,
x
∗
T (AT y∗ − c) = 0.
y
∗
T (b − Ax∗) = 0.
Aurreko bi ekuazioen arabera, bi biderkagai ez-negatiboren biderkadura zero
da; biderkagaietako bat ez bada zero, besteak izan beharko du. Horrela, proble-
ma baten soluzioa ezagututa beste problemaren soluzioa kalkulatzea ahalbidetuko
duten ondoko ondorioak lortuko dira.
OpenCourseWare, UPV/EHU

3.3. Osagarrizko nasaitasunaren baldintzak
101
1. Aldagai primal bat hertsiki positiboa bada, dagokion murrizketa duala ber-
dintzaz betetzen da; ez du nasaitze-aldagai positiborik behar, hau da,
x
∗ > 0 ⇒ AT y∗ − c = 0.
2. Primalaren murrizketa bat ez bada berdintzaz betetzen, dagokion aldagai
dualak zero balioa hartuko du, hau da,
Ax
∗ < b ⇒ y∗ = 0.
3. Aldagai dual bat hertsiki positiboa bada, dagokion murrizketa primala ber-
dintzaz betetzen da, hau da,
y
∗ > 0 ⇒ Ax∗ − b = 0.
4. Dualaren murrizketa bat ez bada berdintzaz betetzen, dagokion aldagai pri-
malak zero balioa hartuko du, hau da,
A
T y∗ > c ⇒ x∗ = 0.
Adibidea. Har dezagun ondoko problema lineala:
max z = 3x1 + x2 − 2x3
hauen mende
x1 + 2x2 + x3 ≤ 5
2x1 − x2 + 3x3 ≤ 4
x1, x2, x3 ≥ 0
Problemaren soluzio optimoa x
∗
T = (
13
5 ,
6
5 , 0) dela jakinda, osagarrizko na-
saitasunaren teorema erabiliko dugu dualaren soluzio optimoa kalkulatzeko. Pro-
blema duala honakoa da:
min G = 5y1 + 4y2
hauen mende
y1 + 2y2 ≥ 3
2y1 − y2 ≥ 1
y1 + 3y2 ≥ −2
y1, y2 ≥ 0
Nasaitze-aldagaiak kenduz, honela geratuko da:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

102
3. Dualtasuna
min G = 5y1 + 4y2 + 0y3 + 0y4 + 0y5
hauen mende
y1 + 2y2 −y3
= 3
2y1 − y2
−y4
= 1
y1 + 3y2
−y5 = −2
y1, y2, y3, y4, y5 ≥ 0
Osagarrizko nasaitasunaren teoremaren ondorioak erabiliz, problema dualaren
soluzio optimoa kalkulatuko dugu.
Primalaren aldagaiak
Dualaren murrizketak
x∗
1 =
13
5
> 0
⇒ y∗
1 + 2y
∗
2 = 3
⇒ y∗
3 = 0
x∗
2 =
6
5 > 0
⇒ 2y∗
1 − y
∗
2 = 1
⇒ y∗
4 = 0
x∗
3 = 0
⇒ y∗
1 + 3y
∗
2 − y
∗
5 = −2
Primalaren murrizketak
Dualaren aldagaiak
13
5 + 2 ×
6
5 = 5
⇒ y∗
1 aldagaiaren balioa kalkulatu
2 ×
13
5 −
6
5 = 4
⇒ y∗
2 aldagaiaren balioa kalkulatu
Dualaren murrizketen sisteman
y∗
3 eta y
∗
4 nasaitze-aldagaien zero balioak or-
dezkatuz, sistema honela geratuko da:
y
∗
1 + 2y
∗
2 = 3
2y
∗
1 − y
∗
2 = 1
y
∗
1 + 3y
∗
2 − y
∗
5 = −2
Ekuazio-sistema ebatziz, eredu dualaren soluzio optimoa lortuko da.
y
∗
1 = 1, y
∗
2 = 1, y
∗
3 = 0, y
∗
4 = 0, y
∗
5 = 6.
2
OpenCourseWare, UPV/EHU

3.4. Soluzio dual optimoa
103
3.4
Soluzio dual optimoa
3.4.1 Teorema. Izan bitez bi eredu lineal primal-dual simetrikoak. B problema
primalaren oinarri optimoa bada, y
∗
T = cT
B B
−1 problema dualaren soluzio opti-
moa da.
Froga. Forma simetriko primalari nasaitze-aldagaien xh bektorea gehituz,
murrizketak honela geratuko dira:
Ax
+ Ixh = b
x
, xh ≥ 0
B primalaren oinarri optimoa bada, eta xB oinarriko soluzio bideragarri opti-
moa, A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen da.
zj = c
T
B yj = c
T
B B
−1a
j .
B oinarri optimoa denez,
zj ≥ cj betetzen da A matrizeko aj bektore guztie-
tarako, hau da,
c
T
B B
−1A ≥ cT .
Aurreko desberdintzaren atalak irauliz dualaren murrizketen sistema lortuko
da:
A
T (cT
B B
−1)T ≥ c.
Hortaz, y
∗ = (cT
B B
−1)T dualaren soluzioa da.
Bideragarria den edo ez egiaztatzeko, I matrizeko bektoreei dagozkien balio
adierazleak kalkulatuko ditugu.
c
T
B B
−1I ≥ cT
I .
xh bektoreko aldagaiak nasaitze-aldagaiak direnez, cI = 0 da eta hau beteko da:
c
T
B B
−1I = cT
B B
−1 ≥ 0T .
Ondorioz, y
∗ = (cT
B B
−1)T bektorearen osagaiak ez-negatiboak dira.
y∗ optimoa dela egiaztatuko dugu orain, primalaren helburu funtzioaren balioa
eta dualarena soluzio horretan berdinak direla egiaztatuz.
z
∗ = cT
B xB = c
T
B B
−1b = bT (cT
B B
−1)T = bT y∗ = G∗.
Bi problemen helburu funtzioaren balioa bera denez, y
∗ = (cT
B B
−1)T dualaren
soluzio optimoa dela frogatuta geratuko da.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

104
3. Dualtasuna
3.4.1
Soluzio dual optimoa taulan
Ikus dezagun problema primal bat ebazterakoan, taula optimoan problema duala-
ren optimoa ere lortzen dela.
3.4.1 Teoreman frogatu dugu problema primalaren oinarri optimoa B bada,
eredu dualaren soluzio optimoa y
∗
T = cT
B B
−1 dela. Ikusiko dugu bektore hori
taula optimoan agertzen dela,
zj −cj balioen errenkadan, eta hasierako I matrizeko
aj bektoreei dagozkien zutabeetan.
zj − cj = c
T
B B
−1a
j − cj .
I matrizeko bektore guztiei dagozkien
zj − cj balio adierazleak batera kalku-
latzen baditugu, honako bektorea lortuko dugu:
c
T
B B
−1I − cT
I = c
T
B B
−1 − cT
I .
Hortaz, dualaren soluzio optimoa den y
∗
T = cT
B B
−1 bektorea kalkulatzeko,
hasierako taulako identitate matrizeari dagozkion zutabeetan taula optimoan dau-
den balio adierazleei cT
I gehitu besterik ez da egin behar. Bi kasu gerta daitezke.
• I matrizea nasaitze-aldagaiez osaturik badago, cI = 0 da.
• Hasierako I oinarrian aldagai artiﬁzialak badaude, helburu funtzioa zigor-
tzeko erabili diren aldagai artiﬁzialen
M balioak daude cI bektorean.
Adibidea. 101. orrialdeko problema har dezagun.
max z = 3x1 + x2 − 2x3
hauen mende
x1 + 2x2 + x3 ≤ 5
2x1 − x2 + 3x3 ≤ 4
x1, x2, x3 ≥ 0
Nasaitze-aldagaiak gehitu ondoren, hasierako taula eraikiko da.
x1
x2
x3 x4 x5
−3 −1
2
0
0 0
a4
1
2
1
1
0 5
a5
2 −1
3
0
1 4
OpenCourseWare, UPV/EHU

3.4. Soluzio dual optimoa
105
Simplex algoritmoa aplikatuz, honako taula optimoa lortuko da:
x1 x2
x3
x4
x5
0
0
6
1
1
9
a2
0
1 −
1
5
2
5
−
1
5
6
5
a1
1
0
7
5
1
5
2
5
13
5
Primalaren soluzio optimoa honakoa da:
x
∗
1 =
13
5
, x
∗
2 =
6
5
, x
∗
3 = 0, z
∗ = 9.
Kalkula dezagun dualaren soluzio optimoa primalaren taula optimotik abiatuz.
Hasierako oinarria, B
= I = (a4, a5), nasaitze-aldagaiez osaturik dago. Taula
optimoan,
x4 eta x5 aldagaiei dagozkien zutabeetan dago B−
1 eta dualaren soluzio
optimoa aldagai horiei dagozkien balio adierazleetan bilatu behar da.
(z4 − c4, z5 − c5) = c
T
B B
−1I − cT
I = (1, 1) − c
T
I .
cT
I = (c4 , c5) = (0, 0) denez, problema dualaren soluzio optimoa honakoa da:
y
∗
T = cT
B B
−1 = (1, 1).
Problema dualaren helburu funtzioaren balioa
G∗ = 9 da.
2
Adibidea. Har dezagun honako eredu lineala.
min z = x1 + 2x2
hauen mende
4x1 + 3x2 ≤ 12
x1 + 3x2 ≥ 6
2x1 + x2 ≥ 4
x1, x2 ≥ 0
Simplex algoritmoa aplikatzen hasteko, nasaitze-aldagaiak gehitzeaz gain, bi
aldagai artiﬁzial gehitu behar dira,
w1 eta w2.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

106
3. Dualtasuna
max (−z) = −x1 − 2x2 + 0x3 + 0x4 + 0x5 − Mw1 − Mw2
hauen mende
4x1 + 3x2 +x3
= 12
x1 + 3x2
−x4
+w1
= 6
2x1 + x2
−x5
+w2
= 4
x1, x2, x3, x4, x5, w1, w2 ≥ 0
Hasierako oinarria B
= I = (a3, aw1, aw2) da.
x1
x2
x3
x4
x5
w1
w2
−3M + 1 −4M + 2
0
M
M
0
0
−10M
0
a3
4
3
1
0
0
0
0
12
1
−M
aw1
1
3
0
−1
0
1
0
6
−M
aw2
2
1
0
0
−1
0
1
4
1
3
−
5
3 M +
1
3
0
0 −
1
3 M +
2
3
M
4
3 M −
2
3
0 −2M − 4
0
a3
3
0
1
1
0
−1
0
6
9
5
−2
a2
1
3
1
0
−
1
3
0
1
3
0
2
1
5
−M
aw2
5
3
0
0
1
3
−1
−
1
3
1
2
0
0
0
3
5
1
5
M
−
3
5
M
−
1
5
−
22
5
0
a3
0
0
1
2
5
9
5
−
2
5
−
9
5
12
5
−2
a2
0
1
0
−
2
5
1
5
2
5
−
1
5
8
5
−1
a1
1
0
0
1
5
−
3
5
−
1
5
3
5
6
5
Problema primalaren soluzio optimoa honakoa da:
x
∗
1 =
6
5
, x
∗
2 =
8
5
, −z
∗ = −
22
5
⇒
z
∗ =
22
5
.
Kalkula dezagun dualaren soluzio optimoa primalaren taula optimotik abia-
tuz. Hasierako taulan,
x3, w1 eta w2 aldagaiei dagozkien zutabeetan dago identi-
tate matrizea. Taula optimoan, zutabe horietan berberetan dago B
−1 eta dualaren
OpenCourseWare, UPV/EHU

3.5. Dualtasunaren interpretazio ekonomikoa
107
soluzio optimoa zutabe horietako balio adierazleetan bilatu behar da.
(z3 − c3, zw
1 − c
w1 , zw2 − cw2 ) = c
T
B B
−1I − cT
I = (0, M −
3
5
, M −
1
5
).
cT
I = (c3 , cw1 , cw2 ) = (0, −M, −M ) dela kontuan izanik,
y
∗
T = cT
B B
−1 − cT
I + c
T
I = (0, M −
3
5
, M −
1
5
) + (0, −M, −M).
Hasiera batean, problema dualaren soluzio optimoa hau dela esan genezake:
y
∗T = (0, −
3
5
, −
1
5
).
Hala ere, aldagaien zeinua zuzena den edo ez egiaztatu behar da. Adibideko
problemari dagokion duala kalkulatzen badugu,
y2 eta y3 aldagaiek ez-negatibo
izan behar dutela ikusten da. Kasu honetan, aldagai horietarako taulatik lortu di-
tugun balioak negatiboak dira. Horren arrazoia hau da: simplex algoritmoa apli-
katu ahal izateko ereduaren helburu funtzioari egindako aldaketak eragina sortzen
duela taulako balio adierazleen errenkadan. Adibide honetan, hasierako helbu-
rua minimizatzea da eta maximizatzera egokitu dugu; horregatik ez dira zuzenak
aldagaietarako zeinuak. Hortaz, problema dualaren soluzio optimoa honakoa da:
y
∗
1 = 0,
y
∗
2 =
3
5
,
y
∗
3 =
1
5
,
G
∗ =
22
5
.
2
Simplex algoritmoa aplikatzen hasi baino lehen, ereduaren murrizketaren ba-
ten noranzkoa aldatzeak aldagai dualei egokituko zaien taulako balioren baten
zeinua okerra izatea eragingo du. 91. orrialdeko 3.1. Taulako primal-dual erla-
zioak aztertuz azaldu daiteke zeinuak aldatzearen arrazoia. Baiezta daiteke cT
B B
−1
bektorearen osagaien balio absolutuak bat datozela aldagai dual optimoen balio
absolutuekin.
3.5
Dualtasunaren interpretazio ekonomikoa
Eredu lineal baten soluzio optimoak mugatuta dauden baliabideen esleipen opti-
moa zehazten du. Ikusiko dugun bezala, aldagai dualen balio optimoek baliabi-
deen kopurua aldatzea komeni den ala ez adierazten dute. Informazio hori ondoko
atalean aztertuko ditugun itzal-prezioek ematen dute.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

108
3. Dualtasuna
3.5.1
Itzal-prezioak
Izan bedi eredu lineal bat, eta B oinarri optimoa. Oinarri optimo horri problema
primalaren x
∗ soluzio optimoa eta z∗ balio optimoa dagozkio, baita dualaren y∗
soluzio optimoa eta
G∗ balio optimoa ere.
Demagun b baliabide-bektorea b
+ ∆b izatera aldatzen dela. Ikus dezagun
aldaketa horrek zein eragin sortzen duen B oinarriari dagokion taulako kalkuluen
gain, bideragarritasun primala galtzen ez bada.
• Oinarri optimoari eta baliabide-bektore berriari dagokien soluzio primala
honakoa da:
∧
xB= B
−1(b + ∆b) = xB + B−
1∆b.
• Baliabide-bektorearen aldaketak ez du eraginik sortuko balio adierazleen
errenkadan.
zj − cj = c
T
B B
−1a
j − cj .
• Helburu funtzio primalaren eta dualaren balioak aldatu egiten dira, baliabide-
bektorearen gehikuntzaren arabera.
∧
G
∗
= y
∗
T (b + ∆b) = y∗T b + y∗T ∆b = G∗ + y∗T ∆b = z∗ + y∗T ∆b.
Ondorioz, bideragarritasun primalaren galera eragiten ez duen b baliabide-
bektorearen aldaketak problemaren soluzioan ondoko aldaketak eragiten ditu:
• Dualaren soluzio optimoaren osagaiak mantendu egiten dira.
• Primalaren soluzioaren osagaiak aldatu egiten dira B−
1∆b kantitatea.
• Helburu funtzio primalaren eta dualaren balioa y∗T ∆b kantitatea aldatuko
dira.
Laburbilduz, baliabide-bektorea aldatu eta
∧
xB= B
−1(b + ∆b) ≥ 0 betetzen
bada,
∧
xB problema primalaren soluzio optimoa da eta dualaren y
∗ soluzioak opti-
mo izaten jarraituko du. Bi helburuen balio optimoa y
∗
T ∆b kantitatea handituko
da.
OpenCourseWare, UPV/EHU

3.5. Dualtasunaren interpretazio ekonomikoa
109
Aldagai dual bakoitzaren esanahia interpretatu ahal izateko, demagun
∆bi = 1
dela eta gainerakoak zero direla. Orduan, helburuaren gehikuntza honakoa da:
y
∗
T ∆b = (y∗
1 , . . . , y
∗
i , . . . , y
∗
m)











0
..
.
1
..
.
0











= y
∗
i .
Hau da,
i. baliabidea unitate bat handitzen bada eta gainerako baliabideak bere
horretan mantentzen badira,
y∗
i aldagai dualaren balio optimoak helburu funtzioa-
ren balioaren gehikuntza adierazten du.
3.5.1 Deﬁnizioa. (Itzal-prezioa)
y∗
i , i = 1, . . . , m, aldagai dual optimoa i. ba-
liabidearen itzal-prezioa dela esaten da, baldin
i. baliabidean unitate bateko
aldaketa egitean eta gainerako baliabideak bere horretan mantentzean ez bada
bideragarritasun primala galtzen.
Adibidea. Har dezagun 104. orrialdeko adibidea, eta ikus dezagun ea duala-
ren soluzio optimo diren
y
∗
1 = 1 eta y
∗
2 = 1 balioak b1 eta b2 baliabideen itzal-
prezioak diren.
• b1 = 5 balioa b1 + ∆b1 = 6 balioaz ordezkatuz gero, hau da, ∆b1 = 1,
∧
xB= B
−1(b + ∆b) =


2
5
−
1
5
1
5
2
5




6
4


=


8
5
14
5


Ez da bideragarritasun primala galdu,
∧
xB≥ 0 betetzen delako. Esan dezake-
gu
b1 baliabidearen itzal-prezioa y∗
1 dela. Helburu funtzioaren balio optimo
berria honakoa da:
∧
z
∗
= z
∗ + y∗
1 = 9 + 1 = 10.
• b2 baliabiderako interpretazio bera egingo dugu. Kasu honetan, demagun
b2 = 4 balioa b2 + ∆b2 = 3 balioaz ordezkatzen dugula.
∧
xB= B
−1(b + ∆b) =


2
5
−
1
5
1
5
2
5




5
3


=


7
5
11
5


Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

110
3. Dualtasuna
Ez da bideragarritasun primala galdu,
∧
xB≥ 0 betetzen delako. Esan dezake-
gu
b2 baliabidearen itzal-prezioa y
∗
2 dela. Helburu funtzioaren balio optimo
berria honakoa da:
∧
z
∗
= z
∗ − y∗
2 = 9 − 1 = 8.
Kasu honetan, helburu funtzioaren balio optimoa
y∗
2 itzal-prezioak adierazi
adina txikituko da, bigarren baliabidearen gehikuntza negatiboa delako.
2
Adibidea. Har dezagun 105. orrialdeko adibidea. Problema dualaren soluzio
optimoa honakoa da:
y
∗
1 = 0 , y
∗
2 =
3
5
, y
∗
3 =
1
5
.
Demagun lehenengo baliabidearen kopurua unitate bat handitzen dela,
b1 =
12 izatetik b1 + ∆b1 = 13 izatera pasatzen dela.
∧
xB= B
−1(b + ∆b) =





1 −
2
5
−
9
5
0
2
5
−
1
5
0 −
1
5
3
5










13
6
4





=





17
5
8
5
6
5





≥ 0.
Bideragarritasun primala mantendu egiten denez,
y∗
1 aldagaia lehenengo balia-
bidearen itzal-prezioa dela esan dezakegu. Dena den, helburu funtzioaren balioa
ez dela aldatuko ikusten dugu, itzal-prezioa
y∗
1 = 0 delako.
∧
z
∗
= z
∗ + y∗
1 =
22
5
+ 0 =
22
5
.
Lehenengo baliabidearen itzal-prezioa zero dela ikustearekin batera, hau egiaz-
ta daiteke: eredu primalaren lehenengo murrizketa desberdintzaz betetzen dela.
Ordezka ditzagun
x∗
1 =
6
5 , x
∗
2 =
8
5 balio optimoak 4x1 + 3x2 ≤ 12 murrizketan:
4 ×
6
5
+ 3 ×
8
5
< 12.
Horrek esan nahi du lehenengo baliabidea kantitate handiegian dagoela, eta
ondorioz, lehenengo baliabidearen kantitatea handitzeak ez du inolako eraginik
sortuko helburu funtzioaren balio optimoan. Kasu honetan, baliabide horren kan-
titatea txikitzearen aukera aztertu beharko genuke.
2
OpenCourseWare, UPV/EHU

3.5. Dualtasunaren interpretazio ekonomikoa
111
3.5.2
Aldagai primalen kostu ekonomikoa eta simplex meto-
doaren interpretazioa
Primalaren aldagaien kostu ekonomikoa ulertzeko modu erraz bat adibide baten
bidez aztertzea da.
Enpresa batean lau produktu mota ekoizten dira:
1, 2, 3 eta 4. Produktuen
ekoizpenean hiru baliabide erabiliko dira:
A, B eta C. Produktu unitate bakoitza-
ren ekoizpenerako behar diren baliabideen kantitateak, baliabideen erabilgarrita-
suna eta produktu unitate bakoitzetik lortuko den irabazia ondoko taulan adieraz-
ten dira:
Produktuak
Baliabide
Baliabidea
1 2
3
4
erabilgarria
A
2 3
3
2
4
300
B
2 4
3
1
500
C
5 1
2
2
250
Irabazia
4 3
6
2
Izan bedi
xj: ekoitziko den j produktu unitate kopurua, j = 1, 2, 3, 4. Ekoizpen-
problema adierazteko ondoko eredu lineala plantea dezakegu:
max z = 4x1 + 3x2 + 6x3 + 2x4
hauen mende
2x1 + 3x2 +
3
2
x3 + 4x4 ≤ 300
2x1 + 4x2 + 3x3 + x4 ≤ 500
5x1 + x2 + 2x3 + 2x4 ≤ 250
x1, x2, x3, x4 ≥ 0
Demagun orain enpresa lehiakide batek
b1 = 300, b2 = 500 eta b3 = 250 ba-
liabideak erosi nahi dizkiola. Bigarren enpresa horren helburua baliabideak ahalik
eta kosturik txikienean lortzea da;
A, B eta C baliabideen unitate bakoitzagatik
y1, y2 eta y3 aldagaiek adierazitako prezioa ordaintzen badu, hurrenez hurren, hel-
burua honakoa izango da:
min G = 300y1 + 500y2 + 250y3
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

112
3. Dualtasuna
Pentsa dezakegu lehenengo enpresak baliabideen erabilpenetik lortutakoa (ira-
bazia) baino txikiagoa izango den prezioan (kostu ekonomikoan) ez dizkiola sal-
duko bigarrenari.
1 produktuaren unitate bat ekoizteko, lehenengo enpresak 2 unitate A baliabi-
de,
2 unitate B baliabide eta 5 unitate C baliabide erabiliko ditu, eta ekoizpenetik
lortuko duen irabazia
4 unitatekoa da. Baliabideen unitate horiek bigarren en-
presari saltzen badizkio,
2y1 + 2y2 + 5y3 unitateko irabazia lortuko du; hori da
1 jardueraren kostu ekonomikoa. Hortaz, enpresa baliabideak bigarren enpresari
saltzeko prest egongo litzateke jarduera aurrera eramateak sortutako kostu ekono-
mikoa irabazia baino handiagoa balitz, hau da, ondoko murrizketa beteko balitz
(eredu dualaren lehenengo murrizketa).
2y1 + 2y2 + 5y3 ≥ 4
Beste hiru produktuetarako interpretazio bera eginez, ekoizpen-problemari da-
gokion eredu duala lortuko dugu.
min G = 300y1 + 500y2 + 250y3
hauen mende
2y1 + 2y2 + 5y3 ≥ 4
3y1 + 4y2 + y3 ≥ 3
3
2
y1 + 3y2 + 2y3 ≥ 6
4y1 + y2 + 2y3 ≥ 2
y1, y2, y3 ≥ 0
Simplex algoritmoan, oinarrikoa ez den
xj aldagai bat oinarriko izatera pasa
daiteke algoritmoaren hurrengo iterazio batean, bere
zj −cj balio adierazlea nega-
tiboa bada. Baldintza horren arrazoia da
xj aldagaiaren balio adierazlea problema
dualaren
j. murrizketa dela; balio adierazlea negatiboa denean, j. jardueraren
kostu ekonomikoa lortutako irabazia baino txikiagoa da, ekoizpena errentagarria
gertatzen delarik. Arrazonamendu hori ondoko formuletan ikus daiteke:
zj − cj = c
T
B B
−1a
j − cj = y
T a
j − cj =
m
i=1
aijyi − cj.
Ondorioz, baldin
zj − cj < 0 betetzen bada,
m
i=1
aijyi < cj.
OpenCourseWare, UPV/EHU

3.6. Simplex dual metodoa
113
Hau da,
j. jardueraren kostu ekonomikoa jardueraren ekoizpenari dagokion cj
irabazia baino txikiagoa da.
3.6
Simplex dual metodoa
2. Kapituluan ikusi dugunez, simplex algoritmoa aplikatzean soluzio primal bide-
ragarri bat kalkulatzeko, hasierako oinarri moduan identitate matrizea aukeratuko
da, behar izanez gero aldagai artiﬁzialak erabiliko direlarik. Algoritmoaren ondoz
ondoko iterazioetan oinarriko soluzio bideragarri batetik beste oinarriko soluzio
bideragarri batera pasako da optimoa lortuko den arte, hau da, taulan
zj − cj ≥ 0
beteko den arte A matrizeko aj bektore guztietarako. Baldintza hori eredu duala-
ren bideragarritasunarekin erlazionatuta dago. Hau da, simplex algoritmoa soluzio
primal bideragarri batean hasten da eta dualarentzako bideragarritasuna lortzen
denean amaituko da. Metodo horri simplex primal deituko diogu aurrerantzean.
Atal honetan simplex dual algoritmoa aurkeztuko dugu. Algoritmo hau ere
hasierako oinarri moduan I matrizea aukeratuz hasten da, eta nasaitze-aldagaiez
osaturik egongo da beti. Lehen urratsa eredu lineala maximizatze-forma sime-
trikoan idaztea eta murrizketa bakoitzean nasaitze-aldagai bat gehitzea da. Ha-
sierako taulan bideragarritasun duala badago, beharrezko diren iterazio guztiak
egingo dira bideragarritasun primala ere lortuko den arte (problemak soluziorik
badu). Hasierako taulan hasierako oinarria horrela aukeratuz ez badago bideraga-
rritasun dualik, ereduari murrizketa artiﬁzial bat gehitzea beharrezkoa izango da,
3.7 atalean ikusiko dugun bezala.
3.6.1
Simplex dual algoritmoa
Helburua maximizatzea da. Hasierako B
= I oinarria nasaitze-aldagaiez osatuta-
ko matrizea izango da.
1. urratsa. Hasierako taula eraiki, non
zj − cj ≥ 0 beteko den A matrizeko
aj bektore guztietarako.
2. urratsa. Bideragarritasun primalarekiko bi kasu gerta daitezke.
• xBi ≥ 0, i = 1, . . . , m, bada, soluzioa optimoa da. Amaitu.
• Existitzen bada xBi < 0, soluzioa hobe daiteke. 3. urratsera joan.
3. urratsa. Oinarri aldaketa.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

114
3. Dualtasuna
• Ondoko baldintza betetzen duen ar bektorea irtengo da oinarritik.
xBr = min
i
{ xBi / xBi < 0 }
r. errenkada pibot-errenkada da.
• Ondoko baldintza betetzen duen ak bektorea sartuko da oinarrian.
zk − ck
yrk
= max
j
zj − cj
yrj
/ yrj < 0
k. zutabea pibot-zutabea da. yrk elementua pibota da.
yrj, j = 1, . . . , n, negatiborik ez bada existitzen, problema bideraezina
da. Amaitu.
4. urratsa. Taula berria kalkulatu simplex algoritmoan deﬁnitu diren oinarriz-
ko eragiketa berberen bidez. 2. urratsera joan.
Adibidea. Izan bedi honako eredu lineala:
min z = 3x1 + 2x2
hauen mende
x1 + 2x2 ≥ 3
−2x1 + x2 ≥ 2
x1 + 4x2 ≥ 7
x1, x2 ≥ 0
Eredua maximizatze-forma simetrikoan idatziko dugu simplex dual algorit-
moa aplikatu aurretik.
max (−z) = −3x1 − 2x2
hauen mende
−x1 − 2x2 ≤ −3
2x1 − x2 ≤ −2
−x1 − 4x2 ≤ −7
x1, x2 ≥ 0
OpenCourseWare, UPV/EHU

3.6. Simplex dual metodoa
115
Murrizketak berdintzaz idazteko, bakoitzean nasaitze-aldagai bat gehituko dugu.
max (−z) = −3x1 − 2x2 + 0x3 + 0x4 + 0x5
hauen mende
−x1 − 2x2 + x3
= −3
2x1 − x2
+ x4
= −2
−x1 − 4x2
+ x5 = −7
x1, x2, x3, x4, x5 ≥ 0
1. urratsa. Hasierako taula eraiki.
zj − cj guztiak ez-negatiboak dira, hau da,
bideragarritasun duala dago.
x1
x2 x3 x4 x5
3
2
0
0
0
0 −
1
2
a3
−1
−2
1
0
0 −3
1
2
a4
2
−1
0
1
0 −2
1
4
a5
−1
−4
0
0
1 −7
2. urratsa. Taula horretan ez dago bideragarritasun primalik. Ondorioz, solu-
zioa hobe daiteke.
xB =





−3
−2
−7





≥ 0
3. urratsa. Oinarri aldaketa.
xB3 = min{−3, −2, −7} = −7
a5 bektorea irtengo da oinarritik.
3. errenkada pibot-errenkada da.
zk − ck
yik
= max
3
−1
,
2
−4
= −
1
2
=
z2 − c2
y22
a2 bektorea sartuko da oinarrian.
2. zutabea pibot-zutabea da.
Pibota
−4 balioa da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

116
3. Dualtasuna
4. urratsa. Taula berria kalkulatu. Lehenengo errenkadarako biderkatzailea
1
2
da, bigarren errenkadarako biderkatzailea
1
4 da eta balio adierazleen erren-
kadarako biderkatzailea
−
1
2 da.
Errenkaden artean oinarrizko eragiketak eginez, ondoko taula lortuko da:
x1
x2 x3 x4
x5
5
2
0
0
0
1
2
−
7
2
−2
0 a3 −
1
2
0
1
0
−
1
2
1
2
2
0 a4
9
4
0
0
1
−
1
4
−
1
4
−2 a2
1
4
1
0
0
−
1
4
7
4
1
2. urratsera bueltatzean, taulan bideragarritasun primalik ez dagoela ikusten
dugu. Hortaz, algoritmoaren beste iterazio bat egin beharko dugu. a4 bektorea
irtengo da oinarritik eta a5 bektorea sartu. Taula berria honakoa da:
x1
x2 x3
x4
x5
7
0
0
2
0 −4
0 a3 −4
0
1 −2
0
1
0 a5 −9
0
0 −4
1
1
−2 a2 −2
1
0 −1
0
2
Berriro ere, 2. urratsera bueltatzean, taula horretan bideragarritasun primala
badagoela egiaztatuko dugu eta, ondorioz, taula optimoa da. Problemaren soluzio
optimoa
x∗
1 = 0 eta x
∗
2 = 2 da, eta helburu funtzioaren balio optimoa z
∗ = 4. 2
3.7
Murrizketa artiﬁzialaren metodoa
Simplex dual algoritmoa aplikatu ahal izateko, beharrezkoa da hasierako taulan
bideragarritasun duala izatea, eta hori ez da horrela eredu lineal guztietarako. Ho-
rregatik, algoritmoaren aplikazioa murriztua geratzen da. Edozein eredu lineal
simplex dual algoritmoaren bidez ebaztea posible egiten duen algoritmoaren he-
dapen bat murrizketa artiﬁzialaren metodoa da.
OpenCourseWare, UPV/EHU

3.7. Murrizketa artiﬁzialaren metodoa
117
Hasierako taulan bideragarritasun dualik ez dagoenean, ebatziko den eredu
linealari murrizketa artiﬁzial bat gehitzean datza metodoa. Murrizketa artiﬁzial
horrek ez luke problemaren bideragarritasun eskualdea aldatu beharko. Taulan
bideragarritasun duala lortzeko helburuarekin gehituko da murrizketa artiﬁziala,
eta hortik aurrera simplex dual algoritmoaren aplikazioarekin segi ahal izango da.
Ereduari gehituko zaion murrizketa artiﬁziala honakoa da:
j∈N
xj ≤ M.
non
N izango den hasierako taulan zj − cj negatiboa duten aldagaiek osatzen
duten multzoa. Ereduari gehitutako murrizketa artiﬁzialak soluzioen eskualdea
alda ez dezan,
M balio positibo oso handia izango da.
Adibidea. Har dezagun honako eredu lineala:
max z = x1 + 6x2
hauen mende
x1 + 2x2 ≤ 20
x1 +
1
2
x2 ≥
1
2
x1, x2 ≥ 0
Eredua maximizatze-forma simetrikoan idatziko dugu, eta murrizketa bakoi-
tzean nasaitze-aldagai bat gehituko dugu.
max z = x1 + 6x2 + 0x3 + 0x4
hauen mende
x1 + 2x2 + x3
= 20
−x1 −
1
2
x2
+ x4 = −
1
2
x1, x2, x3, x4 ≥ 0
B
= I = (a3, a4) oinarria aukeratu eta hasierako taula eraikiko dugu.
x1
x2
x3
x4
−1
−6
0
0
0
a3
1
2
1
0
20
a4
−1
−
1
2
0
1 −
1
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

118
3. Dualtasuna
Hasierako taula horretan ez dago simplex dual algoritmoa aplikatu ahal izateko
behar dugun bideragarritasun duala. Horretarako ondoko murrizketa artiﬁziala
gehituko diogu ereduari:
x1 + x2 ≤ M.
Murrizketa artiﬁzialari nasaitze-
aldagai bat gehituz, horrela geratuko da eredua:
max z = x1 + 6x2 + 0x3 + 0x4 + 0x5
hauen mende
x1 + 2x2 + x3
= 20
−x1 −
1
2
x2
+ x4
= −
1
2
x1 + x2
+ x5 = M
x1, x2, x3, x4, x5 ≥ 0
B
= I = (a3, a4, a5) oinarria aukeratu eta murrizketa artiﬁziala duen ere-
duari dagokion hasierako taula eraikiko dugu.
x1
x2
x3
x4
x5
−1
−6
0
0
0
0
−6
0
a3
1
2
1
0
0
20
2
0
a4
−1
−
1
2
0
1
0 −
1
2
−
1
2
0
a5
1
1
0
0
1
M
Geroago ikusiko dugun murrizketa artiﬁzialaren kasurako simplex dual algo-
ritmoan zehaztuko dugu zein den hasierako taula horretan egin behar den oinarri-
aldaketa, bideragarritasun duala duen taula bat lortzeko.
2
3.7.1
Murrizketa artiﬁzialaren eragina
Modu laburrean esanda, murrizketa artiﬁzialaren metodoak simplex dual algo-
ritmoa osatu egiten du, hala behar den kasuetan. Baina, problemari murrizketa
artiﬁzial bat gehitzeak ez du soluzioen eskualdearen gain inolako eraginik sortu
behar, eta horretarako
M balioak behar bezain handia izan behar du.
Ondoko graﬁkoan ikus daiteke murrizketa artiﬁzialaren
M balioa nahiko han-
dia bada, honek ez duela problemaren soluzioen eskualdean eraginik sortuko, gri-
sez margotutako poligonoan alegia.
OpenCourseWare, UPV/EHU

3.7. Murrizketa artiﬁzialaren metodoa
119
x1
x2
x1 + x2 = M
opt
(x∗
1, x
∗
2)
Baina,
M balioa ez bada nahiko handia, hurrengo graﬁkoan ikus daitekeen
bezala, soluzioen eskualdeko puntu batzuk galdu egiten dira; poligono grisean
dauden baina marratuan ez dauden puntuak ez dira
x1 + x2 ≤ M murrizketa
artiﬁziala gehitu ondoreneko problemaren soluzioen eskualdekoak.
x1
x2
x1 + x2 = M
(x∗
1, x
∗
2)
opt
Amaitzeko, problemaren bideragarritasun eskualdea bornegabea den kasuan
murrizketa artiﬁziala gehitzen dugunean,
M balioa oso handia izanda ere, bidera-
garritasun eskualdeak puntuak galdu egingo ditu. Ondoko graﬁkoan ikus daiteke
kasu hau.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

120
3. Dualtasuna
x1
x2
x1 + x2 = M
opt
Aurreko bi kasuen ondorio gisa esan dezakegu murrizketa artiﬁzialaren nasaitze-
aldagaia oinarri optimoan ez dagoenean, bi arrazoirengatik izan daitekeela:
M
balioa behar bezain handia ez delako edo soluzioa bornegabea delako.
3.7.2
Simplex dual algoritmoa murrizketa artiﬁzialarekin
Helburua maximizatzea da. Nasaitze-aldagaiez osatutako hasierako B
= I oina-
rria aukeratu.
1. urratsa. Hasierako taula eraiki.
2. urratsa. Murrizketa artiﬁzialari dagokionez,
• A matrizeko aj bektore guztietarako zj − cj ≥ 0 betetzen bada, 3.
urratsera joan.
• A matrizean zj − cj < 0 duen aj bektoreren bat existitzen bada, ere-
duari murrizketa artiﬁziala gehitu, eredu berriarentzat hasierako tau-
la eraiki eta ondoko oinarri aldaketa egin:
Oinarrian sartuko da ondoko baldintza betetzen duen ak bektorea:
zk − ck = min
j
{ zj − cj / zj − cj < 0 }.
Murrizketa artiﬁzialaren nasaitze-bektorea irtengo da oinarritik.
Oinarrizko eragiketak egin errenkaden artean eta taulan bideragarrita-
sun duala lortuko da. 3. urratsera joan.
OpenCourseWare, UPV/EHU

3.7. Murrizketa artiﬁzialaren metodoa
121
3. urratsa. Bideragarritasun primala.
• Murrizketa artiﬁzialik ez badago,
–
xBi ≥ 0, i = 1, . . . , m, bada, soluzioa optimoa da. Amaitu.
–
xBi < 0, i = 1, . . . , m, existitzen bada, soluzioa hobe daiteke. 4.
urratsera joan.
• Murrizketa artiﬁziala baldin badago,.
–
xBi ≥ 0, i = 1, . . . , m, bada, eta murrizketa artiﬁzialaren nasaitze-
aldagaia oinarrian badago balio positiboz, soluzioa optimoa da.
Amaitu.
–
xBi ≥ 0, i = 1, . . . , m, bada, eta murrizketa artiﬁzialaren nasaitze-
aldagaia oinarrian ez badago edo oinarrian egonik zero balioa har-
tzen badu, problema bornegabea da. Amaitu.
–
xBi < 0, i = 1, . . . , m, existitzen bada, soluzioa hobe daiteke. 4.
urratsera joan.
4. urratsa. Oinarri-aldaketa.
• Oinarritik irtengo da ondoko baldintza betetzen duen ar bektorea:
xBr = min
i
{ xBi / xBi < 0 }.
r. errenkada pibot-errenkada da.
• Oinarrian sartuko da ondoko baldintza betetzen duen ak bektorea:
zk − ck
yrk
= max
j
{
zj − cj
yrj
/ yrj < 0 }.
k. zutabea pibot-zutabea da. yrk elementua pibota da. 5. urratsera
joan.
r. errenkadan yrj negatiborik ez bada existitzen, problema biderae-
zina da. Amaitu.
5. urratsa. Taula berria kalkulatu errenkaden artean oinarrizko eragiketak egi-
nez. 3. urratsera joan.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

122
3. Dualtasuna
3.8
Eredu linealen ebazpena
Atal honetan, simplex dual aplikatu ahal izateko, murrizketa artiﬁzialaren erabil-
pena beharrezkoa duten hiru adibide ebatziko ditugu.
Adibidea. (Problema bideragarria.) 117. orrialdeko adibidea har dezagun.
Ikusi dugu nasaitze-
aldagaiez osatutako oinarri kanonikorako hasierako taulan ez
dagoela ez bideragarritasun primalik, ezta dualik ere. Hortaz, beharrezkoa gerta-
tuko da, simplex dual aplikatu ahal izateko,
x1 + x2 ≤ M murrizketa artiﬁziala
gehitzea.
Lehenengo iterazioa.
Hasierako taula eraikiko dugu (ikus 117. orrialdean).
x1
x2
x3
x4
x5
−1
−6
0
0
0
0
0
a3
1
2
1
0
0
20
2
0
a4
−1
−
1
2
0
1
0 −
1
2
−
1
2
0
a5
1
1
0
0
1
M
Bideragarritasun duala lortzeko, ondoko oinarri aldaketa egingo dugu. Oi-
narrian sartuko da
zj − cj negatiboen artean minimoari dagokion bektorea, a2,
eta oinarritik irtengo da murrizketa artiﬁzialari dagokion nasaitze-
bektorea, a5.
Errenkaden artean oinarrizko eragiketak eginez, ondoko taula lortuko dugu:
x1
x2
x3
x4
x5
5
0
0
0
6
6M
0
a3
−1
0
1
0 −2
−2M + 20
0
a4
−
1
2
0
0
1
1
2
1
2 M −
1
2
6
a2
1
1
0
0
1
M
Egiazta daiteke taulan bideragarritasun duala lortu dela eta, orain, simplex
dual algoritmoaren urratsekin jarrai daiteke. Oinarritik a3 bektorea irtengo da eta
a5 bektorea sartuko da, eta oinarrizko eragiketak eginez, ondoko taula lortuko da:
OpenCourseWare, UPV/EHU

3.8. Eredu linealen ebazpena
123
x1
x2
x3
x4
x5
2
0
3
0
0
60
0
a5
1
2
0 −
1
2
0
1 M − 10
0
a4
−
3
4
0
1
4
1
0
9
2
6
a2
1
2
1
1
2
0
0
10
Taula honetan bideragarritasun primala izatea lortu da, xB ≥ 0, eta murrizke-
ta artiﬁzialaren nasaitze-bektorea oinarrian dago,
x∗
5 = M − 10 balioa hartzen
duelarik. Hortaz, taulan ageri den soluzio optimoa jatorrizko ereduari dagokio.
Problemaren soluzio optimoa
x∗
1 = 0, x
∗
2 = 10 da, eta z
∗ = 60.
2
Adibidea. (Soluzio bornegabeko problema.) Izan bedi eredu lineal hau:
max z = −4x1 + 5x2
hauen mende
2x1 + 2x2 ≥ 4
x1 − x2 ≥ 3
x1, x2 ≥ 0
Eredua maximizatze-forma simetrikoan idatzi ondoren, nasaitze-aldagaiak eta
x2 ≤ M murrizketa artiﬁziala gehituko dizkiogu, eta honela geratuko da:
max z = −4x1 + 5x2 + 0x3 + 0x4 + 0x5
hauen mende
−2x1 − 2x2 + x3
= −4
−x1 + x2
+ x4
= −3
x2
+ x5 = M
x1, x2, x3, x4, x5 ≥ 0
Simplex dual algoritmoa aplikatuz, ondoko taulak kalkulatuko ditugu:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

124
3. Dualtasuna
x1
x2
x3
x4
x5
4 −5
0
0
0
0
0 a3
−2 −2
1
0
0
−4 −2
0 a4
−1
1
0
1
0
−3
1
0 a5
0
1
0
0
1
M
4
0
0
0
5
5M
0 a3
−2
0
1
0
2
2M − 4
2
0 a4
-1
0
0
1 −1 −M − 3
5 a2
0
1
0
0
1
M
0
0
0
0
4
1
M − 12
0 a3
0
0
1 −2
4
4M + 2
−4 a1
1
0
0 −1
1
M + 3
5 a2
0
1
0
0
1
M
Azkenengo taulan bideragarritasun primala eta duala daudenez, taula optimoa
da. Dena den, murrizketa artiﬁzialaren nasaitze-
bektorea, a5, ez dago oinarri op-
timoan. Horrek esan nahi du problema bornegabea dela.
2
Adibidea. (Problema bideraezina.) Izan bedi ondoko eredu lineala:
max z = 2x1 + x2
hauen mende
x1 + x2 ≤ 2
−3x1 + x2 ≥ 3
x1, x2 ≥ 0
Ereduaren maximizatze-forma simetrikoari nasaitze-aldagaiak eta murrizketa
artiﬁziala,
x1 + x2 ≤ M, gehituz, honela geratuko da:
OpenCourseWare, UPV/EHU

3.8. Eredu linealen ebazpena
125
max z = 2x1 + x2 + 0x3 + 0x4 + 0x5
hauen mende
x1 + x2 +x3
= 2
3x1 − x2
+x4
= −3
x1 + x2
+x5
= M
x1, x2, x3, x4, x5 ≥ 0
Ondoko taulan agertuko dira soluzio optimora iritsi arteko iterazioetan egin-
dako kalkuluak:
x1
x2
x3
x4
x5
−2
−1
0
0
0
0
0 a3
1
1
1
0
0
2
1
0 a4
3
−1
0
1
0
−3
3
0 a5
1
1
0
0
1
M
0
1
0
0
2
2M
0 a3
0
0
1
0
−1
−M + 2
0
0 a4
0
−4
0
1
−3 −3M − 3
2 a1
1
1
0
0
1
M −
1
4
0
0
0
1
4
5
4
5
4 M −
3
4
0 a3
0
0
1
0
−1
−M + 2
1 a2
0
1
0 −
1
4
3
4
3
4 M +
3
4
−
3
4
2 a1
1
0
0
1
4
1
4
1
4 M −
3
4
−
1
4
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

126
3. Dualtasuna
x1 x2
x3
x4
x5
0
0
5
4
1
4
0
7
4
0 a5
0
0 −1
0
1 M − 2
1 a2
0
1
3
4
−
1
4
0
9
4
2 a1
1
0
1
4
1
4
0
−
1
4
Simplex dual algoritmoaren arabera, a1 bektoreak oinarritik irten beharko lu-
ke, baina ez dago pibotik. Hortaz, ez da lortu xB ≥ 0 bideragarritasun primalik.
Problema bideraezina da.
2
OpenCourseWare, UPV/EHU

4. Kapitulua
Sentikortasunaren analisia
Sentikortasunaren analisia eredu linealaren soluzio optimoa kalkulatu ondoren
egiten da, eredu linealaren parametroetan gertatutako aldaketek soluzio optimoa-
ren gain izango duten eragina ezagutzeko asmoz. Aldaketak A koeﬁziente tekno-
logikoen matrizean, b baliabide-bektorean eta c prezio-
bektorean gerta daitezke.
Azter daiteke ere, eredu linealari aldagai berriak edo murrizketa berriak gehitzeak
soluzio optimoaren gain izango duen eragina.
Sentikortasunaren analisia egiteko metodoek iterazio kopuru garrantzitsua au-
rrezten dute, aldaketa gertatu aurreko eredu linealaren soluzio optimotik hasten
baitira aldaketek sortutako eraginaren azterketa egiten.
Aldaketa diskretuen analisi hau zabaldua izan daiteke aldaketa jarraituek so-
luzio optimoan sortzen duten eragina aztertzeko. Analisi hori programazio para-
metrikoa izenez ezagutzen da.
4.1
Planteamendu orokorra
Gai honetan parametro mota bakoitzerako sentikortasunaren analisia aztertzen da;
bi aldaketa edo gehiago aldi berean gertatzen diren kasurako ere analisi hau aplika
daiteke.
Izan bedi honako eredu lineala:
max z = c
T x
hauen mende
Ax
≤ b
x
≥ 0
127

128
4. Sentikortasunaren analisia
b bektorearen osagaiak zero baino handiagoak edo berdinak badira, ereduaren
forma estandarra lortzeko, murrizketa bakoitzean nasaitze-aldagai bat gehitzen
da.
max z = c
T x + 0T xh
hauen mende
Ax
+ Ixh = b
x
, xh ≥ 0
Aurreko kapituluetan ikusi dugu lehenengo oinarri gisa kanonikoa aukeratuz
gero, hasierako taula ereduaren parametroen bidez eraikitzen dela. Kasu hone-
tan, hasierako taulako oinarria nasaitze-
aldagaiez osaturik dago, eta honek nota-
zioa erraztu egiten du. Bektore horiei dagozkien zutabeetan aurkitzen da oina-
rri matrizearen alderantzizkoa, kasu honetan identitatea. Taula optimoan oinarri
matrizearen alderantzizkoa zutabe berberetan aurkitzen da, eta sentikortasunaren
analisiaren garapenean oso erabilgarria dela ikusiko dugu.
• Hasierako taula.
Hasierako aldagaiak
Nasaitze-aldagaiak
x1 . . . xn
xn+1 . . . xn+m
−cT
0
0
B
A
I
b
• Taula optimoa.
Hasierako aldagaiak Nasaitze-aldagaiak
x1 . . . xn
xn+1 . . . xn+m
cT
B B
−1A − cT
cT
B B
−1
z = cT
B xB
B
B−
1A
B−
1
xB = B
−1b
OpenCourseWare, UPV/EHU

4.2. Adibidea
129
Produktuak
Baliabideen
Baliabideak
A
B
C
erabilgarritasuna
1
4
2
3
40
2
2
2
1
30
Irabazia
3
2
1
4.1. Taula: Baliabideak eta irabaziak
Eredu lineal baten taula optimoak bideragarritasun primala du, hau da, xB zu-
tabeko osagai guztiak ez-negatiboak dira. Bideragarritasun duala ere badu, hau
da, adierazleen lerroko elementu guztiak zero baino handiagoak edo berdinak di-
ra. Esan dugun bezala, sentikortasunaren analisia taula optimoaren erabilpenean
oinarritzen da. Tauletan ikus daiteke, behin B oinarri bat ﬁnkatuta, parametro
mota bakoitzaren aldaketan taularen zonalde desberdinetan sortzen duela eragi-
na. Adibidez, baliabide-bektorean aldaketak egiteak bideragarritasun primalaren
gain sortzen du eragina; prezio-bektorean eta koeﬁzienteen matrizean aldaketak
egiteak bideragarritasun dualaren gain sortzen du eragina. Aldaketaren eraginez
bideragarritasunen bat galtzen bada, dagoeneko ezagunak ditugun algoritmoetako
bat erabiltzea beharrezkoa izango da, eredu berriaren taula optimoa lortzeko.
4.2
Adibidea
Aztertuko ditugun aldaketa diskretuen adibide praktikoak egiteko, ekoizpen-
problema
hau erabiliko dugu.
Enpresa batean 1 eta 2 baliabideak erabili nahi dira
A, B eta C produktuak
ekoizteko. Produktu mota bakoitzeko unitate baten ekoizpenerako behar den 1
eta 2 baliabideen unitate kopurua, baliabide bakoitzetik dagoen unitate erabilgarri
kopurua eta produktu unitate bakoitzak emandako irabazia 4.1 Taulan adieraziak
datoz.
Produktuen ekoizpenetik lortutako irabaziak maximizatzeko eredu lineal hau
plantea daiteke. Forma estandarra lortzeko, beharrezko izan diren nasaitze-
aldagaiak
gehitu zaizkio ereduari.
max
z = 3x1 + 2x2 + x3 + 0x4 + 0x5
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

130
4. Sentikortasunaren analisia
hauen mende
4x1 + 2x2 + 3x3 +x4
= 40
2x1 + 2x2 + x3
+x5 = 30
x1, . . . , x5 ≥ 0
A, B eta C produktu mota bakoitzetik ekoitziko den unitate kopurua adieraz-
ten dute ereduaren
xj aldagaiek, j = 1, 2, 3. x4 eta x5 nasaitze-aldagaiak dira.
Eredua ebatziz, problemaren taula optimoa lortzen da:
x1
x2
x3
x4
x5
0
0
1
1
2
1
2
35
a1
1
0
1
1
2
−
1
2
5
a2
0
1
−
1
2
−
1
2
1
10
Soluzio optimoa
x
∗
1 = 5, x
∗
2 = 10
eta
x
∗
3 = 0 da eta irabazi optimoa z
∗ = 35.
Irabazi optimo hau
A produktu motatik 5 unitate ekoitziz eta B produktu motatik
10 unitate ekoitziz lortzen da, hau da, erabilgarri dauden baliabideak
A eta B
produktuen ekoizpenean erabiliz.
2
4.3
Aldaketak b bektorean
Izan bitez eredu lineal bat eta bere soluzio optimoa. Demagun b baliabide-
bektorean
aldaketa diskretu bat gertatzen dela, eta aldaketaren ondorioz dugun baliabide-
bektore berria
∧
b dela. Hortaz, hasierako eredua (1. Eredua) eta aldaketa ondore-
nekoa (2. Eredua) ditugu.
1. Eredua
2. Eredua
max
z = cT x
max
z = cT x
hauen mende
hauen mende
Ax
≤ b
Ax
≤
∧
b
x
≥ 0
x
≥ 0
OpenCourseWare, UPV/EHU

4.3. Aldaketak b bektorean
131
Aldaketak sortutako eragina aztertzeko, 1. Ereduari dagokion taula optimoan oi-
narrituko gara. Baliabide-bektore berria
∧
b izanik, taula optimoan grisez margotu-
tako zutabea besterik ez da aldatzen 
(ikus 4.1 Irudia). Zutabe hori eguneratzean
bideragarritasun primala galtzea gerta daiteke.
B
B
B−
1A
B−
1A
B
−1
B
−1
zj − cj = c
T
B
B−1aj − cj
z
= cT
B
xB
xB = B
−1b
∧
z
= cT
B
∧
x
B
zj − cj = c
T
B
B−1aj − cj
∧
x
B = B
−1
∧
b
1. Eredurako taula optimoa
2. Eredurako hasierako taula
4.1. Irudia: Aldaketak b bektorean
b bektorearen aldaketak soluzio primalaren gain eta helburu funtzioaren ba-
lioaren gain eragina sortzen duenez, balio horiek eguneratu egin behar dira.
∧
xB= B
−1
∧
b
∧
z= c
T
B
∧
xB
Balio eguneratuak kalkulatuak izan direnean, 2. Ereduaren hasierako taulan ko-
katzen dira. Taula honetan bi kasu gerta daitezke.
1. kasua.
∧
xB≥ 0 bada, bideragarritasun primala ez da galdu, eta 2. Eredua-
ren hasierako taula optimoa da 2. Eredurako. Soluzio optimoa eta helburu
funtzioaren balio optimoa
∧
xB eta
∧
z dira, hurrenez hurren.
2. kasua.
∧
xB≥
/ 0 bada, bideragarritasun primala galdu egin da. Kasu honetan
2. Ereduaren hasierako taulan simplex dual algoritmoa aplikatu behar da 2.
Ereduaren soluzio optimoa kalkulatzeko.
Adibidea. Har ditzagun 4.2 Ataleko ekoizpen-problema eta dagokion taula
optimoa. b baliabide-bektorean bi aldaketa aztertuko ditugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

132
4. Sentikortasunaren analisia
Lehenengo aldaketa. Azter dezagun baliabide-bektorea bT
= (40, 30) izate-
tik
∧
b
T
= (38, 36) izatera aldatzeak soluzio optimoaren gain sortzen duen eragina.
∧
xB= B
−1
∧
b=


1
2
−
1
2
−
1
2
1




38
36


=


1
17


≥ 0.
∧
z= c
T
B
∧
xB= (3 , 2)


1
17


= 37.
2. Ereduari dagokion hasierako taula honakoa da:
x1
x2
x3
x4
x5
0
0
1
1
2
1
2
37
a1
1
0
1
1
2
−
1
2
1
a2
0
1
−
1
2
−
1
2
1
17
Bideragarritasun primala ez da galdu, eta ondorioz, B oinarriak optimo iza-
ten jarraitzen du. Hala ere, soluzioa eta helburu funtzioaren balioa aldatu egin
dira. Soluzio optimoa
x∗
1 = 1, x
∗
2 = 17, x
∗
3 = 0 da, eta helburu funtzioaren balio
optimoa
z
∗ = 37. Aztertutako aldaketaren interpretazio gisa, esan daiteke solu-
zio optimoaren arabera
A eta B produktu-moten ekoizpenarekin segitzea komeni
dela, nahiz eta kantitate desberdinak ekoitziko diren.
Bigarren aldaketa. Azter dezagun bT
= (40, 30) baliabide-bektorea bes-
te
∧
b
T
= (20, 60) bektoreaz ordezkatzeak soluzio optimoaren gain sortzen duen
eragina.
∧
xB= B
−1
∧
b=


1
2
−
1
2
−
1
2
1




20
60


=


−20
50


≥ 0.
∧
z= c
T
B
∧
xB= (3 , 2)


−20
50


= 40.
Bideragarritasun primala galdu egin da, eta ondorioz, 2. Ereduaren hasierako taula
ez da optimoa.
∧
xB eta
∧
z eguneratu eta simplex dual algoritmoa aplikatu behar da
galdutako bideragarritasuna berreskuratzeko.
OpenCourseWare, UPV/EHU

4.4. Aldaketak c bektorean
133
x1
x2
x3
x4
x5
0
0
1
1
2
1
2
40
3 a1
1
0
1
1
2
−
1
2
−20
2 a2
0
1 −
1
2
−
1
2
1
50 −2
1
0
2
1
0
20
0 a5 −2
0 −2 −1
1
40
2 a2
2
1
3
2
1
2
0
10
Eredu berriaren soluzio optimoa
x∗
1 = 0 , x
∗
2 = 10, x
∗
3 = 0 da, eta irabazi
maximoa
z∗ = 20. Kasu honetan baliabide-bektorearen aldaketaren ondorioz B
produktu mota besterik ez ekoiztea da komenigarriena.
2
4.4
Aldaketak c bektorean
Izan bedi eredu lineal bat, zeinaren soluzio optimoa ezaguna zaigun. Demagun
c prezio-bektorea aldatu egiten dela, bektore berria
∧
c delarik. Horrela, hasierako
eredua (1. Eredua) eta aldaketa ondoreneko eredua (2. Eredua) ditugu.
1. Eredua
2. Eredua
max
z = cT x
max
z =
∧
c
T
x
hauen mende
hauen mende
Ax
≤ b
Ax
≤ b
x
≥ 0
x
≥ 0
1. Ereduaren taula optimotik abiatuz, prezio-bektorearen aldaketak
zj −cj balioen
gain eta helburu funtzioaren balioaren gain eragina duela ikusten da (ikus 4.2
Irudia). Horren ondorioz bideragarritasun duala gal daiteke.
c bektorearen aldaketa dela eta, honakoak eguneratu behar dira:
∧
zj −
∧
cj=
∧
c
T
B B
−1a
j −
∧
cj=
∧
c
T
B yj −
∧
cj .
∧
z=
∧
c
T
B xB .
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

134
4. Sentikortasunaren analisia
B
B
B−1A
B−1A
B−1
B−1
zj − cj = c
T
B
B−1aj − cj z = c
T
B
xB
cB
∧
c
B
xB = B
−1b
∧
zj −
∧
cj=
∧
c
T
B
B−1aj−
∧
cj
∧
z
=
∧
c
T
B
xB
xB = B
−1b
1. Eredurako taula optimoa
2. Eredurako hasierako taula
4.2. Irudia: Aldaketak c bektorean.
Behin
∧
zj −
∧
cj eta
∧
z balioak kalkulatuak izan direnean, 2. Ereduaren hasierako
taulan jasotzen dira. Bi kasu hauek gerta daitezke:
1. kasua.
∧
zj −
∧
cj≥ 0 bada j guztietarako, xB oinarriko soluzio bideragarria
optimoa da 2. Eredurako eta
∧
z=
∧
c
T
B xB da balio optimoa.
2. kasua.
∧
zj −
∧
cj< 0 existitzen bada, 2. Ereduaren hasierako taula ez da
optimoa, eta simplex primal algoritmoa erabili behar da bideragarritasun
duala berreskuratzeko.
Adibidea. Har dezagun 4.2 Ataleko problema, eta azter ditzagun prezio-
bektorearen bi aldaketa.
Lehenengo aldaketa. cT
= (3, 2, 1) prezio-bektorea beste
∧
c
T
= (4, 3, 1)
bektoreaz aldatzeak soluzio optimoan duen eragina aztertuko dugu.
Aldaketa honek
zj − cj balioen errenkadari eragiten dionez, balio berriak kal-
kulatu behar dira honela:
∧
z1 −
∧
c1= (4, 3)


1
0


− 4 = 0.
∧
z2 −
∧
c2= (4, 3)


0
1


− 3 = 0.
OpenCourseWare, UPV/EHU

4.4. Aldaketak c bektorean
135
∧
z3 −
∧
c3= (4, 3)


1
−
1
2


− 1 =
3
2
.
∧
z4 −
∧
c4= (4, 3)


1
2
−
1
2


− 0 =
1
2
.
∧
z5 −
∧
c5= (4, 3)


−
1
2
1


− 0 = 1.
zj − cj balioen errenkada eguneratzen dugu:
x1
x2
x3
x4
x5
0
0
3
2
1
2
1
50
4
a1
1
0
1
1
2
−
1
2
5
3
a2
0
1
−
1
2
−
1
2
1
10
Taulan ikusten denez,
∧
zj −
∧
cj balio guztiak zero baino handiagoak edo berdi-
nak dira, eta ondorioz, ez da bideragarritasun duala galdu. Soluzio optimoa ez da
aldatzen,
x∗
1 = 5, x
∗
2 = 10, x
∗
3 = 0; bai, ordea, helburu funtzioaren balio optimoa,
z
∗ = 50. Prezio-bektorean gertatutako aldaketaren ondorioz, helburu funtziora-
ko balio optimoa
A eta B produktuen aldaketa aurretiko kantitate bera ekoitziz
lortzen dela ikusten da.
Bigarren aldaketa. Azter dezagun soluzio optimoaren gain sortzen den era-
gina cT
= (3, 2, 1) prezio-bektorea beste
∧
c
T
= (1, 1, 1) bektoreaz aldatzen
badugu.
Aurreko kasuan bezala kalkuluak eginez, 2. Ereduari dagokion hasierako taula
hau lortzen da:
x1
x2
x3
x4
x5
0
0
−
1
2
0
1
2
15
1
a1
1
0
1
1
2
−
1
2
5
1
a2
0
1
−
1
2
−
1
2
1
10
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

136
4. Sentikortasunaren analisia
z3 − c3 balio adierazlea negatiboa da; bideragarritasun duala galdu da eta sim-
plex primal algoritmoaren bidez kalkulatuko da 2. Ereduaren taula optimoa.
x1 x2
x3
x4
x5
0
0 −
1
2
0
1
2
15
1 a1
1
0
1
1
2
−
1
2
5
1 a2
0
1 −
1
2
−
1
2
1 10 −
1
2
1
2
0
0
1
4
1
4
35
2
1 a3
1
0
1
1
2
−
1
2
5
1 a2
1
2
1
0 −
1
4
3
4
25
2
Soluzio optimoa
x∗
1
= 0 , x∗
2
=
25
2
, x∗
3
= 5 da, eta z∗ =
35
2
da helburu
funtziorako balio optimoa. Kasu honetan,
A eta B produktuen ekoizpenak sortu-
tako irabaziak jaitsi direnez,
A-ren ekoizpenak errentagarri izateari utzi dio, B-ren
ekoizpena jaitsi egin da eta
C produktuaren ekoizpena errentagarri bihurtu da so-
luzio optimoan.
2
4.5
Aldaketak oinarrikoa ez den aj batean
Oinarriko ez diren aj bektoreen aldaketak besterik ez ditugu aztertuko. Aldaketa
oinarrikoa den aj bektore batean gertatuko balitz, B
−1 aldatu egingo litzateke,
eta ondorioz, taulako zutabe guztiak ere; horrelako kasuetan, problema hasieratik
ebaztea gomendatzen da, sentikortasunaren analisirik egin gabe.
Izan bitez eredu lineal bat eta bere taula optimoa. Izan bedi oinarri optimoan
ez dagoen aj bektorea eta demagun bektorea aldatu egiten dela
∧
aj bektorera. Ho-
rrela, hasierako eredua (1. Eredua) eta aldaketa ondoreneko eredua (2. Eredua)
ditugu.
OpenCourseWare, UPV/EHU

4.5. Aldaketak oinarrikoa ez den aj batean
137
1. Eredua
2. Eredua
max
z = cT x
max
z = cT x
hauen mende
hauen mende
a1
x1 + · · · + ajxj + · · · + anxn ≤ b
a1
x1 + · · · +
∧
aj xj + · · · + anxn ≤ b
x1, · · · , xn ≥ 0
x1, · · · , xn ≥ 0
1. Eredurako taula optimoan oinarrituz, A matrizearen
j zutabe batean al-
daketa gertatuz gero, honek aj bektorearen koordenatuen zutabean eta dagokion
zj − cj balio adierazlean eragina sortzen duela ikus daiteke 4.3 Irudiko taulan.
Horren ondorioz, bideragarritasun duala gal daiteke.
  
B
B
B−
1
B−
1
zj − cj = cT
B B
−1aj − cj
z = cT
B xB
yj = B
−1aj
∧
y
j = B
−1
∧
aj xB = B−1b
xB = B
−1b
∧
zj −cj = cT
B B
−1
∧
aj −cj
z = cT
B xB
1. Eredurako taula optimoa
2. Eredurako hasierako taula
4.3. Irudia: Aldaketak aj ∈ B bektorean.
aj bektorean gertatutako aldaketak honakoak eragiten ditu:
∧
y
j = B
−1 ∧
aj .
∧
zj −cj = c
T
B B
−1 ∧
aj −cj = c
T
B
∧
y
j −cj .
∧
y
j eta
∧
zj −cj eguneratuak izan direnean, 2. Eredurako hasierako taulan jasotzen
dira. Bi kasu gerta daitezke:
1. Kasua.
∧
zj −cj ≥ 0 bada, bideragarritasun duala mantendu egin da, eta xB
soluzioak eta helburu funtzioaren
z balioak optimo izaten jarraituko dute.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

138
4. Sentikortasunaren analisia
2. Kasua
∧
zj −cj < 0 bada, bideragarritasun duala galdu egin da eta simplex
primal algoritmoa erabiliz berreskuratu beharko da.
Adibidea. Har dezagun 4.2 Ataleko problema eta azter ditzagun koeﬁzienteen
matrizean gertatutako bi aldaketa.
Lehenengo aldaketa. Oinarrikoa ez den a3 bektorean aldaketa hau egin da:
a3
=


3
1


aldatu egin da:
∧
a3
=


4
2


Orduan,
∧
y
3
= B
−1 ∧
a3
=


1
2
−
1
2
−
1
2
1




4
2


=


1
0


∧
z3 −c3 = (3 , 2)


1
0


− 1 = 3 − 1 = 2 > 0.
Ondorioz, bideragarritasun duala ez da galdu, oinarriak optimo izaten jarraitzen
du eta eguneratutako taula optimoa da eredu berriarentzat.
x1
x2
x3
x4
x5
0
0
2
1
2
1
2
35
a1
1
0
1
1
2
−
1
2
5
a2
0
1
0
−
1
2
1
10
Soluzio optimoa
x∗
1 = 5 , x
∗
2 = 10 , x
∗
3 = 0 da eta helburu funtzioaren balio
optimoa
z∗ = 35.
Bigarren aldaketa. Azter dezagun aldaketa hau:
a3
=


3
1


aldatu egin da:
∧
a3
=


1
2
1


OpenCourseWare, UPV/EHU

4.6. Aldagai berriak
139
Kalkuluak eginez,
∧
y
3
= B
−1 ∧
a3
=


1
2
−
1
2
−
1
2
1




1
2
1


=


−
1
4
3
4


∧
z3 −c3 = (3 , 2)


−
1
4
3
4


− 1 = −
1
4
.
Bideragarritasun duala galdu egin da eta simplex primal algoritmoa erabiliz
berreskuratuko da.
x1 x2
x3
x4
x5
0
0 −
1
4
1
2
1
2
35
3 a1
1
0 −
1
4
1
2
−
1
2
5 −
1
3
2 a2
0
1
3
4
−
1
2
1
10
0
1
3
0
1
3
5
6
115
3
3 a1
1
1
3
0
1
3
−
1
6
25
3
1
∧
a3
0
4
3
1 −
2
3
4
3
40
3
Soluzio optimoa
x∗
1 =
25
3 , x
∗
2 = 0 eta x
∗
3 =
40
3
da, eta balio optimoa
z∗ =
115
3 .
Kasu honetan,
B produktuaren ekoizpena uztea eta C produktuarenarekin hastea
komeni dela ikusten da.
2
4.6
Aldagai berriak
Izan bitez eredu lineal bat eta bere taula optimoa. Demagun ereduan aldagai berri
bat erantsi nahi dela. Horrela, hasierako eredua 
(1. Eredua) eta aldaketa ondore-
neko eredua (2. Eredua) izango ditugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

140
4. Sentikortasunaren analisia
1. Eredua
2. Eredua
max
z = c1x1 + · · · + cnxn
max
z = c1x1 + · · · + cnxn + cn+1xn+1
hauen mende
hauen mende
a1
x1 + · · · + anxn ≤ b
a1
x1 + · · · + anxn + an+1xn+1 ≤ b
x1, · · · , xn ≥ 0
x1, · · · , xn, xn+1 ≥ 0
1. Eredurako taula optimoan oinarrituz, ereduari
xn+1 aldagai berri bat eransteak
yn+1 zutabe berri bat eta zn+1 − cn+1 balio adierazle berri bat sortzen ditu 
(ikus
4.4 Irudia). Horren ondorioz, bideragarritasun duala gal daiteke.
 
B
B
B−
1
B−
1
zj − cj = cT
B B
−1aj − cj
z = cT
B xB
xB = B
−1b
xB = B
−1b
zn+1 − cn+1 = cT
B B
−1an+1 − cn+1
z = cT
B xB
yn+1 = B
−1an+1
1. Eredurako taula optimoa
2. Eredurako hasierako taula
4.4. Irudia: Aldagai berria eranstea.
yn+1 zutabe berria eta zn+1 − cn+1 balio adierazle berria kalkulatu eta 2. Ere-
durako hasierako taulan jasotzen dira.
yn+1 = B
−1a
n+1.
zn+1 − cn+1 = c
T
B yn+1 − cn+1.
Bi kasu gerta daitezke:
1. Kasua.
zn+1 − cn+1 ≥ 0 bada, xn+1 aldagai berria eransteak ez du eraginik
sortzen soluzio optimoaren gain; xB soluzioak eta z balioak optimo izaten
jarraituko dute.
OpenCourseWare, UPV/EHU

4.6. Aldagai berriak
141
2. Kasua.
zn+1 − cn+1 < 0 bada, bideragarritasun duala galdu egin da eta
simplex primal algoritmoa erabili behar da soluzio optimoa lortzeko.
Adibidea. Har dezagun 4.2 Ataleko problema eta azter dezagun aldagai berri
bat eransteak sortzen duen eragina.
Lehenengo aldaketa.
D produktu mota berri bat ekoitzi nahi da. x4 aldagaiak
adierazten du ekoitziko den
D motako produktu unitate kopurua, ekoizpenerako
beharrezko diren lehengaien erabilpena eta ekoitzitako produktu unitate bakoitzak
emandako irabazia ondokoak direlarik:
a4
=


1
2


, c4 = 1.
Aldagai berria
x4 denez, nasaitze-aldagaiei izena aldatu eta x5 eta x6 izango
dira.
Kalkula ditzagun y4 eta
z4 − c4 produktu berrirako:
y4
= B
−1a
4
=


1
2
−
1
2
−
1
2
1




1
2


=


−
1
2
3
2


z4 − c4 = (3, 2)


−
1
2
3
2


− 1 = −
3
2
+
6
2
− 1 =
1
2
> 0.
y4 eta
z4 − c4 kalkulatu ondoren, eredu berrirako hasierako taulan jasotzen dira.
x1 x2
x3
x4
x5
x6
0
0
1
1
2
1
2
1
2
35
3 a1
1
0
1 −
1
2
1
2
−
1
2
5
2 a2
0
1 −
1
2
3
2
−
1
2
1 10
Bideragarritasun duala ez da galdu. Soluzio optimoa mantendu egiten da,
x∗
1 = 5, x
∗
2 = 10 eta x
∗
3 = 0. Helburu funtzioaren balio optimoa ere ez da aldatu,
z∗ = 35. Soluzio optimoaren arabera, A eta B produktu moten ekoizpenarekin
jarraitzea da errentagarriena, eta
D produktu berriaren ekoizpena ez da errentaga-
rria.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

142
4. Sentikortasunaren analisia
Bigarren aldaketa. Demagun ekoitzi nahi den
D produktu berriari dagozkion
koeﬁziente teknologikoen bektorea eta irabazia ondokoak direla:
a4
=


3
2


, c4 = 3.
Eredu berriaren hasierako taularako egin beharreko kalkuluak ondokoak dira:
y4
= B
−1a
4
=


1
2
−
1
2
−
1
2
1




3
2


=


1
2
1
2


z4 − c4 = (3, 2)


1
2
1
2


− 3 =
5
2
− 3 = −
1
2
< 0.
z4 − c4 balio adierazlea negatiboa da; bideragarritasun duala galdu egin da eta
simplex primal algoritmoa erabiliko dugu.
x1
x2
x3
x4
x5
x6
0
0
1 −
1
2
1
2
1
2
35
3 a1
1
0
1
1
2
1
2
−
1
2
5
2 a2
0
1 −
1
2
1
2
−
1
2
1 10 1
1
0
2
0
1
0 40
3 a4
2
0
2
1
1 −1 10
2 a2 −1
1 −
3
2
0 −1
3
2
5
Soluzio optimoa
x∗
1 = 0, x
∗
2 = 5, x
∗
3 = 0 eta x
∗
4 = 10 da, eta helburu funtzioa-
ren balio optimoa
z∗ = 40. Soluzio optimo honek adierazten du D produktu mota
ekoiztea komeni dela
A ekoitzi beharrean, eta B produktuaren ekoizpenarekin
aurrera jarraituko dela.
2
4.7
Murrizketa berriak
Izan bitez eredu lineal bat (1. Eredua) eta bere taula optimoa.
m murrizketa dituen
1. Ereduan murrizketa bat erantsiz gero, 2. Eredua lortzen da.
OpenCourseWare, UPV/EHU

4.7. Murrizketa berriak
143
1. Eredua
2. Eredua
max
z = c1x1 + · · · + cnxn
max
z = c1x1 + · · · + cnxn
hauen mende
hauen mende
a11x1 + · · · + a1nxn ≤ b1
a11x1 + · · · + a1nxn ≤ b1
..
.
..
.
..
.
..
.
am1x1 + · · · + amnxn ≤ bm
am1x1 + · · · + amnxn ≤ bm
x1, · · · , xn ≥ 0
am+1,1x1 + · · · + am+1,nxn ≤ bm+1
x1, · · · , xn ≥ 0
4.5 Irudian ikus daiteke 1. Ereduaren taula optimoa. Bertan ikus daiteke oi-
narriko bektoreei dagozkien zutabeetan aurkitzen dela identitate matrizea. Taula
horretan murrizketa bat eransten bada, 2. Eredurako hasierako taula lortzen da.
Dena den, murrizketa zuzenean taulan sartzearen ondorioz, identitate matrizea ez
da taula horretan inon ageriko.
1
0
0
1
*
.
.
.
.
.
0
.
.
. .
. . .
.
.
.
.
’
0
.
.
*
*
* *
*
*
*
*
* *
* *
* *
.
.
.
.
.
.
.
.
.
.
1
.
0
1
.
.
.
.
.
* *
. .
1
0
0
* *
* *
.
.
.
.
.
.
0
.
0
Oinarriko aldagaiak
Oinarriko
bektoreak
I matrizea
Murrizketa
Murrizketa berriaren
nasaitze-aldagaia
berria
xj
aj
1. Eredurako taula optimoa
2. Eredurako hasierako taula
4.5. Irudia: Murrizketa berria eranstea.
Taulan, oinarriko bektoreei dagozkien zutabeetan identitate matrizea eduki
ahal izateko, errenkaden artean eragiketak egin behar dira. Horrek bideragarri-
tasun primalaren galera eragin dezake (ikus 4.6 Irudia).
Aldaketa hauen guztien ondorioz, bi kasu gerta daitezke:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

144
4. Sentikortasunaren analisia
*
* *
* *
*
.
.
* *
 
1 .  . . 
 0 .  .  .  1
0
.
.
.
.
.
.
* .  .  .  *
*
0
.
.
.
1
*
1 .  .  . 0
.
.
.
0 .  .  .  1
0
.
1
0 .  .  .  0
* *
*
*
*
.
.
.
.
*
*
.
.
.
.
.
.
.
.
.
*
*
.
.
.
.
*
*
*
.
.
*
.
xj
xj
aj
aj
4.6. Irudia: Murrizketa berria: errenkaden arteko oinarrizko eragiketak
1. Kasua. 2. Ereduaren hasierako taulan bideragarritasun primala baldin ba-
dago, taula optimoa da
2. Kasua. 2. Ereduaren hasierako taulan bideragarritasun primala galdu egin
bada, simplex dual algoritmoa erabili behar da taula optimoa kalkulatzeko.
Adibidea. Har dezagun 4.2 Ataleko problema eta azter dezagun murrizketa
berri bat eransteak soluzio optimoan sortzen duen eragina. Murrizketa berri ho-
nen bidez
A, B eta C produktu moten ekoizpenean lehengai berri bat erabiltzea
errentagarri izango ote den aztertu nahi da.
Lehenengo aldaketa. Demagun lehengai berri horren 20 unitate ditugula, eta
lehengai horri dagozkion koeﬁziente teknologikoak ondoko murrizketan agertzen
direnak direla:
x1 + x2 + x3 ≤ 20
Aztertu nahi da murrizketa berri honek soluzio optimoan izango duen eragina.
Murrizketari nasaitze-aldagai bat gehituz forma estandarrean jarriko dugu.
x1 + x2 + x3 + x6 = 20
Hasierako ereduaren taula optimoan sartuko dugu murrizketa berria.
OpenCourseWare, UPV/EHU

4.7. Murrizketa berriak
145
0
0
0
35
3
2
0
1
0
0
1
0
1
0
10
1
1
1
20
0
5
0
1
1
1
x1
x2
x3
x4 x5
x6
a1
a2
a6
1
2
1
2
1
2
−
1
2
−
1
2
−
1
2
B
= (a1 a2 a6) oinarriari dagozkion zutabeetan koordenatu kanonikoek egon
behar dute, eta hori ez da horrela gertatzen aurreko taulan. Horretarako, erren-
kaden artean ondoko eragiketa egin behar da: 3 errenkada
− 1 errenkada − 2
errenkada. Honako taulan ikus daiteke a1
, a2, a6 bektoreen koordenatuek identi-
tate matrizea osatzen dutela.
0
0
0
35
3
2
0
1
0
0
1
0
0
10
1
5
0
5
0
1
1
1
0
x1
x2
x3
x4
x5
x6
a1
a2
a6
1
2
1
2
1
2
1
2
−
1
2
−
1
2
−
1
2
−
1
2
Kasu honetan bideragarritasun primala ez da galdu, hortaz, soluzio optimoa
x∗
1 =
5, x
∗
2 = 10 eta x
∗
3 = 0 da eta helburu funtzioaren balio optimoa z
∗ = 35. Hau
da, soluzio optimoa berbera da, nahiz eta orain produktuen ekoizpenean lehengai
berria ere erabiltzen den.
Bigarren aldaketa. Demagun aurrekoaren antzeko aldaketa bat egin nahi de-
la, baina kasu honetan murrizketa berria hau izanik:
x1 + x2 + x3 ≤ 10
Murrizketa berria forma estandarrean ondokoa da:
x1 + x2 + x3 + x6 = 10
Murrizketa taulan sartu eta a6 bektorea oinarri optimoan sartzen da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

146
4. Sentikortasunaren analisia
0
0
0
35
3
2
0
1
0
0
1
0
1
0
10
1
1
1
0
5
0
1
1
1
10
x1
x2
x3
x4 x5
x6
a1
a2
a6
1
2
1
2
1
2
−
1
2
−
1
2
−
1
2
Kasu honetan ere, aurrekoan bezala, errenkaden artean eragiketak egin behar dira
taula zuzena izan dadin. Egin beharreko kalkulua ondokoa da: 3 errenkada
− 2
errenkada
− 1 errenkada.
0
0
0
35
3
2
0
1
0
0
1
0
1
0
10
1
5
0
1
1
−5
0
0
x1
x2
x3
x4 x5
x6
a1
a2
a6
1
2
1
2
1
2
1
2
−
1
2
−
1
2
−
1
2
−
1
2
Eragiketa horiek egin ondoren, bektoreak ondo adierazita daude B
= (a1 a2 a6)
oinarriarekiko. Dena den, aldaketen ondorioz bideragarritasun primala galdu egin
da; simplex dual algoritmoa erabiliko dugu soluzio optimoa kalkulatzeko.
x1 x2
x3
x4
x5
x6
0
0
1
1
2
1
2
0
35
3 a1
1
0
1
1
2
−
1
2
0
5
1
2 a2
0
1 −
1
2
−
1
2
1
0
10 −2
0 a6
0
0
1
2
0
−
1
2
1 −5
0
0
3
2
1
2
0
1
30
3 a1
1
0
1
2
1
2
0 −1
10
2 a2
0
1
1
2
−
1
2
0
2
0
0 a5
0
0 −1
0
1 −2
10
OpenCourseWare, UPV/EHU

4.7. Murrizketa berriak
147
Lehengai berria erabiliz, soluzio optimoa
x∗
1 = 10, x
∗
2 = 0 eta x
∗
3 = 0 da eta
helburu funtzioaren balio optimoa
z∗ = 30 da.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

148
4. Sentikortasunaren analisia
OpenCourseWare, UPV/EHU

5. Kapitulua
Garraio-problema eta
Esleipen-problema
Gai honetan bi problema lineal berezi ebazteko erabiltzen diren algoritmoak aur-
kezten dira: garraio-problemarako algoritmoa eta esleipen-problemarako algorit-
moa.
5.1
Garraio-problema
Programazio linealaren tekniken aplikazioan garraio-problema izan zen aztertu
ziren problema garrantzitsuetatik lehena. Garraio-
problema eredu lineal baten bi-
dez adieraz daiteke, baita ebazpenerako simplex algoritmoa erabili ere. Dena den,
eta garraio-
problemari dagokion eredu linealaren egitura berezia kontuan hartuz,
ebazpenerako eraginkorragoa den metodo bat eraiki daiteke. Kapitulu honetan
metodo hori aztertuko dugu.
Garraio-problema produktu baten unitateak
m iturburu-puntutatik, I1, . . . , Im,
n helburu-puntutara, H1, . . . , Hn, garraiatzean datza, ondoko baldintzapean:
• Ii, i = 1, . . . , m, iturburu-puntu bakoitzaren produktu unitateen eskaintza
ai da.
• Hj, j = 1, . . . , n, helburu-puntu bakoitzaren eskaria bj da.
• Ii iturburu-puntutik Hj helburu-puntura produktu unitate bat garraiatzearen
kostua
cij da, i = 1, . . . , m, j = 1, . . . , n.
149

150
5. Garraio-problema eta Esleipen-problema
Ii iturburu-puntu bakoitzetik Hj helburu-puntu bakoitzera garraiatuko den xij
produktu unitate kopurua erabakitzean datza problema, produktu unitateen ga-
rraioa kostu minimoan egingo delarik eta eskaintzek eta eskariek ﬁnkatutako mu-
rrizketak kontuan izango direlarik.
Garraio-problemari dagokion eredu lineala ondokoa da:
min z =
m
i=1
n
j=1
cijxij
hauen mende
n
j=1
xij ≤ ai, i = 1, . . . , m
m
i=1
xij ≥ bj, j = 1, . . . , n
xij ≥ 0, i = 1, . . . , m, j = 1, . . . , n
Ereduaren lehenengo
m murrizketak iturburu-puntuen eskaintzei dagozkie, eta
eskaintzak ezin direla gainditu adierazten dute. Hurrengo
n murrizketek helburu-
puntuen eskariak zerbitzatuak izango direla ziurtatzen dute. Aldagaiek ezin dituz-
te balio negatiboak hartu, garraiatuak izango diren produktu unitateak adierazten
dituztelako.
Garraio-problemaren forma estandarra hau da:
min z =
m
i=1
n
j=1
cijxij
hauen mende
n
j=1
xij = ai, i = 1, . . . , m
m
i=1
xij = bj, j = 1, . . . , n
xij ≥ 0, i = 1, . . . , m, j = 1, . . . , n
Adibidea. Demagun herrialde batean badirela ogia ekoizten duten 2 enpresa:
A1 eta A2. Enpresa horietan ekoitzitako ogia 3 okindegitara bidaltzen da bertan
saldua izateko:
O1, O2 eta O3. Enpresen eskaintzak, okindegien eskariak eta uni-
tateko garraio-kostuak ondoko graﬁkoan emanak datoz.
OpenCourseWare, UPV/EHU

5.1. Garraio-problema
151
A1
A2
O1
O2
O3
8
6
10
10
4
9
2000
2000
2500
1500
1000
Problema adieraziko duen eredu lineala idazteko, ondoko erabaki-aldagaiak
deﬁnituko ditugu.
xij: Ai iturburu-puntutik Oj helburu-puntura garraiatuko den ogi kopurua,
i = 1, 2, j = 1, 2, 3.
Eredu lineala ondokoa da:
min z = 8x11 + 6x12 + 10x13 + 10x21 + 4x22 + 9x23
hauen mende
x11 +x12 +x13
= 2000
x21
+x22 +x23 = 2500
x11
+x21
= 1500
x12
+x22
= 2000
x13
+x23 = 1000
x11, x12, x13, x21, x22, x23 ≥ 0
Murrizketak berdintzaz idatz ditzakegu eskaintza totala eta eskari totala ber-
dinak direlako. A matrizearen egitura aztertzeko, eredua matrize-forman jarriko
dugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

152
5. Garraio-problema eta Esleipen-problema
min z = (8 , 6 , 10 , 10 , 4 , 9)














x11
x12
x13
x21
x22
x23














hauen mende











1 1 1 0 0 0
0 0 0 1 1 1
1 0 0 1 0 0
0 1 0 0 1 0
0 0 1 0 0 1

























x11
x12
x13
x21
x22
x23














=











2000
2500
1500
2000
1000











x11, x12, x13, x21, x22, x23 ≥ 0
Adibide honetan 2 iturburu-puntu,
m = 2, eta 3 helburu-puntu, n = 3, daude.
A matrizeak
2 + 3 errenkada eta 2 × 3 zutabe ditu. Egiazta daiteke matrizearen
heina
4 dela.
Bestalde, matrizeko zutabe guztietan 2 osagai besterik ez dago 1 balioarekin,
gainerako osagaiak 0 direlarik. Garraio-problemen erabaki-aldagaiak izendatzeko
bi azpi-indize erabili ditugun bezala, A matrizeko zutabe-
bektoreak a11, a12, a13,
a21, a22, a23 izendatuko ditugu, eta azter dezakegu bektore horietako bakoitzean
zein posiziotan dauden batekoak. a11 bektoreak, adibidez,
1 posizioan eta m + 1
posizioan ditu batekoak, a21 bektoreak
2 eta m + 1 posizioetan, a23 bektoreak 2
eta
m + 3 posizioetan. Oro har, esan dezakegu A matrizeko aij bektoreak i eta
m + j posizioetan dituela batekoak.
2
Hortaz, A matrizearen egitura iturburu-puntu kopuruaren eta helburu-puntu
kopuruaren araberakoa da.
m iturburu-puntu eta n helburu-puntu dituen edozein
garraio-problemak A matrize berbera izango du. Matrize honek
m + n errenkada
OpenCourseWare, UPV/EHU

5.2. Matrize-forma
153
eta
m × n zutabe ditu. A matrizearen heina m + n − 1 da, hau da, oinarriak m +
n − 1 bektorez osatuta daude. A matrizearen zutabe-
bektoreek bi 1eko besterik ez
dituzte eta gainerako osagaiak 0 dira. A matrizeko aij bektorearen 1ekoak i eta
m+j posizioetan daude. Beraz, garraio-problemaren datu garrantzitsuak iturburu-
puntu kopurua, helburu-puntu kopurua, eskaintzak, eskariak eta garraio-kostuak
dira. Informazio hori guztia biltzen da garraio-problemarako matrize-forman.
5.2
Matrize-forma
Garraio-problemaren datuak taula moduan jasotzen dira. Taula honi garraio-
problemarako matrize-forma edo garraio-kostuen taula deitzen zaio (ikus 5.1.
Irudia). Bertan aurkitzen ditugu iturburuak eskaintzekin, helburuak eskariekin
eta unitateko garraio-kostuak.
H1
H2
· · ·
Hn
Eskaintza
I1
c11
c12
· · ·
c1n
a1
I2
c21
c22
· · ·
c2n
a2
..
.
..
.
..
.
. ..
..
.
..
.
Im
cm1 cm2
· · ·
cmn
am
Eskaria
b1
b2
· · ·
bn
5.1. Irudia: Garraio-problemarako matrize-forma edo Garraio-kostuen taula
Adibidea. 150. orrialdeko adibidearen matrize-forma honakoa da.
O1
O2
O3
Eskaintza
A1
8
6
10
2000
A2
10
4
9
2500
Eskaria
1500 2000 1000
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

154
5. Garraio-problema eta Esleipen-problema
Taularen lehenengo zutabean problemaren iturburu-puntuak agertzen dira,
A1
eta
A2 enpresak, eta lehenengo errenkadan helburu-puntuak, O1, O2 eta O3 okin-
degiak. Enpresen eskaintzak taulako azken zutabean agertzen dira, eta okinde-
gien eskariak azken errenkadan. Taulako laukitxo bakoitzean agertzen da enpre-
sa bakoitzetik okindegi bakoitzera ogi bat garraiatzearen kostua,
cij, i = 1, 2,
j = 1, 2, 3.
2
5.3
Adibide praktikoak
1. Adibidea. Enpresa batek bere ekoizpena antolatu behar du hurrengo urteko 4
hiruhilekoetarako. Izango dituen eskariak aurrikusi ditu:
 200 unitate lehen hiruhi-
lekoan, 150, 200 eta 100 hurrengo hiruetan, hurrenez hurren. Hiruhileko bateko
ekoizpen-ahalmena 150 unitatekoa da. Hiruhileko bateko eskaria ezin daiteke
geroagoko hiruhileko batean zerbitzatu. Produktu unitate bat ekoiztearen kos-
tua 2koa da, eta ekoitzitako produktu unitate hori biltegiratu eta beste hiruhileko
baten eskaria zerbitzatzeko erabiltzen bada, biltegiratutako hiruhileko bakoitzeko
0.5eko biltegiratze-kostua gehitu beharko zaio produktu unitate bakoitzari.
Problema hau garraio-problemarako matrize-forman planteatzeko, 4 hiruhi-
lekoak iturburu-puntu eta helburu-puntu izango dira.
xij erabaki-aldagaiek hau
adierazten dute:
j hiruhilekoaren eskaria zerbitzatzeko, i hiruhilekoan sortuko
den produktu unitate kopurua,
i = 1, . . . , 4, j = 1, . . . , 4.
• Iturburu-puntuen eskaintza: 150, 150, 150, 150.
• Helburu-puntuen eskaria: 200, 150, 200, 100.
• i = j bada, ekoizpenaren kostua cij = 2 da, i, j = 1, . . . , 4.
• i < j bada, cij = ekoizpen-kostua + biltegiratze-kostua. Adibidez, c12 =
2.5, c13 = 3, eta modu berean kalkulatzen dira gainerakoak.
• i > j bada, cij kostuari behar bezain handia den M kostua egokituko diogu,
xij oinarriko izatea ekiditeko.
Problema honi dagokion garraio-kostuen taula hau da:
OpenCourseWare, UPV/EHU

5.3. Adibide praktikoak
155
1
2
3
4
Eskaintza
1
2
2.5
3
3.5
150
2
M
2
2.5
3
150
3
M
M
2
2.5
150
4
M
M
M
2
150
Eskaria
200 150 200 100
2
2. Adibidea. Enpresa batek produktu mota bakar bat ekoizten du hiru ekoizpen-
zentrotan,
A1, A2 eta A3. Ekoizpen-zentro hauetako bakoitzaren ekoizpen-ahalmena
1500 unitatekoa da hilabeteko. Enpresak lau bezerorentzat ekoizten du produk-
tua, beren hilabeteko eskariak 1000, 1200, 1500 eta 1000 unitatekoak direlarik,
hurrenez hurren.
Produktuak enpresari 110 unitateko irabazia sortzen dio, ekoizpen-kostua eta
salmenta-prezioa kontuan izanik. Hiru ekoizpen-zentroetatik lau bezeroengana
produktu unitatea garraiatzearen kostua ondoko taulan zehazten da:
1
2
3
4
A1 30 10 25 20
A2 15 25 30 10
A3 20 30 15 20
Enpresak ahalik eta irabazi handiena lor dezan, bere hilabeteko ekoizpena pla-
niﬁkatzen lagunduko dion garraiorako matrize-forma idatziko dugu.
• Eskaintzak: a1 = 1500, a2 = 1500, a3 = 1500.
• Eskariak: b1 = 1000, b2 = 1200, b3 = 1500, b4 = 1000.
• Kostuen taulako cij balioak Ai ekoizpen-zentroan ekoitzi eta j bezeroari
saltzeak sortutako irabazia adierazten du,
i = 1, 2, 3, j = 1, 2, 3, 4, eta
honela kalkulatzen da:
cij = ekoizpen-irabazia − garraio-kostua. Adibidez,
c11 = 110 − 30 = 80,
c12 = 110 − 10 = 100,
c33 = 110 − 15 = 95.
Gainerako irabaziak modu berean kalkulatzen dira.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

156
5. Garraio-problema eta Esleipen-problema
Helburu funtzioa maximizatzea duen garraio-problema honi dagokion matrize-
forma ondokoa da:
1
2
3
4
Eskaintza
A1
80
100
85
90
1500
A2
95
85
80
100
1500
A3
90
80
95
90
1500
Eskaria
1000 1200 1500 1000
2
5.4
Teoremak eta deﬁnizioak
Garraio-problemarako soluzio optimo baten bilaketarako simplex metodoa egoki-
tzeko, problema mota honetako soluzioek betetzen dituzten zenbait teorema az-
tertuko ditugu.
5.4.1 Teorema. Garraio-problemak soluziorik izan dezan, baldintza beharrezkoa
eta nahikoa da eskaintza totala eta eskari totala berdina izatea.
Froga. Garraio-problemaren forma estandarraren arabera, iturburu-puntu ba-
koitzaren
ai, i = 1, . . . , m, eskaintzak ondoko murrizketa betetzen du:
n
j=1
xij = ai,
i = 1, . . . , m
Iturburu-puntu guztien eskaintzak batuz gero, eskaintza totala honakoa da:
m
i=1
n
j=1
xij =
m
i=1
ai
(5.1)
Bestalde, helburu-puntuen
bj, j = 1, . . . , n, eskariek ondoko murrizketak bete-
tzen dituzte:
m
i=1
xij = bj,
j = 1, . . . , n
OpenCourseWare, UPV/EHU

5.4. Teoremak eta deﬁnizioak
157
Eskari totala honakoa da:
n
j=1
m
i=1
xij =
n
j=1
bj
(5.2)
(5.1) eta 
(5.2) formuletan, berdintzaren ezkerreko atalak berdinak dira. Hortaz,
formula horiek beteko dira baldin eta soilik baldin
m
i=1
ai =
n
j=1
bj
2
Aurreko teoreman frogatzen da garraio-problema batek soluziorik izan dezan,
eskaintza totala eta eskari totala berdinak izan behar direla. Dena den, hori ez da
hala gertatzen garraio-
problema guztietan. Eskaintza totala eta eskari totala ber-
dinak ez diren kasuetan problema egokitzea beharrezkoa izango da, eta ondoren
lortutako soluzioa interpretatuko da.
5.4.1 Deﬁnizioa. (Problema orekatua.) Garraio-problema bat orekatua dela esa-
ten da baldin
m
i=1
ai =
n
j=1
bj .
Garraio-problema baten soluzio bat kalkulatzeko eman beharreko lehen urra-
tsa problema orekatzea da. Bi kasu gerta daitezke.
1. Kasua. Eskaintza eskaria baino txikiagoa da,
m
i=1
ai <
n
j=1
bj.
Eskaintza totalarekin ezin daiteke eskari totala zerbitzatu. Kasu honetan,
gezurrezko iturburu-puntu bat sortzen da,
Im+1. Bere gezurrezko eskaintza
eta garraio-kostua honakoak izango dira:
am+1 =
n
j=1
bj −
m
i=1
ai.
cm+1,j = 0, j = 1, . . . , n.
Im+1 gezurrezko iturburu-puntuaren am+1 eskaintza benetakoa ez denez,
soluzioren batean gezurrezko iturburu-puntutik produktu unitateak jasotzen
dituzten helburu-puntuen eskariak behar bezala zerbitzatuak izan ez dire-
la interpretatuko dugu. Zenbait kasu praktikotan posible da
cm+1,j, j =
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

158
5. Garraio-problema eta Esleipen-problema
1, . . . , n, gezurrezko garraio-kostuei zeroren desberdina den balioren bat
esleitzea, baldin eta eskaria ez zerbitzatzeagatik zigorren bat adierazi nahi
bada, adibidez.
Adibidea. Har dezagun ondoko garraio-problema matrize-forman:
1
2
3
Eskaintza
1
2
4
3
10
2
6
1
4
20
Eskaria
20 20 20
• Eskaintza totala = a1 + a2 = 10 + 20 = 30.
• Eskari totala = b1 + b2 + b3 = 20 + 20 + 20 = 60.
Eskaintza totala eskari totala baino txikiagoa da. Problema orekatzeko
C
gezurrezko iturburu-puntua sortzen da, bere eskaintza
a3 = 60 − 30 = 30
izango delarik.
c31, c32 eta c33 garraio-kostuak zero dira. Garraio-problema
orekaturako matrize-forma ondokoa da:
1
2
3
Eskaintza
1
2
4
3
10
2
6
1
4
20
3
0
0
0
30
Eskaria
20 20 20
2
2. Kasua. Eskaria eskaintza baino txikiagoa da.
m
i=1
ai >
n
j=1
bj
Eskaintza handiagoa izanik, gezurrezko helburu-puntu bat sortzen da,
Hn+1,
bere gezurrezko eskaria eta garraio-kostuak ondokoak direlarik:
bn+1 =
m
i=1
ai −
n
j=1
bj.
OpenCourseWare, UPV/EHU

5.4. Teoremak eta deﬁnizioak
159
ci,n+1 = 0, i = 1, . . . , m.
Gezurrezko helburu-puntuaren eskaria eskaintza totalaren eta eskari totalaren
arteko diferentzia da. Gezurrezko helburu-puntura garraiatutako produktu unita-
teen garraio-kostua zero da, iturburu-
puntua edozein delarik ere, produktu unita-
te horiek ez direlako errealak eta, beraz, garraioa ez delako gauzatuko. Zenbait
kasutan, zeroren desberdina den garraio-
kosturen bat esleitu daiteke, garraiatuak
izango ez diren unitateek sortuko duten biltegiratze kostua adierazteko, adibidez.
Adibidea. Har dezagun ondoko garraio-problema matrize-forman.
1
2
3
Eskaintza
1
3
2
1
50
2
6
4
4
50
Eskaria
20 20 20
• Eskaintza totala = a1 + a2 = 50 + 50 = 100.
• Eskari totala = b1 + b2 + b3 = 20 + 20 + 20 = 60.
Eskaintza totala eskari totala baino handiagoa da. Problema orekatzeko ge-
zurrezko
4 iturburu-puntua sortzen da, bere eskaria b4 = 100 − 60 = 40 izan-
go delarik.
c14 eta c24 garraio-kostuak zero dira. Garraio-problema orekaturako
matrize-forma ondokoa da:
1
2
3
4
Eskaintza
1
3
2
1
0
50
2
6
4
4
0
50
Eskaria
20 20 20 40
2
5.4.2 Teorema. Garraio-problema orekatu orok badu soluzio bideragarririk.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

160
5. Garraio-problema eta Esleipen-problema
Froga. Izan bedi garraio-problema orekatu bati dagokion eredu lineala forma
estandarrean. 5.4.1 Teoreman frogatu da problemak baduela soluziorik. Froga
dezagun orain soluzio bideragarria existitzen dela. Izan bedi
T =
m
i=1
ai =
n
j=1
bj
Egiazta daiteke
xij =
aibj
T ,
i = 1, . . . , m, j = 1, . . . , n, soluzioa dela, hau da,
murrizketak betetzen dituela. Gainera, bideragarria da,
xij ≥ 0, i = 1, . . . , m,
j = 1, . . . , n, betetzen delako.
2
5.4.3 Teorema. Garraio-problema orekatu orok badu oinarriko soluzio bidera-
garririk. Soluzio horrek gehienez
m + n − 1 aldagai positibo ditu.
Hurrengo atalean bi metodo aztertuko ditugu garraio-problema baten oinarriko
soluzio bideragarri bat kalkulatzeko: Ipar-mendebaldeko ertzaren metodoa eta
Vogel-en metodoa.
5.5
Hasierako oinarriko soluzio bideragarria
Garraio-problemarako soluzio bat kalkulatzeko, garraio-kostuen taularen dimen-
tsio berberak dituen beste taula bat erabiliko dugu. Taula honek garraio-ﬂuxuen
taula izena du (ikus 5.2. Irudia), eta bertan kokatuko ditugu garraio-
ﬂuxuak, hau
da, iturburu-puntu bakoitzetik helburu-
puntu bakoitzera garraiatuko den produktu
unitate kopuruak.
5.5.1
Ipar-mendebaldeko ertzaren metodoa
Garraio-
problema orekatu bat izanik, ondoko urratsei jarraituz hasierako oinarriko
soluzio bideragarri bat lortzen da.
1. urratsa. Garraio-ﬂuxuen taulan ipar-mendebaldeko
(i, j) ertza aukeratu
(hasieran
i = 1, j = 1).
2. urratsa. Aukeratutako posizioan
xij aldagaiari ahal den ﬂuxurik handiena
esleitu,
xij = min{ai, bj}. Ondoren, ai eskaintza eta bj eskaria eguneratu
honela:
OpenCourseWare, UPV/EHU

5.5. Hasierako oinarriko soluzio bideragarria
161
H1
H2
· · ·
Hn
Eskaintza
I1
x11
x12
· · ·
x1n
a1
I2
x21
x22
· · ·
x2n
a2
..
.
..
.
..
.
. ..
..
.
..
.
Im
xm1 xm2
· · ·
xmn
am
Eskaria
b1
b2
· · ·
bn
5.2. Irudia: Garraio-problemarako ﬂuxuen taula
• Minimoa ai bada, Ii iturburu-puntuaren eskaintza zero bihurtuko da.
Ondoko kalkuluetarako taulako
i. errenkada ezabatu behar da. bj es-
karia eguneratu egingo da honela:
bj − ai.
• Minimoa bj bada, Hj helburu-puntuaren eskaria zerbitzatua geratzen
da, eskaria zero bihurtuko da eta taulako
j. zutabea ezabatuko da, au-
rrerantzean egingo diren kalkuluetan kontuan ez izateko.
ai eskaintza
eguneratu egingo da:
ai − bj.
• ai eskaintzak eta bj eskariak balio berbera badute, iturburuaren es-
kaintza eta helburuaren eskaria aldi berean zero bihurtuko dira. Au-
rrerantzean egingo diren kalkuluetarako
i. errenkada eta j. zutabea
ezabatuko dira.
3. urratsa. Bi kasu gerta daitezke.
• Ezabatua izan ez den errenkada edo zutabe bakarra baldin badago tau-
lan, geratzen diren produktuen eskaintza eta eskariak ezabatu gabeko
posizioetara esleitzen dira. Amaitu.
• Bestela, 1. urratsera joan.
Adibidea. Har dezagun 153. orrialdeko garraio-problema orekatua matrize-
forman.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

162
5. Garraio-problema eta Esleipen-problema
O1
O2
O3
Eskaintza
A1
8
6
10
2000
A2
10
4
9
2500
Eskaria
1500 2000 1000
Eskaintza =
2000 + 2500 = 1500 + 2000 + 1000 = Eskaria
Lehenengo iterazioa.
1. urratsa. Ipar-mendebaldeko ertza aukeratzen dugu, garraio-ﬂuxuen taulako
1. errenkada eta 1. zutabea. Taulan izar batez erakusten dugu aukeratutako
posizioa.
Eskaintza
Eskaria
O1
O2
O3
A1
A2
*
1000
1500
2000
2000
2500
2. urratsa. Posizio horretan garraio-ﬂuxu maximoa esleitu eta eskaintza eta
eskaria eguneratu.
x11 = min {a1, b1} = min {2000, 1500} = 1500
A1 iturburuaren eskaintza eguneratua: a1 = 2000 − x11 = 500.
O1 helburuaren eskari eguneratua: b1 = 1500 − x11 = 0.
O1 helburu-puntuaren eskaria zerbitzatua izan da. Garraio-ﬂuxuen taula-
ko 1. zutabea ezabatuko dugu, aurrerantzean egingo ditugun kalkuluetan
kontuan ez izateko.
OpenCourseWare, UPV/EHU

5.5. Hasierako oinarriko soluzio bideragarria
163
Eskaintza
Eskaria
O1
O2
O3
A1
A2
*
1000
1500
1500
2000
2000
2500
500
3. urratsa. Garraio-ﬂuxuen taulan ezabatu gabeko errenkada edo zutabe bat
baino gehiago geratzen da. Algoritmoaren 1. urratsean jarraituko dugu
iterazio berri batekin.
Bigarren iterazioa. Aurreko iterazioan egin bezala, taulan ezabatu gabe-
ko ipar-mendebaldeko ertza aukeratuko dugu, bertan garraio-ﬂuxua esleitzeko.
Oraingoan 1. errenkada eta 2. zutabea aukeratuko ditugu (ikus aurreko taulako
izarra).
x12 = min {500, 2000} = 500. Eskaintza eta eskaria eguneratuko ditugu,
a1 = 500−x12 = 0 eta b2 = 2000−500 = 1500. A1 iturburu-puntuaren eskaintza
agortu denez, taulako 1. errenkada ezabatzen dugu aurrerantzean emango diren
urratsetan kontuan ez izateko. Garraio-ﬂuxuen taula eguneratua honela geratzen
da:
Eskaintza
Eskaria
O1
O2
O3
A1
A2
1000
1500
1500
1500
2000
2000
2500
500
500
Taulan ezabatua izan ez den errenkada bakarra geratzen denez,
A2 iturburuari
dagokiona, esleituak izan ez diren produktu unitate guztiak ezabatu gabeko posi-
zioetan esleitzen ditugu,
x22 = 1500 eta x23 = 1000, eskaintza eta eskari guztiak
zero bihurtuko direlarik. Honela lortzen da hasierako soluzio bat.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

164
5. Garraio-problema eta Esleipen-problema
Eskaintza
Eskaria
O1
O2
O3
A1
A2
1000
1000
1500
1500
1500
2000
2000
2500
500
Hasierako soluzio hau bideragarria eta oinarrikoa da. Taulan
m + n − 1 =
2 + 3 − 1 = 4 posiziotan esleitu dira garraio-ﬂuxuak, oinarriko posizioak dira.
• Soluzioa.
x11 = 1500, x12 = 500, x13 = 0, x21 = 0, x22 = 1500, x23 = 1000.
• Garraio-kostua.
z = (1500 × 8) + (500 × 6) + (1500 × 4) + (1000 × 9) = 30000.
2
Ipar-mendebaldeko ertzaren metodoa garraio-problemarako hasierako oinarri-
ko soluzio bideragarri bat kalkulatzeko metodo sinplea da. Soluzioa kalkulatzeko
prozesuan, metodo honek ez du garraio-
kostuen taula kontuan hartzen, eta garraio-
ﬂuxuak ipar-mendebaldeko posizioetan kokatzen ditu uneoro. Metodo honen ho-
bekuntza bat posizio bat aukeratzen denean, garraio-
kostuak kontuan hartzean da-
tza.
5.5.2
Vogel-en metodoa
Ipar-mendebaldeko ertzaren metodoa eta Vogel-en metodoa garraio-ﬂuxua koka-
tzeko posizioa aukeratzeko moduan desberdintzen dira, algoritmoaren 1. urra-
tsean. Posizio hori aukeratzeko errenkadakako eta zutabekako diferentziak kalku-
latzen dira modu honetan:
• EDi = i errenkadako bi kosturik txikienen arteko diferentzia balio absolu-
tuan,
i = 1, . . . , m.
• ZDj = j zutabeko bi kosturik txikienen arteko diferentzia balio absolutuan,
j = 1, . . . , n.
OpenCourseWare, UPV/EHU

5.5. Hasierako oinarriko soluzio bideragarria
165
Errendakako eta zutabekako diferentzien kalkulua erabiltzen da garraio-ﬂuxu
bat kokatzeko unean garraio-kostuen arabera egokia den posizio bat aukeratzeko.
Vogel-en metodoa aplikatuz garraio-problema orekatu baten hasierako oinarriko
soluzio bideragarri bat lortzeko, ondoko urratsak eman behar dira:
1. urratsa. Garraio-kostuen taulan
EDi errenkadakako eta ZDj zutabekako
diferentziak kalkulatu. Diferentziarik handieneko errenkada edo zutabea
aukeratu, eta bertan
cij kosturik txikieneko (i, j) posizioa.
2. urratsa. Aukeratutako posizioan, garraio-ﬂuxuen taulan
xij aldagaiari ahal
den ﬂuxurik handiena esleitu,
xij = min{ai, bj}. Ondoren, ai eskaintza eta
bj eskaria eguneratu honela:
• Minimoa ai bada, Ii iturburu-puntuaren eskaintza zero bihurtuko da.
Ondoko kalkuluetarako taulako
i. errenkada ezabatu behar da. bj es-
karia eguneratu egingo da honela:
bj − ai.
• Minimoa bj bada, Hj helburu-puntuaren eskaria zero bihurtuko da, eta
taulako
j. zutabea ezabatuko da aurrerantzean egingo diren kalkulue-
tan kontuan ez izateko.
ai eskaintza eguneratu egingo da: ai − bj.
• ai eskaintzak eta bj eskariak balio berbera badute, iturburuaren eskain-
tza eta helburuaren eskaria aldi berean egiten dira zero. Aurrerantzean
egingo diren kalkuluetarako
i. errenkada eta j. zutabea ezabatuko
dira.
3. urratsa. Bi kasu gerta daitezke.
• Ezabatua izan ez den errenkada edo zutabe bakarra baldin badago tau-
lan, geratzen diren produktuen eskaintza eta eskariak ezabatu gabeko
posizioetara esleitzen dira. Amaitu.
• Bestela, 1. urratsera joan.
Adibidea. Vogel-en metodoa erabiliz 153. orrialdeko garraio-problema ore-
katurako hasierako oinarriko soluzio bideragarri bat kalkulatuko dugu.
Lehenengo iterazioa.
1. urratsa. Garraio-kostuen taulan
EDi errenkadakako eta ZDj zutabekako
diferentziak kalkulatuko ditugu. Diferentziarik handieneko errenkada edo
zutabea aukeratuko dugu, (
max{2, 5, 2, 2, 1} = 5 duena, 2. errenkada) eta
bertan kosturik txikieneko posizioa, (
min{10, 4, 9} = 4 duena, (2, 2) posi-
zioa).
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

166
5. Garraio-problema eta Esleipen-problema
Garraio-kostuen taula
Garraio-ﬂuxuen taula
Eskain.
Eskain.
Eskaria
Eskaria
O1
O1
O2
O2
O3
O3
A1
A1
A2
A2
*
1000
1000
1500
1500
2000
2000
2000
2000
2500
2500
4
6
8
9
1
2
2
2
5
10
10
EDi
ZDj
2. urratsa. Aukeratutako posizioan ahal den garraio-ﬂuxurik handiena eslei-
tuko dugu.
x22 = min{2500, 2000} = 2000.
Eskaintza eta eskaria eguneratuko ditugu, eta 2. zutabea ezabatuko dugu,
O2 helburu-puntuaren eskaria zerbitzatua izan delako.
Garraio-kostuen taula
Garraio-ﬂuxuen taula
Eskain.
Eskain.
Eskaria
Eskaria
O1
O1
O2
O2
O3
O3
A1
A1
A2
A2
1000
1000
1500
1500
2000
2000
2000
2000
2500
500
0
4
6
8
9
10
10
3. urratsa. Taulan ezabatu gabeko errenkada bat eta zutabe bat baino gehiago
daudenez, 1. urratsera goaz.
Bigarren iterazioa.
Aurreko iterazioan egin bezala,
EDi eta ZDj diferentziak kalkulatuko ditugu
garraio-
kostuen taulan, ezabatu gabe dauden kostuak kontuan hartuz, eta diferen-
tziarik handiena aukeratuko dugu. Kasu honetan, diferentziarik handiena aukera-
tzean lehenengo errenkadan eta lehenengo zutabean berdinketa dagoenez, horie-
tako edozein aukeratuko dugu, adibidez 1. errenkada. Bertan kosturik txikiena
c11 = 8 denez, 
(1, 1) posizioa aukeratuta geratuko da. Posizio horretan garraio-
ﬂuxuen taulan ﬂuxu maximoa kokatuko dugu,
x11 = min{1500, 2000} = 1500,
eta eskaintza eta eskaria eguneratuko ditugu. Taulako 1. zutabea ezabatuko dugu,
O1 helburu-puntuaren eskaria zero bihurtu delako.
OpenCourseWare, UPV/EHU

5.6. Oinarriko soluzio bideragarrien hobekuntza
167
Garraio-kostuen taula
Garraio-ﬂuxuen taula
Eskain.
Eskain.
Eskaria
Eskaria
O1
O1
O2
O2
O3
O3
A1
A1
A2
A2
1000
1000
1500
1500
2000
2000
2000
2500
500
500
0
0
4
6
8
9
1
1
2
2
10
10
EDi
ZDj
Ezabatu gabeko zutabe bakarra geratzen denez, oraindik esleituak izan ez di-
ren eskaintza eta eskarietako produktu unitateak ezabatu gabe dauden posizioetara
esleituko ditugu, eta Vogel-en metodoaren aplikazioa amaituko da, ﬂuxuen taulan
garraio-problemarako hasierako oinarriko soluzio bideragarria dugularik.
Garraio-kostuen taula
Garraio-ﬂuxuen taula
Eskain.
Eskain.
Eskaria
Eskaria
O1
O1
O2
O2
O3
O3
A1
A1
A2
A2
1000
1000
1500
1500
1500
2000
2000
2000
2000
2000
2500
2500
500
500
4
6
8
9
10
10
• Soluzioa.
x11 = 1500, x12 = 0, x13 = 500, x21 = 0, x22 = 2000, x23 = 500.
• Garraio-kostua.
z = (8 × 1500) + (10 × 500) + (4 × 2000) + (9 × 500) = 29500.
Hasierako soluzio hau ipar-mendebaldeko ertzaren metodoa erabiliz kalkulatu
duguna baino hobea da, garraio-kostua txikiagoa delako.
2
5.6
Oinarriko soluzio bideragarrien hobekuntza
Oinarriko soluzio bideragarri bat hobetzeko, garraio-problemari dagokion eredu
duala erabiltzen da. Izan bedi garraio-problema orekatua.
min z =
m
i=1
n
j=1
cijxij
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

168
5. Garraio-problema eta Esleipen-problema
hauen mende
n
j=1
xij = ai,
i = 1, . . . , m
m
i=1
xij = bj,
j = 1, . . . , n
xij ≥ 0,
i = 1, . . . , m,
j = 1, . . . , n
Aldagai dualak
u1, . . . , um eta v1, . . . , vn izendatzen baditugu, dagokion eredu
duala honela geratzen da adierazita:
max G =
m
i=1
aiui +
n
j=1
bjvj
hauen mende
ui + vj ≤ cij, i = 1, . . . , m,
j = 1, . . . , n
ui, vj : ez-murriztuak,
i = 1, . . . , m,
j = 1, . . . , n
Adibidea. Har dezagun 150. orrialdeko garraio-problemari dagokion eredu
lineala. Dagokion eredu duala kalkulatuko dugu.
min z = 8x11 + 6x12 + 10x13 + 10x21 + 4x22 + 9x23
hauen mende
x11 +x12 +x13
= 2000
x21
+x22 +x23 = 2500
x11
+x21
= 1500
x12
+x22
= 2000
x13
+x23 = 1000
x11, x12, x13, x21, x21, x23 ≥ 0
Aldagai dualak
u1, u2, v1, v2 eta v3 badira, problema duala honakoa da:
max G = 2000u1 + 2500u2 + 1500v1 + 2000v2 + 1000v3
hauen mende
OpenCourseWare, UPV/EHU

5.6. Oinarriko soluzio bideragarrien hobekuntza
169
u1
+v1
≤ 8
u1
+v2
≤ 6
u1
+v3 ≤ 10
u2 +v1
≤ 10
u2
+v2
≤ 4
u2
+v3
≤ 9
ui, vj : ez-murriztuak
2
Garraio-problema baten soluzio optimoa kalkulatzeko erabiltzen den garraio-
problemarako algoritmoa simplex metodoaren egokitzapen bat da. Garraio-pro-
blemaren helburua minimizatzea da. Hasierako oinarriko soluzio bideragarri bate-
tik abiatuz, helburu funtzioari balio txikiagoa emango dion beste bat kalkulatuko
da. Horretarako, oinarri-
aldaketa bat egin behar da, oinarritik irtengo den bektore
bat eta oinarrian sartuko den beste bat aukeratuz. Aukeraketa hau hobekuntzaren
teoremaren irizpideei jarraituz egiten da.
5.6.1
Oinarrian sartuko den bektorearen aukeraketa
Garraio-problemarako ereduan
xij aldagaien bidez izendatu ditugu erabaki-alda-
gaiak,
i = 1, . . . , m, j = 1, . . . , n, cij dira garraio-
kostuak eta aij dira ereduko
A matrizeko bektoreak.
Gogora dezagun oinarriko soluzio bideragarri bat hobe daitekeen edo ez eraba-
kitzeko, oinarriko ez diren bektoreei dagozkien balio adierazleak kalkulatu behar
direla.
xij erabaki-aldagaiari dagokion balio adierazlea zij − cij da.
zij − cij = c
T
B B
−1a
ij − cij .
Aldagai dualen bektorea cT
B B
−1 dela kontuan hartuz,
c
T
B B
−1 = (u
1
, . . . , um, v1, . . . , vn)
orduan,
zij − cij = (u1, . . . , um, v1, . . . , vn)aij − cij.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

170
5. Garraio-problema eta Esleipen-problema
aij bektoreak dituen 1eko bakarrak i eta m + j posizioetan daude. Bektorea-
ren gainerako osagaiak
0 dira. Ondorioz,
zij − cij = ui + vj − cij
Balio adierazleak dualaren aldagaien balioen bitartez kalkulatzen dira. Dua-
laren aldagaien balioak kalkula daitezke, kontuan hartuz
zij − cij = 0 dela oi-
narriko diren
xij aldagai guztietarako. Oinarrian m + n − 1 aldagai daudenez,
ui + vj − cij = 0 moduko m + n − 1 ekuazio daude u1, . . . , um, v1, . . . , vn aldagai
dualen
m + n balioak kalkulatzeko. Ekuazio-sistema hori aska daiteke aldagairen
bati balioren bat emanez.
Behin aldagai dualen balioak kalkulatuak izan direnean, balio adierazle guz-
tiak kalkulatu ahal izango dira. Helburua minimizatzea dela kontuan izanik, bi
kasu gerta daitezke.
• zij − cij ≤ 0 bada, i = 1, . . . , m, j = 1, . . . , n, soluzioa optimoa da.
• zij − cij > 0 existitzen bada, soluzioa hobe daiteke. Horretarako, zij − cij
positiboen artean maximoa duen aldagaia sartuko da oinarrian.
Adibidea. Har dezagun 163. orrialdeko garraio-problemarako ipar-mendebaldeko
ertzaren metodoa erabiliz kalkulatutako oinarriko soluzio bideragarria.
Garraio-kostuen taula
Garraio-ﬂuxuen taula
Eskain.
Eskain.
Eskaria
Eskaria
O1
O1
O2
O2
O3
O3
A1
A1
A2
A2
1000
1000
1000
1500
1500
1500
1500
2000
2000
2000
2000
2500
2500
500
4
6
8
9
10
10
Oinarriko aldagaiak
x11, x12, x22 eta x23 dira. Dualaren u1, u2, v1, v2 eta v3
aldagaien balioak kalkulatzeko, ondoko ekuazio-sistema daukagu:
x11 oinarrikoa da
⇒
z11 − c11 = 0
⇒
u1 + v1 − 8 = 0.
x12 oinarrikoa da
⇒
z12 − c12 = 0
⇒
u1 + v2 − 6 = 0.
x22 oinarrikoa da
⇒
z22 − c22 = 0
⇒
u2 + v2 − 4 = 0.
x23 oinarrikoa da
⇒
z23 − c23 = 0
⇒
u2 + v3 − 9 = 0.
OpenCourseWare, UPV/EHU

5.6. Oinarriko soluzio bideragarrien hobekuntza
171
Ekuazio-sistema honek lau ekuazio eta bost ezezagun dituenez, inﬁnitu solu-
zio ditu. Soluzio horien guztien artetik edozein har dezakegu. Horretarako alda-
gairen bati balioren bat ematea nahikoa izango da, gainerako aldagaien balioak
kalkulatu ahal izateko. Adibidez,
u1 = 0 bada, v1 = 8, v2 = 6, u2 = −2 eta
v3 = 11 balioak lortzen dira, sistema askatuz.
Oinarriko ez diren
xij aldagai guztietarako, kasu honetan x13 eta x21, balio
adierazleak kalkulatuko ditugu honela:
• z13 − c13 = u1 + v3 − c13 = 0 + 11 − 10 = 1 > 0.
• z21 − c21 = u2 + v1 − c21 = −2 + 8 − 10 = −4 < 0.
z13 − c13 balio adierazlea positiboa da. Ondorioz, x13 aldagaia oinarrira sartuz
hobea izango den beste oinarriko soluzio bideragarri bat kalkulatu ahal izango da.
2
5.6.2
Oinarritik aterako den bektorearen aukeraketa
Oinarritik aterako den bektorea zein izango den erabakitzeko, ondokoak kontuan
izan behar dira.
1. Garraio-problemarako soluzio batean oinarrikoak diren aldagaiek ez dute
ziklorik osatzen. Aurreko adibidean
x11, x12, x22 eta x23 aldagaiek ez dute
ziklorik osatzen.
2. Oinarriko diren aldagaien eta oinarrian sartzea erabaki den aldagaiaren ar-
tean ziklo bakar bat sortzen da.
Ziklo hori aurkitzeko erregela bat honakoa da. Oinarrian sartzea erabaki
den aldagaia ﬂuxu positibotzat hartzen da. Garraio-ﬂuxuen taulan ﬂuxu po-
sitibo bakarreko errenkadak eta zutabeak ezabatu egingo ditugu, ezabatze-
prozesua honela burutzen delarik: hasteko, ﬂuxu positibo bakarreko erren-
kadak ezabatu; ondoren, zutabeak, eta ondoren, berriro ere errenkadak, ha-
rik eta ﬂuxu positibo bakarreko errenkadarik edo zutaberik geratzen ez den
arte. Ezabatuak izan ez diren eta ﬂuxu positiboa duten posizioek ziklo bakar
bat osatzen dute.
Zikloa zein ﬂuxuk osatzen duten zehaztu denean, oinarrian sartzea erabaki
den aldagaiari ﬂuxu positibo bat esleitu behar zaio. Gainera, zikloa osatzen duten
aldagaien artetik batek zero balioa hartu beharko du, eta oinarria utzi. Aldagai
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

172
5. Garraio-problema eta Esleipen-problema
hori zein den erabaki ahal izateko, zikloko ﬂuxuek duten joera aztertu behar da.
Oinarrian sartuko den aldagaitik hasita, honek hazteko joera duela ikusten da, zero
izatetik balio positibo bat izatera pasako delako. Eskaintza eta eskariak bete behar
direnez, errenkada edo zutabe berean dauden zikloko beste ﬂuxuek jaisteko joera
izan behar dute. Modu berean, zikloan jaisteko joera duten aldagai horien alboko
direnek igotzeko joera erakusten dute.
Jaisteko joera duten aldagaien balioak txikitu egingo dira horietako bat zero
bihurtutzen den arte, garraio-
ﬂuxu negatiboak ez baitira onartzen. Hain zuzen ere,
zero bihurtu den aldagai hori izango da oinarritik aterako dena. Zikloko ez diren
aldagaien balioak ez dira aldatzen. Jaisteko joera duten ﬂuxuen artetik minimoa
izango da oinarrian sartuko den aldagaiari esleituko zaion balioa.
Adibidea. 170. orrialdeko adibidearekin jarrai dezagun. Esan dugunez,
x13
aldagaia oinarrian sartuko da, eta bertan ﬂuxu positibo bat esleituko da. Taulan
1. zutabea ezabatu egingo dugu, ﬂuxu bakarra dagoelako bertan. Ezin daiteke
errenkada edo zutabe gehiago ezabatu, guztietan baitaude ﬂuxu positibo bat bai-
no gehiago,
x13 ﬂuxu positibotzat hartuz. Hortaz, zikloa x12, x13, x22 eta x23
aldagaiek osatzen dute (ikus taulan grisez dauden lau laukitxoak).
Sartu
Irten
Eskaintza
Eskaria
O1
O2
O3
A1
A2
1000
1000
1500
1500
1500
2000
2000
2500
500
x13 aldagaiak hazteko joera duenez, zikloko diren eta bere errenkada eta zu-
tabe berean dauden
x12 eta x23 aldagaiek jaisteko joera dute. Azken bi horien
alboko da zikloan
x22, igotzeko joera izango duelarik. Garraio-ﬂuxuak beti posi-
tibo direnez, jaisteko joera dutenen artetik minimoak esango digu zenbat hazi edo
txikituko diren zikloko ﬂuxuak:
min{x12 = 500, x23 = 1000} = 500. Hortaz, x12
aldagaia izango da oinarria utziko duena.
Oinarrian sartuko den eta oinarritik irtengo den aldagaia aukeratuak izan di-
renean, zikloko ﬂuxuak eguneratu egin behar dira. Eguneraketa burutzearekin
batera zikloa desagertu egingo da eta eskaintzak eta eskariak beteko dira, zikloko
OpenCourseWare, UPV/EHU

5.7. Garraio-taula
173
ﬂuxuak eguneratu aurretik betetzen ziren bezalaxe. Kasu honetan, oinarria utziko
duen aldagaiaren ﬂuxua
500ekoa denez, zikloko ﬂuxuak 500 unitate hazi edo txi-
kituko dira, ﬂuxuek duten joeraren arabera. Fluxuak eguneratuz lortzen da beste
oinarriko soluzio bideragarri hau:
Eskaintza
Eskaria
O1
O2
O3
A1
A2
1000
1500
1500
2000
2000
2000
2500
500
500
• Soluzioa.
x11 = 1500, x12 = 0, x13 = 500, x21 = 0, x22 = 2000, x23 = 500.
• Garraio-kostua.
z = (8 × 1500) + (10 × 500) + (4 × 2000) + (9 × 500) = 29500.
Soluzio hau oinarri-aldaketa egin aurretik genuena baino hobea da, garraio-
kostua txikiagoa delako (ikus 164. orrialdeko garraio-kostua).
2
5.7
Garraio-taula
Orain arte, bi taularekin egin dugu lan: garraio-kostuen taula eta garraio-
ﬂuxuen
taula. Gainera, soluzioa hobetzerakoan, dualaren
ui eta vj aldagaiak eta zij − cij
balio adierazleak ere behar izan ditugu, eta kalkuluak tauletatik kanpo egin behar
izan ditugu.
Kalkulu guztiak taula bakar batean egin ahal izateko, garraio-taula erabiltzen
da, eta bertan jasotzen dira garraio-problemarako soluzio optimoa kalkulatzeko
prozesuan beharrezko gertatzen diren balio guztiak. Garraio-taulak egitura hau
dauka:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

174
5. Garraio-problema eta Esleipen-problema
v1
v2
· · ·
vn
z11
− c11
c11
z12
− c12
c12
· · ·
z1n − c1n
c1n
u1
x11
x12
x1n
a1
z21
− c21
c21
z22
− c22
c22
· · ·
z2n − c2n
c2n
u2
x21
x22
x2n
a2
..
.
. ..
..
.
zm1 − cm1 cm1 zm2 − cm2 cm2
· · ·
zmn − cmn cmn
um
xm1
xm2
xmn
am
b1
b2
· · ·
bn
Adibidea. Jarrai dezagun aurreko adibidearekin. Dagokion garraio-taula ida-
tziko dugu.
Sartu
Irten
u1 = 0
u2 = −2
v1 = 8
v2 = 6
v3 = 11
4
6
8
9
1
−4
10
10
1000
1000
1500
1500
1500
2000
2000
2500
500
Bertan kokatu ditugu problemaren matrize-formako datuak (ikus 153. orrial-
dea), ipar-mendebaldeko ertzaren metodoa erabiliz kalkulatutako hasierako oina-
rriko soluzio bideragarria (ikus 163. orrialdeko garraio-ﬂuxuen taula), eta 5.6
Atalean oinarrian sartuko den bektorea erabakitzeko kalkulatu diren
ui, vj, eta
zij − cij balioak 
(ikus 171. orrialdea). Gainera, oinarritik irtengo den bektorea
erabakitzeko, zikloa ere adierazten dugu (ikus 172. orrialdeko taula).
2
OpenCourseWare, UPV/EHU

5.8. Garraio-problemarako algoritmoa
175
5.8
Garraio-problemarako algoritmoa
Atal honetan ematen dira garraio-problema baten soluzio optimoa kalkulatzeko
eman beharreko urratsak, helburua minimizatzea denean.
1. urratsa. Garraio-problema orekatu.
2. urratsa. Hasierako oinarriko soluzio bideragarri bat kalkulatu.
3. urratsa. Une honetan daukagun oinarriari dagozkion
u1, . . . , um eta v1, . . . , vn
aldagaien balioak kalkulatu.
4. urratsa. Oinarriko ez diren bektoreei dagozkien
zij − cij = ui + vj − cij
balio adierazleak kalkulatu.
• zij − cij > 0 existitzen bada, soluzioa hobe daiteke. Balio adierazle
positiboen artetik maximoa duen aldagaia aukeratu oinarrian sartzeko.
5. urratsera joan.
• Oinarriko ez diren aldagai guztietarako zij −cij < 0 bada, une honetan
daukagun soluzioa optimoa eta bakarra da. Amaitu.
• Oinarriko ez diren aldagai guztietarako zij − cij ≤ 0 bada, eta oina-
rrikoa ez den aldagai bat existitzen bada, zeinarentzat
zij − cij = 0
den, soluzio optimo anizkoitza dago. Azken aldagai hori aukeratuko
da oinarrian sartzeko. 5. urratsera joan.
5. urratsa. Une honetan oinarrian dauden aldagaiek eta oinarrian sartzeko
aukeratua izan den aldagaiak osatzen duten ziklo bakarra aurkitu. Zikloa
osatzen duten ﬂuxuak eguneratuz soluzio berria kalkulatu. 3. urratsera joan.
5.9
Garraio-problemarako algoritmoaren aplikazioa
Garraio-kostuen taula hau duen garraio-problemarako soluzio optimoa kalkulatu-
ko dugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

176
5. Garraio-problema eta Esleipen-problema
1
2
3
4
Eskaintza
1
5
9
−
4
28
2
6
10
3
−
32
3
4
2
5
7
60
Eskaria
48 29 40 33
(1, 3) eta (2, 4) posizioetako marratxoek iturburu-puntu eta helburu-puntu ho-
rien arteko garraioa ezin daitekeela gauzatu adierazten dute. Posizio horietan
garraio-ﬂuxurik kokatua izan ez dadin,
M garraio-kostu oso altu bat egokituko
dugu.
Lehenengo iterazioa
1. urratsa. Garraio-problema orekatu. Eskaintza
= 28 + 32 + 60 = 120,
Eskaria
= 48 + 29 + 40 + 33 = 150. Eskaintzan 30 produktu unitate falta
direnez, eskaria zerbitzatu ahal izateko,
30 unitateko eskaintza eta garraio-kostuak
zero izango dituen gezurrezko iturburu-puntu bat sortuko dugu. Garraio-kostuen
taulako datuak garraio-taulan kokatuko ditugu.
0
0
0
0
2
3
4
4
5
5
6
7
9
10
M
M
28
32
60
30
48
29
40
33
2. urratsa. Vogel-
en metodoa erabiliz hasierako oinarriko soluzio bideragarri bat
kalkulatuko dugu. Taulan
EDi errenkadakako eta ZDj zutabekako diferentziak
kalkulatuko ditugu,
i = 1, . . . , 4, j = 1, . . . , 4. Diferentziarik handiena 1. eta 4.
zutabeetan dago. 1. zutabea aukeratuko dugu, adibidez. Bertan kosturik txikie-
neko posizioa
0 kostua duena da, (4, 1) posizioan. Posizio horretan eskaintzaren
eta eskariaren arteko minimoa,
min{30, 48} = 30 esleituko dugu. Eskaintza eta
OpenCourseWare, UPV/EHU

5.9. Garraio-problemarako algoritmoaren aplikazioa
177
eskaria eguneratu eta 4. errenkada ezabatuko dugu, eskaintza zero egin delako.
Honela geratuko da taula Vogel-en metodoaren hurrengo iterazioari ekiteko:
0
0
0
0
0
0
1
2
2
2
3
3
3
4
4
4
4
5
5
6
7
9
10
M
M
EDi
ZDj
18
28
32
60
30
29
40
33
Vogel-
en metodoaren bigarren iterazioan, diferentziak kalkulatuko ditugu ezabatu
gabeko kostuen artean. Handiena 2. zutabean dago,
ZD2 = 7, eta bertan ezabatu
gabeko kosturik txikiena
2koa da, (3, 2) posizioan. min{60, 29} = 29 unitateko
garraio-ﬂuxua kokatu, eskaintza eta eskaria eguneratu eta 2. zutabea ezabatuko
dugu, eskaria zero egin delako. Taula honela geratuko da:
0
0
0
0
0
0
1
1
2
2
2
3
3
3
4
4
5
5
6
7
7
9
10
M
M
EDi
ZDj
18
28
32
30
31
29
40
33
Prozesua errepikatuko dugu. Diferentziarik handienak
ED2 = ZD4 = 3 dira.
2. errenkada aukeratuko dugu, adibidez. Kosturik txikiena bertan
c23 = 3 da,
(2, 3) posizioan. min{32, 40} = 32 garraio-ﬂuxua kokatu, eskaintza eta eskaria
eguneratu eta 2. errenkada ezabatuko dugu, eskaintza zero egin delako.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

178
5. Garraio-problema eta Esleipen-problema
0
0
0
0
0
0
0
1
1
1
2
2
3
3
3
4
4
5
5
6
7
8
9
10
M
M
EDi
ZDj
18
28
32
30
31
29
33
Oraingoan, diferentziarik handiena 3. zutabean dago,
ZD3 = M − 5. Zutabean
ezabatu gabe dauden kostuen artetik minimoa
min{c13, c33} = min{M, 5} = 5
da.
(3, 3) posizioan min{31, 8} = 8 garraio-ﬂuxua kokatuko dugu. Eskaintza eta
eskaria eguneratu eta 3. zutabea ezabatu.
0
0
0
0
0
0
0
0
1
1
1
2
3
3
4
4
5
5
6
7
8
9
10
M
M
M − 5
EDi
ZDj
18
23
28
32
30
29
33
Oraindik, taulan bi errenkada eta bi zutabe daude ezabatu gabe. Diferentziarik
handienak
ED3 = ZD4 = 3 dira. 3. errenkada aukeratuko dugu, eta bertan eza-
batu gabeko kostuen artetik minimoa
min{c31, c34} = min{4, 7} = 4 da. (3, 1)
posizioan
min{23, 18} = 18 garraio-ﬂuxua kokatuko dugu. Eskaintza eta eskaria
eguneratu eta 1. zutabea ezabatuko dugu.
OpenCourseWare, UPV/EHU

5.9. Garraio-problemarako algoritmoaren aplikazioa
179
0
0
0
0
0
0
0
0
0
1
1
2
3
3
3
4
4
5
5
5
6
7
8
9
10
M
M
EDi
ZDj
18
28
32
30
29
33
Dagoeneko, ezabatu gabeko zutabe bat besterik ez da geratzen taulan. Esleituak
izan ez diren garraio-ﬂuxuak
(1, 4) eta (3, 4) posizioetan kokatu eta lortu dugu,
Vogel-en metodoa erabiliz, hasierako oinarriko soluzio bideragarria.
0
0
0
0
2
3
4
4
5
5
5
6
7
8
9
10
M
M
18
28
28
32
32
60
30
30
48
29
29
40
33
3. urratsa. Aldagai dualen balioak kalkulatu. Taulan bertan egingo dugu,
u3 = 0 eginez. Horrela, adibidez, oinarrikoa den x31 aldagairako z31 − c31 = 0
betetzen denez,
u3 + v1 − c31 = 0 + v1 − 4 = 0 ekuaziotik v1 = 4 balioa lortzen
da. Gainerako aldagaien balioak askatzeko, modu berean egingo dugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

180
5. Garraio-problema eta Esleipen-problema
0
0
0
0
2
3
4
4
5
5
5
6
7
8
9
10
M
M
18
28
28
32
32
60
30
30
48
29
29
40
33
u1 = −3
u2 = −2
u3 = 0
u4 = −4
v1 = 4
v2 = 2 v3 = 5
v4 = 7
4. urratsa. Oinarriko ez diren aldagaiei dagozkien
zij − cij = ui + vj − cij
balio adierazleak kalkulatu. Adibidez,
z21−c21 = u2+v1−c21 = −2+4−6 = −4.
Modu berean kalkulatuko ditugu gainerako balio adierazleak.
0
0
0
0
2
3
4
4
5
5
5
6
7
8
9
10
M
M
18
28
28
32
32
60
30
30
48
29
29
40
33
u1 = −3
u2 = −2
u3 = 0
u4 = −4
v1 = 4 v2 = 2 v3 = 5 v4 = 7
−4
−10
2
− M
−4
−10
5
− M
−2
1
3
Sartu
Aurreko taulan ikus daiteke
z43−c43 = 1 eta z44−c44 = 3 balio adierazleak positi-
boak direla. Bien artetik handienari dagokion aldagaia aukeratuko dugu oinarrian
sartzeko,
(4, 4) posizioko x44 alegia.
5. urratsa. Zikloa
x31, x34, x41 eta x44 aldagaiek osatzen dute. Taulako lau-
kitxoetan gezien bidez adierazten da garraio-
ﬂuxuek duten hazteko edo txikitzeko
OpenCourseWare, UPV/EHU

5.9. Garraio-problemarako algoritmoaren aplikazioa
181
joera. Txikitzeko joera dutenen artetik minimoa
min{5, 30} = 5 denez, x34 al-
dagaia irtengo da oinarritik. Zikloko ﬂuxuak eguneratu eta taula berri bat lortuko
dugu. Ondoren, 3. urratsera joan eta prozesua errepikatuko da.
0
0
0
0
0
0
0
0
2
2
3
3
4
4
4
4
5
5
5
5
5
5
6
6
7
7
8
8
9
9
10
10
M
M
M
M
18
23
25
28
28
28
28
32
32
32
32
60
60
30
30
30
48
48
29
29
29
29
40
40
33
33
u1 = −3
u2 = −2
u3 = 0
u4 = −4
v1 = 4 v2 = 2 v3 = 5 v4 = 7
−4
−10
2
− M
−4
−10
5
− M
−2
1
3
Sartu
Irten
Bigarren iterazioa
Prozesua errepikatu behar da: aldagai dualen balioak eta balio adierazleak
kalkulatu, sartuko den aldagaia aukeratu, zikloa aurkitu, irtengo den aldagaia zein
izango den erabaki (ezkerreko taulan daude kalkulu guztiak) eta zikloko ﬂuxuak
eguneratuz, hobea den beste soluzio bat izango dugu (eskuineko taulan).
0
0
0
0
0
0
0
0
2
2
3
3
4
4
4
4
5
5
5
5
5
5
6
6
7
7
8
8
9
9
10
10
M
M
M
M
17
23
25
28
28
28
28
32
32
32
32
60
60
30
30
31
48
48
29
29
29
29
40
40
33
33
u1 = 0
u2 = −2
u3 = 0
u4 = −4
v1 = 4 v2 = 2 v3 = 5 v4 = 4
−1
−7
5
− M
−4
−10
2
− M
−3
−2
1
Sartu
Irten
Hirugarren iterazioa.
Berriro ere, prozesua errepikatzen da eta garraio-problemarako soluzio opti-
mora iristen gara. Taula honetan ikus daiteke
zij − cij balio adierazle guztiak
negatiboak direla. Hori dela eta, soluzio optimoa bakarra da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

182
5. Garraio-problema eta Esleipen-problema
0
0
0
0
2
3
4
4
5
5
5
6
7
8
9
10
M
M
30
31
28
28
32
32
60
17
48
29
29
40
33
u1 = 4
u2 = 3
u3 = 4
u4 = 0
v1 = 0
v2 = −2 v3 = 0
v4 = 0
−1
−7
4 −
M
−3
−9
3 −
M
−1
−3
−2
• Soluzio optimoa: x∗
14 = 28, x
∗
23 = 32, x
∗
31 = 31, x
∗
32 = 29, x
∗
41 = 17,
x
∗
43 = 8, x
∗
44 = 5. Gezurrezko 17 produktu unitate jasotzen ditu 1 helburu-
puntuak, gezurrezko 8 unitate 3 helburuak eta gezurrezko 5 unitate 4 helbu-
ruak. Hortaz, beren eskariak ez dira osotasunean zerbitzatuak izan, eskain-
tza totala nahikoa ez zelako.
• Garraio-kostu minimoa:
z
∗ = (4×28)+(3×32)+(4×31)+(2×29)+(0×17)+(0×8)+(0×5) = 390
2
5.9.1
Soluzio endekatua
m iturburu-puntu eta n helburu-puntu dituen garraio-problema orekatu batean,
soluzio batek zero baino handiagoak diren
m + n − 1 aldagai baino gutxiago
baditu, soluzio hori endekatua dela esaten da. Endekatzea ondoko bi kasuetan
gerta daiteke.
• Hasierako oinarriko soluzio bideragarri baten kalkuluan, Vogel-en metodoa
edo ipar-mendebaldeko ertzaren metodoa aplikatzerakoan, azkena ez den
urrats batean errenkada eta zutabea aldi berean ezabatzen badira, eskaintza
eta eskaria biak batera zero egin direlako.
OpenCourseWare, UPV/EHU

5.9. Garraio-problemarako algoritmoaren aplikazioa
183
• Garraio-problemarako algoritmoa aplikatzerakoan, oinarritik irtengo den al-
dagaia aukeratzeko irizpidean berdinketa gertatzen bada.
Soluzio bat endekatua denean, beharrezkoa gertatzen da bereiztea zero diren
garraio-ﬂuxuen artean zeintzuk diren oinarriko aldagaiei dagozkienak, eta zein-
tzuk ez. Zenbait kasutan, garraio-ﬂuxua zero duten aldagaien artean bereizketa
egiteko aukera bat baino gehiago izaten da.
Adibidea. Ondoko garraio-kostuen taula emanik, hasierako oinarriko soluzio
bideragarri bat kalkulatuko dugu:
1
2
3
Eskaintza
1
3
2
1
15
2
1
2
3
10
3
2
3
1
14
Eskaria
10 6 12
Problema orekatu eta Vogel-en metodoa aplikatuz, ondoko hasierako oinarriko
soluzio bideragarria lortzen dugu.
3
2
1
0
4
11
15
1
2
3
0
10
10
2
3
1
0
6
8
14
10
6
12
11
Aurreko garraio-taulan, zero baino balio handiagoa duten 5 garraio-ﬂuxu daude:
x13, x14, x21, x32 eta x33. Oinarrian m + n − 1 = 6 aldagai daudenez, soluzioa
endekatua da. Hortaz, garraio-ﬂuxua zero duten aldagaien artean bat aukeratu
beharko da oinarriko izateko, beti ere aldagai horiek zikloa osatuko ez dutelarik.
Kasu honetan,
x11, x22, x23, x24 eta x31 aldagaien artetik bat aukera daiteke, baina
ezingo dugu inolaz ere oinarriko aldagai izateko
x12 edo x34 aukeratu, horietako
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

184
5. Garraio-problema eta Esleipen-problema
edozein aukeratuz gero, zikloa osatuko litzatekeelako.
x22 = 0 aukeratuz gero,
adibidez, ondoko soluzio endekatua lortuko da:
3
2
1
0
4
11
15
1
2
3
0
10
0
10
2
3
1
0
6
8
14
10
6
12
11
Soluzio horretatik abiatuz, algoritmoaren aplikazioarekin jarraituko da.
2
Adibidea. Demagun garraio-problema baten ebazpen-prozesuan ondoko tau-
lan agertzen den soluzio bideragarria daukagula, eta
zij − cij balio adierazleak
kalkulatu ditugula.
v1 = 6
v2 = 4
v3 = 1 v4 = 4
6
4
−3 4 −4 8
u1 = 0 10
12
22
9
2
9
6
0
9
u2 = 5
10
8
18
3
6
−4 11
4
7
u3 = 3
15
5
20
10
22
23
5
Balio adierazle positiboen artetik handiena
z21 − c21 = 9 da; x21 aldagaia oi-
narrian sartuko da. Zikloa
x11, x12, x21 eta x22 aldagaiek osatzen dute. Zikloko
ﬂuxuak eguneratu eta oinarriko bi aldagai aldi berean zero egiten direla ikusten
dugu:
x11 = 0 eta x22 = 0. Dena den, bi aldagaiek batera ezin dute oinarria utzi,
oinarrian ez genukeelako behar adina aldagai izango. Hortaz, bi horietako bat oi-
narrian mantenduko dugu,
x11 adibidez, eta bestea oinarritik irtengo da; eskuineko
taulan ikusten den soluzio endekatua lortuko dugu.
OpenCourseWare, UPV/EHU

5.9. Garraio-problemarako algoritmoaren aplikazioa
185
0
2
2
4
4
4
4
4
4
5
5
5
5
6
6
6
6
6
6
7
7
8
8
8
8
9
9
9
10
10
10
10
10
10
11
11
12
15
15
22
22
22
22
22
23
23
18
18
20
20
u1 = 0
u2 = 5
u3 = 3
v1 = 6 v2 = 4 v3 = 1 v4 = 4
−3
−4
9
0
3
−4
Sartu
Irten
Algoritmoaren aplikazioarekin aurrera jarraitu behar da optimora iritsi arte. 2
5.9.2
Soluzio optimo anizkoitza
Ondoko garraio-kostuen taula emanik, soluzio optimo guztiak kalkulatuko ditugu:
1
2
3
4
5
Eskaintza
1
4
1
2
6
9
100
2
6
4
3
5
7
120
3
5
2
6
4
8
120
Eskaria
40 50 70 90 90
Garraio-problemarako algoritmoaren iterazioak egin ondoren, ondoko solu-
zioa lortzen da:
v1 = 4 v2 = 1 v3 = 2 v4 = 3 v5 = 6
4
1
2 −3 6 −3 9
u1 = 0 40
20
40
100
−1 6 −2 4
3 −1 5
7
u2 = 1
30
90
120
0
5
2 −3 6
4 −1 8
u3 = 1
30
90
120
40
50
70
90
90
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

186
5. Garraio-problema eta Esleipen-problema
Oinarriko ez diren aldagai guztietarako
zij − cij ≤ 0 betetzen da, eta gainera
z31 − c31 = 0 da. Hortaz, problemak soluzio optimo anizkoitza du.
• Soluzio optimoa: x∗
11 = 40, x
∗
12 = 20, x
∗
13 = 40, x
∗
23 = 30, x
∗
25 = 90,
x∗
32 = 30, x
∗
34 = 90.
• Garraio-kostu minimoa:
z
∗ = (4×40)+(1×20)+(2×40)+(3×30)+(7×90)+(2×30)+(4×90) = 1400.
Beste soluzio optimo bat kalkulatzeko,
x31 aldagaia aukeratuko dugu oinarrian
sartzeko, eta
x32 oinarritik ateratzeko. Zikloko garraio-ﬂuxuak eguneratuz, beste
soluzio optimo bat lortuko dugu.
4
1
2
6
9
10
50
40
100
6
4
3
5
7
30
90
120
5
2
6
4
8
30
90
120
40
50
70
90
90
• Soluzio optimoa: x∗
11 = 10, x
∗
12 = 50, x
∗
13 = 40, x
∗
23 = 30, x
∗
25 = 90,
x∗
31 = 30, x
∗
34 = 90.
• Garraio-kostu minimoa:
z
∗ = (4×10)+(1×50)+(2×40)+(3×30)+(7×90)+(5×30)+(4×90) = 1400.
Prozesu hau errepikatuz lortuko dira soluzio optimo guztiak.
2
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
187
5.10
Esleipen-problema
Garraio-problemaren kasu partikular bat da esleipen-problema. Lortu nahi dena
hau da: iturburu-puntuen (izaki, eginkizun etab.) eta helburu-puntuen (eginki-
zun, makina etab.) arteko esleipena, esleipen honek kostu-funtzioa optimizatuko
duelarik. Esleipen honek iturburu-puntu bakoitza helburu-
puntu bakar batekin eta
helburu-puntu bakoitza iturburu-puntu bakarrarekin esleituko ditu.
Ii iturburu-
puntua eta
Hj helburu-puntua elkarri esleitzeak cij kostua eragiten du.
Erabaki-aldagaiak honela daude deﬁnituak:
xij =



1 baldin Ii iturburua eta Hj helburua elkarri esleitu badira
0 bestelakoetan
Formalki esateko,
n iturburu-puntu eta n helburu-puntu izanik, eta Ii iturburu-
puntua
Hj helburu-
puntuari esleitzeko kostua cij bada, i = 1, . . . , n, j = 1, . . . , n,
kostu-totala minimo egingo duen esleipena aurkitzean datza esleipen-problema.
Esleipen-problemari dagokion eredu lineala forma estandarrean ondokoa da:
min z =
n
i=1
n
j=1
cijxij
hauen mende
n
j=1
xij = 1,
i = 1, . . . , n
n
i=1
xij = 1,
j = 1, . . . , n
xij = 0, 1,
i, j = 1, . . . , n
Iturburu-puntu bakoitza helburu-puntu bakar bati esleitzen zaiola adierazten
dute lehenenego
n murrizketek; hurrengo n murrizketek, aldiz, helburu-puntu ba-
koitzari iturburu-puntu bakar bat esleitzen zaiola.
Problemaren iturburu-puntu kopurua eta helburu-puntu kopurua berdinak ez
direnean, kopuru horiek berdinak izan daitezen behar adina iturburu-puntu edo
helburu-puntu erantsiko dira problema orekatzeko. Iturburu-puntu edo helburu-
puntu horiek gezurrezkoak izateagatik, zero esleipen-kostua izango dute.
Esleipen-problemaren informazio esanguratsua esleipen-kostuen taula-n ema-
ten da, eskaintza eta eskari guztiak 1 direlako.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

188
5. Garraio-problema eta Esleipen-problema
H1 H2 . . . Hn
I1 c11 c12 . . . c1n
I1 c21 c22 . . . c2n
..
.
..
.
. ..
..
.
In cn1 cn2 . . . cnn
5.3. Irudia: Esleipen-kostuen taula
5.10.1
Metodo hungariarra
Esleipen-problema ebazteko algoritmoa ondoko bi teorematan oinarritzen da.
5.10.1 Teorema. Esleipen-problema baten helburu funtzioa
z =
n
j=1
n
i=1
cijxij
izanik,
xij soluzio optimo badira, i = 1, . . . , n, j = 1, . . . , n, aldagaietarako
balio horiek soluzio optimo dira baita aurreko helburu funtzio horren ordez
z
′ =
n
j=1
n
i=1
c
′
ij xij
helburu funtzioa duen problemarako,
c′
ij = cij − ui − vj izanik eta ui eta vj
konstanteak izanik.
Froga.
z
′ =
n
j=1
n
i=1
c
′
ij xij =
n
j=1
n
i=1
(cij − ui − vj)xij =
=
n
j=1
n
i=1
cijxij −
n
j=1
n
i=1
uixij −
n
j=1
n
i=1
vjxij =
= z −
n
i=1
ui
n
j=1
xij −
n
j=1
vj
n
i=1
xij =
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
189
= z −
n
i=1
ui −
n
j=1
vj = z − k.
z eta z′ helburu funtzioen arteko aldea k konstantea da. Horregatik lortzen
dute optimoa
xij erabaki-aldagaien balioen multzo berberean.
2
5.10.1 Teoremari esker, esleipen-kostuen taula eraldatu ahal izango dugu erren-
kadaka edota zutabeka eragiketak eginez, horrek soluzio optimoaren gain eraginik
sortuko ez duelarik; adibidez, errenkada edota zutabe bateko elementuei konstante
bat kendu ahal izango diegu.
5.10.2 Teorema.
cij ≥ 0 badira, i, j = 1, . . . , n eta xij aldagaiek hartutako
balioek
z =
n
j=1
n
i=1
cijxij = 0
betetzen badute,
xij problemarako soluzio optimoa dira, i, j = 1, . . . , n.
Froga.
cij ≥ 0 badira, i, j = 1, . . . , n, xij = 0, 1 izanik, i, j = 1, . . . , n,
helburu funtzioaren balioa
z ≥ 0 izango da. Hortaz, xij aldagaien balioek, i, j =
1, . . . , n, z = 0 egiten badute, balio hori helburu funtzioaren minimo absolutua
izanik, soluzioa optimoa da.
2
Esleipen-problema baten ebazpenean 5.10.1 Teoremaren arabera egiten dira
eragiketak, esleipen-
kostuen taulan zeroak lortzeko. Helburu funtzioari zero ba-
lioa emango dion esleipen bat lortzen bada, 5.10.2 Teoremaren arabera, esleipen
hori optimoa dela esango dugu.
Ikusi dugunez, errenkada edota zutabe bateko elementuei konstante bat ken-
tzeak ez du problemaren soluzio optimoa aldatzen; eta horretan oinarritzen da
metodo hungariarra, esleipen-
kostuen taula eraldatuz, esleipena egin ahal izateko
behar adina zero lortzeko.
Esleipen-problema ebazteko erabiltzen den metodo hungariarra K¨onig-en teo-
reman oinarritzen da. Teorema honek baieztatzen du: errenkadetan eta zutabee-
tan modu independentean esleitu daitekeen zero kopurua, zero guztiak estaltzeko
behar den errenkada edota zutabe kopuru minimoaren berdina da.
Helburu funtzioaren balioa minimizatzeko eman beharreko urratsak ondoko
algoritmoak ematen ditu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

190
5. Garraio-problema eta Esleipen-problema
5.10.2
Esleipen-problemarako algoritmoa
Helburua minimizatzea da
1. urratsa. Problema orekatu.
2. urratsa. Zeroak lortu esleipen-kostuen taulako errenkadatan. Errenkada
bakoitzeko elementuei errenkadako minimoa kendu,
ui = min
j
{cij}. Taula-
ko elementu berriak
c′
ij = cij − ui dira, i, j = 1, . . . , n.
3. urratsa. Zeroak lortu esleipen-kostuen taulako zutabeetan. Zutabe bakoi-
tzeko elementuei zutabeko minimoa kendu,
vj = min
i
{c
′
ij }. Taulako ele-
mentu berriak
c′′
ij = c
′
ij − vj dira, i, j = 1, . . . , n.
4. urratsa. Zeroak esleitu. Zero kopuru txikieneko errenkada edo zutabea
aukeratu. Bertan zero bat esleitu eta errenkada edo zutabe berean dauden
gainerako zeroak ezabatu. Zeroen esleipenarekin jarraitu, ezabatu gabeko
zero kopuru txikiena duen errenkadatik edo zutabetik hasita.
• Zeroak esleitzearen prozesuaren amaieran errenkada guztiek esleituta-
ko zero bat badute, soluzioa optimoa da. Amaitu.
• Zeroak esleitzearen prozesuaren amaieran esleitutako zerorik ez duen
errenkadaren edo zutaberen bat existitzen bada, 5. urratsera joan.
5. urratsa. Taulako zero guztiak estaltzen dituen errenkada edo zutabe kopuru
minimoa aukeratu behar da. Aukeraketarako ondoko prozedura erabiltzen
da.
5.1 Esleitutako zerorik ez duen errenkada oro markatu.
5.2 Aurreko 5.1 urratsean markatutako errenkadetan ezabatutako zeroa
duten zutabeak markatu.
5.3 Aurreko 5.2 urratsean markatutako zutabeetan zero bat esleituta duten
errenkadak markatu.
5.2 eta 5.3 urratsak errepikatu, errenkada edo zutabe gehiago markatu ahal
izango ez dugun arte.
Markatuak izan ez diren errenkadek eta markatutako zutabeek zero guztiak
estaltzen dituzte. Errenkada eta zutabe horiek estali eta 6. urratsera joan.
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
191
6. urratsa.
Zero berriak sortu. Estali gabeko elementuen artetik minimoa
aukeratu. Estali gabeko errenkadetako elementuei balio hori kendu, eta es-
talitako zutabeetako elementuei gehitu. 4. urratsera joan.
Adibidea. Demagun
A, B, C eta D eraikinen eraikuntzarako lehiaketara
lau kontratistek aurkeztu dituztela beren proiektuak, kontratista bakoitzari erai-
kin baten eraikuntza esleituko zaiolarik. Ondoko taulan zehazten da kontratista
bakoitzak eraikuntza bakoitza altxatzeko beharko lukeen denbora. Lau eraikun-
tzak denbora minimoan altxatzea helburu izanik, kalkula ezazu eraikuntzen eta
kontratisten arteko esleipen optimoa.
1
2
3
4
A
58
58
60
54
B
66
70
70
78
C 106 104 100
95
D
52
54
64
54
1. urratsa. Problema orekatua da.
2. urratsa. Errenkada bakoitzeko elementuei errenkadako minimoa kenduko
diegu, hau da, 54, 66, 95 eta 52 lehenengo, bigarren, hirugarren eta lauga-
rren errenkadetan, hurrenez hurren.
1 2
3
4
A
4 4
6
0
B
0 4
4 12
C 11 9
5
0
D
0 2 12
2
3. urratsa. Zutabe bakoitzeko elementuei zutabeko minimoa kenduko diegu:
0, 2, 4 eta 0, hurrenez hurren.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

192
5. Garraio-problema eta Esleipen-problema
1 2 3
4
A
4 2 2
0
B
0 2 0 12
C 11 7 1
0
D
0 0 8
2
4. urratsa. Zeroak esleitu.
• Lehenengo errenkadak zero bakarra dauka; (A, 4), eta esleitu egingo
dugu. Esleitutako zeroaren zutabe berean dagoen zeroa,
(C, 4) posi-
ziokoa alegia, ezabatu egingo dugu. Honela geratzen da taula:
1 2 3
4
A
4 2 2
0
B
0 2 0 12
C 11 7 1
0
D
0 0 8
2
Bigarren errenkadan ezabatu gabeko bi zero daude, hirugarrengoan ez
dago ezabatu gabeko zerorik, eta laugarrengoan bi daude.
• Zutabeak aztertuz gero, lehenengo zutabean bi zero daude. Bigarren
zutabean zero bakarra dagoenez, bigarren zutabeko
(D, 2) posizioko
zeroa esleitua izango da, eta ondorioz,
(D, 1) posizioko zeroa ezabatua
errenkada berean egoteagatik. Taula honela geratuko da:
1
2 3
4
A
4
2 2
0
B
0
2 0 12
C 11
7 1
0
D
0
0
8
2
Zutabeekin jarraituz, hirugarrengoan esleitua izan daitekeen zero ba-
karra dagoenez,
(B, 3) posizioko zeroa esleitua izango da, eta (B, 1)
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
193
posiziokoa ezabatua errenkada berean egoteagatik. Taula honela gera-
tuko da:
1
2
3
4
A
4
2
2
0
B
0
2
0
12
C 11
7
1
0
D
0
0
8
2
Ez da lortu errenkada eta zutabe guztietan esleitutako zero bat izatea, ez
dugulako lau zero esleitzerik lortu. Hortaz, taulan ez daukagu esleipen op-
timoa, eta algoritmoaren hurrengo urratsarekin jarraitu beharko da.
5. urratsa. Zero guztiak estaltzen dituen errenkada edo zutabe kopuru mini-
moa aukeratu.
5.1
C errenkada markatuko dugu, esleitutako zerorik ez duelako.
5.2 Markatutako errenkadan, ezabatutako zero bat dago laugarren zuta-
bean; zutabea markatu.
5.3 Laugarren zutabeak esleitutako zeroa dauka lehenengo errenkadan;
markatu errenkada eta 5.2 urratsa errepikatuko dugu.
5.2 Lehenengo errenkadan ez dago ezabatutako zerorik.
Errenkadak eta zutabeak markatzeko prozesua amaitu da. Markatu gabeko
errenkadak eta markatutako zutabeak estaliko ditugu.
0
0
0
0
0
0
1
1
2
2
2
2
2
3
4
4
7
8
11
12
A
B
C
D
X
X
X
Hiru lerro estali ditugu (bi errenkada eta zutabe bat), taulako zero guztiak
estaltzen dituztenak. Hala ere, lau iturburu-puntu eta lau helburu-puntu di-
tugunez, lau zero esleitzea lortu behar dugu. 6. urratsera goaz.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

194
5. Garraio-problema eta Esleipen-problema
6. urratsa. Zero berriak sortu. Estali gabeko elementuen arteko minimoa 1
da. Lehenengo eta hirugarren errenkadetako elementuei 1 kenduko diegu,
estaliak izan ez direlako, eta laugarren zutabeko elementuei (estalia izan den
zutabea) 1 gehitu. Taula eguneratua honela geratuko da.
1 2 3
4
A
3 1 1
0
B
0 2 0 13
C 10 6 0
0
D
0 0 8
3
4. urratsera joan.
4. urratsa. Zeroak esleitu.
1
2
3
4
A
3
1
1
0
B
0
2
0 13
C 10
6
0
0
D
0
0
8
3
Lau zero esleitzea lortu denez, taulako soluzioa optimoa da.
• Soluzio optimoa.
A → 4:
4 kontratistak
A eraikina altxako du.
B → 1:
1 kontratistak
B eraikina altxako du.
C → 3:
3 kontratistak
C eraikina altxako du.
D → 2:
2 kontratistak
D eraikina altxako du.
• Esleipen-kostu minimoa:
cA4 + cB1 + cC3 + cD2 = 54 + 66 + 100 + 54 = 274
2
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
195
5.10.3
Maximizatze-problema
Esleipen-problemaren helburu funtzioa minimizatzea denean bakarrik aplika dai-
teke metodo hungariarra. Problemaren helburua maximizatzea den kasuetan, on-
doko problema ebatzi beharko litzateke.
min(−z) =
n
i=1
n
j=1
−cijxij
Hala ere, helburu funtzioaren eraldaketa honek esleipen-kostuak negatibo bihur-
tzen ditu. 5.10.2 Teorema erabili ahal izateko, beharrezkoa da
cij ≥ 0 betetzea.
Taulan balio negatiborik ez izateko modu bat taulako kostu negatiboen artetik
minimoa aukeratu (
−ckl = min{ −cij / − cij < 0 }) eta taulako elementu guz-
tiei balio hori kentzea da. Horrela lortuko dira taulako
c′
ij ≥ 0 balio berriak,
c′
ij = −cij + ckl.
kendu
Hj
Hj
Hj
Ii
Ii
Ii
cij
−cij
c
′
ij
−ckl
max z
min(−z)
min(−z)
Adibidea. Enpresa batek hiru lanpostu bete behar ditu:
A, B eta C. Lanpostu
horiek betetzeko asmoz, 5 langile aurkeztu dira hautapen frogara:
1, 2, 3, 4 eta
5. Ondoko taulan agertzen dira langile bakoitzak lanpostu bakoitzerako egindako
frogan lortutako puntuaketa,
1etik 10era neurtuta. Taulako (C, 4) posizioan ez
dago puntuaketarik,
4 langilea ez delako C lana egiteko gai izan.
1 2
3
4 5
A 2 4 10 3 6
B 7 7
5
6 4
C 8 6
7
− 9
Langile eta lanpostu arteko esleipen optimoa aurkitu nahi da, hau da, puntua-
keta totala maximo egingo duen hiru langile eta hiru lanpostuen arteko esleipena.
Helburua maximizatzea izanik,
cij balioak −cij balioez ordezkatzen badira, au-
rreko taulan maximizatzea ondoko taulan minimizatzearen baliokidea da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

196
5. Garraio-problema eta Esleipen-problema
1
2
3
4
5
A −2 −4 −10 −3 −6
B −7 −7
−5
−6 −4
C −8 −6
−7
−
−9
Taulan balio negatiboak daude; balio guztiei minimoa kenduz,
−10, ondoko
taula lortzen da:
1 2 3 4 5
A 8 6 0 7 4
B 3 3 5 4 6
C 2 4 3 − 1
Eraldaketa horiek egin ondoren, taula minimizatzeko egokituta dago, eta ez
dago balio negatiborik. Bestalde,
4 langilea C lanpostuarekin esleitua izan ez
dadin,
(C, 4) posizioan kostu handi bat kokatuko dugu: M. Horrekin guztiarekin
taula prest dago esleipen-problemarako algoritmoa aplikatzeko.
2
5.10.4
Soluzio optimo anizkoitza. Adibidea
Har dezagun aurreko adibidean egokitutako taula, esleipen-algoritmoa aplikatzen
hasteko prest dagoena.
1 2 3
4
5
A 8 6 0
7
4
B 3 3 5
4
6
C 2 4 3 M 1
1. urratsa. Problema ez da orekatua. Iturburu-puntu kopurua eta helburu-
puntu kopurua berdinak izan daitezen, gezurrezko bi iturburu-puntu (ge-
zurrezko bi lanpostu) berri sartu behar dira. Beren esleipen-kostuak zero
izango dira, praktikan esleipen horiek ez direlako gauzatuko.
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
197
1 2 3
4
5
A 8 6 0
7
4
B 3 3 5
4
6
C 2 4 3 M 1
D 0 0 0
0
0
E 0 0 0
0
0
2. urratsa. Bigarren eta hirugarren errenkadetako elementuei errenkadako mi-
nimoa kenduko diegu, errenkadetan zeroak sortzeko. Taula honela geratuko
da:
1 2 3
4
5
A 8 6 0
7
4
B 0 0 2
1
3
C 1 3 2 M 0
D 0 0 0
0
0
E 0 0 0
0
0
3. urratsa. Taulako zutabe guztietan zeroren bat badagoenez, ez da eragiketa-
rik egin behar, eta bere horretan geratzen da.
4. urratsa. Zeroen esleipena. Lehenengo errenkadatik hasiko gara, zero kopu-
ru txikiena duenetako bat delako.
(A, 3) posizioan dagoen zeroa esleituko
dugu, errenkada edota zutabe berean dauden gainerako zeroak ezabatuko
ditugu, eta modu berean jarraituko dugu zeroak esleitzen, errenkada eta zu-
tabe guztiek esleitutako zero bat izango duten arte.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

198
5. Garraio-problema eta Esleipen-problema
1
2
3
4
5
A
8
6
0
7
4
B
0
0
2
1
3
C
1
3
2
M
0
D
0
0
0
0
0
E
0
0
0
0
0
Taulan esleitutako bost zero dagoenez, soluzioa optimoa da.
• Soluzioa: A → 3, B → 1, C → 5, D → 2 eta E → 4.
2 eta 4 langileei gezurrezko lanpostua esleitu zaienez, lanposturik ez dutela
lortu interpretatu behar da.
• Kostua: cA3 + cB1 + cC5 + cD2 + cE4 = 10 + 7 + 9 + 0 + 0 = 26.
Zeroen esleipena egiterakoan, bigarren errenkadan
B lanpostua 1 langileare-
kin esleitu daiteke (aurreko soluzioa), edo
2 langilearekin. Bigarren aukera eginez
gero, ondoko soluzio optimoa lortzen da:
1
2
3
4
5
A
8
6
0
7
4
B
0
0
2
1
3
C
1
3
2
M
0
D
0
0
0
0
0
E
0
0
0
0
0
• Soluzioa: A → 3, B → 2, C → 5, D → 1, E → 4.
Kasu honetan,
1 eta 4 langileak geratu dira lanik gabe.
• Kostua: cA3 + cB2 + cC5 + cD1 + cE4 = 10 + 7 + 9 + 0 + 0 = 26.
Modu berean, laugarren eta bostgarren errenkadetan beste esleipen batzuk
egin daitezke. Eman dugun lehen soluzio optimoan
A → 3, B → 1, C → 5,
OpenCourseWare, UPV/EHU

5.10. Esleipen-problema
199
D → 2 eta E → 4 esleipena egin beharrean A → 3, B → 1, C → 5, D → 4
eta
E → 2 egin daiteke. Eman dugun bigarren soluzio optimoan aldiz A → 3,
B → 2, C → 5, D → 1, E → 4 esleipena egin beharrean, A → 3, B → 2,
C → 5, D → 4, E → 1 egin daiteke. Dena den, D eta E gezurrezko lanpostuak
izanik, praktikan langile berberak geratuko dira lanik gabe.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

200
5. Garraio-problema eta Esleipen-problema
OpenCourseWare, UPV/EHU

6. Kapitulua
Programazio osoa
Kapitulu honetan, aztergai izango ditugun problema linealetan aldagai batzuek
edo guztiek balio osoak hartu behar dituzte. Mota horretako problema linealak
ebazteko, programazio osoaren teknikak garatu dira eta, ikusiko dugunez, pro-
blema osoaren soluzio optimoa lortzeko, programazio linealeko zenbait problema
ebatzi beharko dira.
Aldagai errealeko eredu linealak ebazteko ezagutzen dugun simplex algorit-
moa soluzioen multzoaren ganbiltasunean oinarritzen da. Multzo ganbilen mutur-
puntu kopurua ﬁnitua da eta, frogatu dugunez, soluzio optimoa horietariko mutur-
puntu batean aurkitzen da. Aldagaiak osoak izateko murrizketak soluzioen mul-
tzoa murrizten badu ere, problemaren soluzio optimoaren kalkulua zaildu egiten
du.
Aldagaien balioak kontuan hartuz, eredu lineal osoak hiru motakoak izan dai-
tezke.
• Programazio oso mistoan aldagaiak bai oso eta bai erreal izan daitezke.
• Programazio oso hutsean aldagai guztiak osoak dira.
• 0-1 programazio osoko ereduetan aldagai guztiak bitarrak dira.
6.1
Programazio osoaren aplikazio batzuk
Atal honetan programazio osoaren eta 0-1 programazio osoaren zenbait adibide
azalduko dugu.
1. Adibidea. Postetxe bulego batean asteko egun bakoitzerako langile kopuru
desberdinak behar dira (ikus taula).
201

202
6. Programazio osoa
Eguna
Langileak
1. Astelehena
15
2. Asteartea
13
3. Asteazkena
15
4. Osteguna
18
5. Ostirala
14
6. Larunbata
16
7. Igandea
10
Langile bakoitzak bost egunez jarraian lan egin behar du eta gero bi egunez
atsedena hartu. Erabaki behar da asteko egun bakoitzean lanean hasiko den langile
kopurua zein izango den, postetxeko eguneroko langile beharrak asetuko direlarik.
Problemaren helburua postetxeko langile beharrei aurre egitea da, langile kopuru
minimoa kontratatuz.
Eredu lineala idazteko ondoko erabaki-aldagaiak deﬁnitzen dira:
xj : j egunean lanean hasiko den langile kopurua, j = 1, . . . , 7.
Asteko egun bakoitzerako murrizketa bat idatziko da, egun horretan lanean
dagoen langile kopuruak langile-
beharra asetzen duela ziurtatzeko. Eredu lineala
ondokoa da:
min z = x1 + x2 + x3 + x4 + x5 + x6 + x7
hauen mende
x1 + x4 + x5 + x6 + x7 ≥ 15
x1 + x2 + x5 + x6 + x7 ≥ 13
x1 + x2 + x3 + x6 + x7 ≥ 15
x1 + x2 + x3 + x4 + x7 ≥ 18
x1 + x2 + x3 + x4 + x5 ≥ 14
x2 + x3 + x4 + x5 + x6 ≥ 16
x3 + x4 + x5 + x6 + x7 ≥ 10
x1, x2, x3, x4, x5, x6, x7 ≥ 0 eta osoak
OpenCourseWare, UPV/EHU

6.1. Programazio osoaren aplikazio batzuk
203
2. Adibidea. Motxilaren problema. Gehienez 12 kg eramateko ahalmena
duen motxila bat zenbait objektuz bete nahi dugu. Lau objektu ditugu, eta hauen
balioa eta pisua ondoko taulakoak dira:
1
2
3
4
Pisua (kg)
3
6
5
5
Balioa (euro)
15 25 12 10
Erabaki behar da zein objektu sartu motxilan bere balio-totala maximizatzeko.
Problema eredu lineal baten bidez adierazteko, ondoko erabaki-aldagaiak deﬁni-
tuko ditugu
j objektuetarako, j = 1, 2, 3, 4.
xj =



1 baldin j objektua motxilan sartzen bada
0
kontrako kasuan
Eredu lineala ondokoa da:
max z = 15x1 + 25x2 + 12x3 + 10x4
hauen mende
3x1 + 6x2 + 5x3 + 5x4 ≤ 12
x1, x2, x3, x4 = 0 edo 1
Antzeko planteamendua egin daiteke murrizketa gehiagorekin, adibidez, objek-
tuaren bolumena kontuan hartuz.
3. Adibidea. Eskualde batean 6 hiri daude. Hiriak elkarren artean komunika-
tuak egon daitezen, tren-geltokiak eraiki nahi dira. Tren-
geltoki horien kokapena
erabaki nahi da, beti ere, edozein hiritatik abiatuta ere, 30 minutuan edo gutxia-
gotan tren-geltoki bat izango dela ziurtatu behar delarik eta ahalik eta tren-
geltoki
gutxienak eraiki nahi direlarik. Hiri bakoitzetik gainerakoetara joateko behar den
denbora ondoko taulan agertzen da:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

204
6. Programazio osoa
1
2
3
4
5
6
1
0 35 20 40 30 60
2 35
0 45 35 20 70
3 20 45
0 15 55 20
4 40 35 15
0 65 35
5 30 20 55 65
0 40
6 60 70 20 35 40
0
Ondoko aldagai bitarrak deﬁnitzen ditugu
j hirietarako, j = 1, . . . , 6:
xj =



1 baldin j hirian tren-geltokia eraikitzen bada
0 kontrako kasuan
Eredu lineala ondokoa da:
min z = x1 + x2 + x3 + x4 + x5 + x6
hauen mende
x1 + x3 + x5 ≥ 1
x2 + x5 ≥ 1
x1 + x3 + x4 + x6 ≥ 1
x3 + x4 ≥ 1
x1 + x2 + x5 ≥ 1
x3 + x6 ≥ 1
x1, x2, x3, x4, x5, x6 = 0 edo 1
Murrizketa bakoitza hiri bati dagokio, eta ziurtatzen du hiri horretatik gehie-
nez
30 minutura badagoela tren-geltoki bat. Adibidez, lehenengo murrizketak
lehenengo hiritik
30 minutura edo gertuago tren-geltoki bat egongo dela ziurta-
tzen du.
6.2
Problema osoen ebazpena
Hasteko, eredu lineal oso baten soluzio optimoa kalkulatzerakoan sortzen diren
zailtasunak adibide baten bidez erakutsiko ditugu.
OpenCourseWare, UPV/EHU

6.2. Problema osoen ebazpena
205
Izan bedi ondoko eredu lineala:
max z = 80x1 + 45x2
hauen mende
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
x1, x2 ≥ 0 eta osoak
Ondoko graﬁkoan adierazten da eredu lineal osoaren soluzioen multzoa:
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
x2
max
Soluzioen multzoan puntu kopuru ﬁnitua dago, eta ondorioz, puntu guztiak
kalkula daitezke eta horietako bakoitzean helburu funtzioaren balioa aztertu, op-
timoa aurkitzeko. Baina, metodo hori ez da eraginkorra aldagai asko dituzten
problematan, soluzioen multzoan egon daitekeen puntu kopuruagatik.
Kapitulu honetan ikusiko dugu problema osoaren soluzio optimoa kalkulatze-
ko askoz ere kalkulu gehiago egin beharko dugula, nahiz eta jatorrizko problemari
oso izatearen murrizketa kenduta geratzen den problemaren soluzio kopurua txi-
kiagoa izan. Horren arrazoia hau da: problema lineal osoaren soluzioen multzoa
ez dela multzo ganbila, problema lineal orokorretan, aldiz, bai. Ganbiltasunaren
propietateari esker, 2. Kapituluan garatutako teoria aplika daiteke.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

206
6. Programazio osoa
Ereduaren soluzio optimoa aurkitzeko beste modu bat problema ebaztea da, al-
dagaiak osoak izateko murrizketa kontuan hartu gabe, eta behin soluzio optimoa
kalkulatu denean, soluzio horretatik gertuen dagoen soluzio osoa problema osoa-
ren soluziotzat hartzea. Adibidearekin jarraituz, aldagaiek osoak izateko duten
murrizketa kenduko diogu problemari; problema horri problema erlaxatua esaten
zaio, eta
P E laburduraz adieraziko dugu aurrerantzean. Ondoko graﬁkoan dago
problema erlaxatuaren ebazpena:
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
x2
xP E = (
25
7
,
24
7
)
max
Problema erlaxatuaren soluzio optimoa xP E = (
25
7 ,
24
7 ) = (3.571, 3.428) da,
eta helburu funtzioaren balio optimoa puntu horretan
zPE = 440. Dena den,
puntu hori ez da problema osoaren soluzio optimoa, aldagaien balio optimoak
ez direlako osoak. Aldagaien balioak biribilduz, problema erlaxatuaren puntu
optimoaren inguruko beste lau puntu lortzen dira:
(3, 3), (3, 4), (4, 3), (4, 4), eta
helburu funtzioaren balioa kalkula dezakegu lau puntu horietan. Kasu honetan,
optimoa
(4, 4) puntuan dago, baina ondoko graﬁkoan ikus daitekeen bezala, puntu
hori ez dago soluzioen multzoan:
OpenCourseWare, UPV/EHU

6.3. Problema osoen ebazpide graﬁkoa
207
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
x2
max
Metodo hau ere ez da oso egokia problema handietan aplikatzeko, hurbilke-
ta posible asko egon daitekeelako, eta ikusi dugun bezala, hurbilketa horietako
batzuk soluzioen multzotik kanpo egon daitezkeelako. Gainera, problema handie-
tarako hurbilketa asko kalkulatu beharko dira.
Arrazoi horiengatik problema osoak ebazteko teknika bereziak garatu dira.
Kapitulu honetan adarkatzearen eta bornatzearen teknika azaltzen da.
6.3
Problema osoen ebazpide graﬁkoa
Adarkatze- eta bornatze-algoritmoaren arabera, eredu erlaxatua ebazten da, eta
lortutako soluzioa osoa ez bada, problema erlaxatua bitan banatzen da (adarka-
tzea), soluzioen multzoari problema osoaren soluzio optimoa barnean ez duen
zati bat kentzeko. Sortutako bi problemak ebazten dira, eta soluzioa osoa ez bada
adarkatu egiten da. Adarkatzearen ondorioz lortzen diren problemek, erlaxatuak
bezala, ez dute aldagaiak osoak izatearen murrizketa, eta ondorioz, simplex algo-
ritmoa erabiliz ebatziak izango dira.
Atal honetan, adarkatze- eta bornatze-algoritmoa azalduko dugu 205. orrialde-
ko problema graﬁkoki ebatziz. Har ditzagun adibideko eredu lineala eta dagokion
eredu erlaxatua.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

208
6. Programazio osoa
Problema Osoa: PO
Problema Erlaxatua: PE
max z = 80x1 + 45x2
max z = 80x1 + 45x2
hauen mende
hauen mende
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1, x2 ≥ 0 eta osoak
x1, x2 ≥ 0
Eredu erlaxatuaren soluzio optimoa xP E = (3.571, 3.428) puntuan dagoe-
la ikusi dugu 206. orrialdeko graﬁkoan. Problema erlaxatuaren balio optimoa
zPE = 440 da. Aldagaiek ez dituzte balio osoak hartzen. Ikusiko dugu pro-
blema osoaren soluzio optimoa kalkula daitekeela zenbait problema erlaxaturen
ebazpenaren bitartez. Horretarako, problema bitan banatuko da, problema osoa-
ren soluzioa izango ez duen problema erlaxatuaren soluzioen multzoaren zati bat
kenduz; adarkatuz, alegia.
Problema adarkatzeko, soluzio optimoan balio osoa izan behar duen eta ez
duen aldagai bat aukeratu behar da; kasu honetan, bai
x1 eta bai x2 aukeratuak
izan daitezke.
x1 aukeratuko dugu, eta soluzio optimoan 3.571 balioa hartzen
duela ikusten dugunez, esan dezakegu aldagai horrek ezin duela
3 < x1 < 4
tarteko baliorik hartu, osoak ez direlako. Hortaz, problema erlaxatuaren soluzioen
multzoa bitan banatuko dugu
x1 aldagairako balioen tarte hori kenduz, hau da, x1
aldagairako balioak bornatuz ondoko murrizketak erabiliz:
x1 ≤ 3 eta x1 ≥ 4.
Horrela lortzen dira ondoko bi problemak:
P2 problema
P3 problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
hauen mende
hauen mende
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≤ 3
x1 ≥ 4
x1, x2 ≥ 0
x1, x2 ≥ 0
Sortu berri ditugun P2 problema eta P3 problema graﬁkoki ebatziz, 209. orrial-
deko graﬁkoan ikusten da hasierako problema erlaxatuaren soluzioen multzotik
x1
OpenCourseWare, UPV/EHU

6.3. Problema osoen ebazpide graﬁkoa
209
aldagairako
3 eta 4 arteko balio erreal ez-oso guztiak desagertu direla. P2 proble-
mari eta P3 problemari dagozkien soluzioen multzoak grisez marraztuta ikusten
dira graﬁkoan. Bi problema horiek modu independentean ebatzi behar dira. Gra-
ﬁkoki ebatziz lortzen diren soluzio optimoak ondokoak dira:
• P2 problema: Soluzio optimoa xP2 = (3, 4) eta zP2 = 420.
• P3 problema: Soluzio optimoa xP3 = (4,
12
5 ) eta zP 3 = 428.
P2 problemaren soluzio optimoa osoa denez, problema ez da adarkatua izango,
eta azkeneko problema dela esaten da. xP 2 = 
(3, 4) soluzioari soluziogai esaten
zaio, eta bera izango da problema osoaren soluzio optimoa, beste hobe bat aurki-
tzen ez badugu. Problema horren helburu funtziorako balio optimoa
zP2 = 420
da eta problema osorako behe-bornea ﬁnkatzen du:
zb = 420.
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
= 3 x1 = 4
x1
x2
(3, 4)
(4,
12
5 )
max
P2 problema
P3 problema
P3 problemaren soluzioa ez da problema osoaren soluzioa, ez delako osoa;
x2
aldagaiak
12
5
= 2.4 balioa hartzen du. Helburu funtzioak puntu horretan zP3 =
428 balioa hartzen du, eta zP3 > zb betetzen denez, problema adarkatu egingo
dugu, P2 problemaren ebazpenetik lortu dugun soluziogaia baino hobea den beste
soluzio oso bat aurkitzeko aukera dagoelako.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

210
6. Programazio osoa
Adarkaketa egiteko,
x2 aldagaia aukeratuko dugu, aldagaia osoa izanik orain-
dik ez duelako balio osorik optimoan. P3 problema adarkatuz, hau da, bere solu-
zioen multzotik
2 < x2 < 3 balioak kenduz, P4 problema eta P5 problema lortzen
dira.
P4 problema
P5 problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
hauen mende
hauen mende
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≥ 4, x2 ≤ 2
x1 ≥ 4, x2 ≥ 3
x1, x2 ≥ 0
x1, x2 ≥ 0
Hurrengo graﬁkoan P4 problemaren eta P5 problemaren soluzio optimoak kal-
kulatu dira, eta ikusten den bezala, P5 problemak ez du soluziorik; ondorioz, az-
keneko problema da, eta ez da problema horretatik abiatuta adarkaketa gehiagorik
egingo.
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
= 4
x2
= 3
x2
= 2
x1
x2
(4.16, 2)
max
P4 problema
P5 problema
OpenCourseWare, UPV/EHU

6.3. Problema osoen ebazpide graﬁkoa
211
P4 problemaren soluzio optimoa xP 4 = (
25
6 , 2) = (4.166, 2) da, eta helburu
funtzioaren balio optimoa
zP4 =
1270
3
= 423.33. Balio hori behe-bornearekin
konparatuz,
zP4 > zb = 420 betetzen dela ikusten da. Hori dela eta, P4 problema
ez da azkeneko problema eta adarkatzea erabakitzen da;
x1 aldagaia aukeratuz eta
problemari
x1 ≤ 4 eta x1 ≥ 5 murrizketak gehituz sortzen dira P6 problema eta
P7 problema.
P6 problema
P7 problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
hauen mende
hauen mende
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≥ 4, x2 ≤ 2, x1 ≤ 4
x1 ≥ 4, x2 ≤ 2, x1 ≥ 5
x1, x2 ≥ 0
x1, x2 ≥ 0
x1
+ x2 = 7
12x1 + 5x2 = 60
x1
= 4
x2
= 2
x1
= 5
x1
x2
(4, 2)
(5, 0)
max
P6 problema
P7 problema
P6 problemaren soluzioen multzoa segmentu bat da, eta xP 6 = (4, 2) puntua da
soluzio optimoa,
zP6 = 410 delarik. zP6 < zb = 420 betetzen denez, problema
azkenekoa da.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

212
6. Programazio osoa
P7 problemaren soluzioen multzoan puntu bat besterik ez dago, eta bera da
problemaren soluzio optimoa: xP 7 = (5, 0). Helburu funtzioak bertan hartzen
duen balioa
zP7 = 400 izanik, zP7 < zb = 420 betetzen denez, problema azkene-
koa da.
Hortaz, biak azkeneko problemak dira, eta ez da adarkaketekin jarraitu behar.
Problema osoaren soluzio optimoa P2 problema ebatziz lortutako soluziogaia da,
x
∗
P O = xP 2 = (x
∗
1, x
∗
2) = (3, 4)
eta
z
∗
P O = zb = 420.
Adibide honen ebazpen osoaren diagrama 6.1 Irudian dago. Bertan ikus daitez-
ke adarkatze- eta bornatze-algoritmoa erabiliz sortutako problema erlaxatu guz-
tien soluzio optimoak. Problema erlaxatu bakoitzerako kalkulatutako helburu
funtzioaren balio optimoa problema osoaren goi-borne bat da ebazpenaren adar
horretan.
PE problema
P2 problema
P3 problema
P4 problema
P5 problema
P6 problema
P7 problema
xP E = (3.571, 3.428)
xP 2 = (3, 4)
xP 3 = (4, 2.4)
xP 4 = (4.166, 2)
Bideraezina
xP 6 = (4, 2)
xP 7 = (5, 0)
zPE = 440
zP2 = 420
zP3 = 428
zP4 = 423.33
zP6 = 410
zP7 = 400
zb = 420
x1 ≤ 3
x1 ≥ 4
x2 ≤ 2
x2 ≥ 3
x1 ≤ 4
x1 ≥ 5
Soluziogaia
Azkenekoa
Azkenekoa
Azkenekoa
Azkenekoa
6.1. Irudia: Adibideko eredu osoaren ebazpenaren diagrama.
OpenCourseWare, UPV/EHU

6.4. Adarkatze- eta bornatze-metodoa
213
6.4
Adarkatze- eta bornatze-metodoa
Aurreko atalean graﬁkoki ikusi dugun adarkatze- eta bornatze-algoritmoan pro-
blema erlaxatua, soluziogaia eta azkeneko problema kontzeptuak erabili ditugu.
6.4.1 Deﬁnizioa. (Problema erlaxatua) Problema lineal oso bat emanik, alda-
gaiak osoak izatearen murrizketa kenduta lortzen den ereduari problema erlaxa-
tua esaten zaio.
Problema Osoa: PO
Problema Erlaxatua: PE
max z = cT x
max z = cT x
hauen mende
hauen mende
Ax
≤ b
Ax
≤ b
x
≥ 0 eta osoa
x
≥ 0
Problema erlaxatuak problema osoak baino murrizketa gutxiago ditu. Horrek
esan nahi du problema osoaren bideragarritasun-eskualdea dagokion problema er-
laxatuaren bideragarritasun-
eskualdearen parte dela, hau da, maximizatze kasura-
ko balio optimoen artean honako erlazioa betetzen da:
z
∗
P E ≥ z
∗
P O.
6.4.2 Deﬁnizioa. (Soluziogaia) Problema oso bat izanik, problemaren ebazpena-
ren iterazio bakoitzean ordura arte lortutako soluzio oso onenak soluziogai izena
hartzen du.
Soluziogaia problema osoaren soluzio optimoa izan daitekeenez gorde egin
behar da, hobea izango den beste bat lortu arte. Helburu funtzioak soluziogaian
hartzen duen balioak problema osorako
zb behe-bornea ﬁnkatzen du. Ebazpe-
nean problema baten helburu funtzioaren balioa
zb baino txikiagoa edo berdina
denean, adar hori moztu egingo dugu, eta problema ez da gehiago adarkatua izan-
go, problema osoaren soluzio optimoa adar horretatik ezin izango delako lortu.
Adarkatua izango ez den problema horri azkeneko problema esaten zaio eta hone-
la deﬁnitzen da.
6.4.3 Deﬁnizioa. (Azkeneko problema) Problema oso bat ebazterakoan, ondo-
ko baldintzetako bat betetzen duen problema erlaxatu oro azkeneko problema dela
esaten da: (1) bideraezina bada, (2) helburu funtzioaren balio optimoa
zb behe-
bornea baino txikiagoa edo berdina bada, (3) soluzioa osoa bada.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

214
6. Programazio osoa
Adibidez, 6.1 Irudian P2 problema, P5 problema, P6 problema eta P7 proble-
ma azkeneko problemak dira.
Adarkatze- eta bornatze-algoritmoan, problema erlaxatu bakoitzaren helburu
funtzioaren balio optimoa
zg notazioaz adieraziko dugu, esan bezala, problema
osoaren balio optimorako goi-borne bat ﬁnkatuko duelako adarrean.
6.4.1
Adarkatze- eta bornatze-algoritmoa
Algoritmo hau maximizatze-helburua duten programazio osoko problemak ebaz-
teko diseinatua izan da. Algoritmoaren urratsak ondokoak dira:
1. urratsa. Hasieraketa
Problema osoari dagokion problema erlaxatua ebatzi.
– Problema erlaxatuaren soluzio optimoa osoa bada, hori izango da pro-
blema osoaren soluzio optimoa. Amaitu.
– Bestela, problema osoaren helburu funtziorako
zb behe-bornea hasie-
ratu. Problema osorako soluziogairik ez bada ezagutzen,
zb = −∞
hasieratuko da.
2. urratsa. Adarkatzea
Azkenekoa ez den problema bat aukeratu. Aukeratutako probleman osoa
izan behar duen eta problemaren soluzio optimoan ez den
xj aldagai bat
aukeratu. Problema adarkatu,
xj ≤ [xj] eta xj ≥ [xj] + 1 murrizketak
erantsiz, bi problema berri sortzeko1.
3. urratsa. Bornatzea
Aurreko adarkatze-urratsean sortu berri ditugun bi problemak ebatzi2 eta
problema bakoitzerako
zg kalkulatu.
4. urratsa. Azkeneko problemak
Azkeneko ez diren problema guztiak aztertu. Azkeneko dira ondoko bal-
dintzetako bat betetzen dutenak.
(1) Problema bideraezina da.
1[xj] balioa xj aldagaiaren zati osoa da
2Ebazteko sentikortasunaren analisia erabiltzen da, eta simplex dual algoritmoa aplikatzen da.
OpenCourseWare, UPV/EHU

6.4. Adarkatze- eta bornatze-metodoa
215
(2)
zg ≤ zb.
(3) Problemaren soluzioa osoa da eta
zg > zb. Behe-bornea eguneratu zb
=
zg eginez; soluzio oso hori soluziogaia da.
Azkeneko ez den problemarik existitzen bada, algoritmoaren 2. urratsean
jarraitu behar da adarkatze berri batekin. Problema guztiak azkeneko ba-
dira, soluziogaia problema osoaren soluzio optimoa da. Soluziogairik ez
badago, problema osoa bideraezina da.
Problema oso baten soluzio optimoaren bilaketa adarkatze- eta bornatze-algo-
ritmoaren bidez egiteak kalkulu asko eskatzen badu ere, algoritmo hau da proble-
ma osoak, bai hutsak eta bai mistoak, ebazteko gehien erabiltzen dena.
Algoritmoaren 2. urratsean adarkatua izango den problema eta bornatua izan-
go den aldagaia irizpideren baten arabera aukeratzen badira, soluzio optimoaren
bilaketan algoritmoaren zenbait iterazio aurreztu ahal izango dira. Adarkatua
izango den problema aukeratzeko irizpide erraz bat azkenekoa ez den
zg handie-
neko problema aukeratzea da. Bornatua izango den aldagaia aukeratzeko, aldiz,
irizpideak konplexuagoak dira. Ondoko adibidean zoriz, hau da, irizpiderik jarrai-
tu gabe, aukeratuko dugu aldagaia.
Adibidea. 205. orrialdeko problema osoaren soluzio optimoa kalkulatuko
dugu adarkatze- eta bornatze-algoritmoa erabiliz.
Lehenengo iterazioa
1. urratsa. Hasieraketa. PE problema erlaxatua ebatzi. Taula optimoa ondo-
koa da:
x1 x2
x3
x4
0
0
20
5 440
a2
0
1
12
7
−
1
7
24
7
a1
1
0 −
5
7
1
7
25
7
Behe-bornea hasieratuko dugu,
zb = −∞.
2. urratsa. Adarkatzea. PE problema erlaxatuaren soluzioa ez da osoa.
Adarkatzeko aldagai bat aukeratuko dugu,
x1, eta bi problema berri sortuko ditu-
gu: P2 problema eta P3 problema (ikus 208. orrialdea).
3. urratsa. Bornatzea. Sentikortasunaren analisia erabiliz, bi problema ho-
riek ebatziko ditugu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

216
6. Programazio osoa
• P2 problemaren ebazpena. x1 ≤ 3 murrizketari dagokion nasaitze-aldagaia
gehitu eta P1 problemari dagokion taula optimoan sartu. Ondoko taula lor-
tzen da:
x1 x2
x3
x4
x5
0
0
20
5
0 440
a2
0
1
12
7
−
1
7
0
24
7
a1
1
0 −
5
7
1
7
0
25
7
a5
1
0
0
0
1
3
Taulako 3. errenkada egokitzeko, 3. errenkada
− 2. errenkada eragiketa
egingo dugu.
x1 x2
x3
x4
x5
0
0
20
5
0 440
a2
0
1
12
7
−
1
7
0
24
7
a1
1
0 −
5
7
1
7
0
25
7
a5
0
0
5
7
−
1
7
1 −
4
7
Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika-
tuz, P2 problemarako optimoa den taula lortzen da.
x1 x2
x3
x4
x5
0
0
45
0
35 420
a2
0
1
1
0 −1
4
a1
1
0
0
0
1
3
a4
0
0 −5
1 −7
4
• P3 problemaren ebazpena. x1 ≥ 4 murrizketa −1 balioaz biderkatuko
dugu P1 problemaren taula optimoan sartzeko,
−x1 ≤ −4, eta ondoren, x5
nasaitze-aldagaia gehituko dugu. Hau da lortuko dugun taula:
OpenCourseWare, UPV/EHU

6.4. Adarkatze- eta bornatze-metodoa
217
x1
x2
x3
x4
x5
0
0
20
5
0 440
a2
0
1
12
7
−
1
7
0
24
7
a1
1
0 −
5
7
1
7
0
25
7
a5
−1
0
0
0
1
−4
3. errenkada eguneratu, 3. errenkada
+ 2. errenkada eragiketa eginez.
x1 x2
x3
x4
x5
0
0
20
5
0 440
a2
0
1
12
7
−
1
7
0
24
7
a1
1
0 −
5
7
1
7
0
25
7
a5
0
0 −
5
7
1
7
1 −
3
7
Taulan ez dago bideragarritasun primalik. Simplex dual algoritmoa aplika-
tuz, P3 problemarako taula optimoa lortzen da.
x1 x2 x3
x4
x5
0
0
0
9
28 428
a2
0
1
0
1
5
12
5
12
5
a1
1
0
0
0 −1
4
a3
0
0
1 −
1
5
−
7
5
3
5
Horrela, P2 problema eta P3 problema ebatzi dira 
(ikus soluzioak 212. orrialdeko
6.1 Irudian).
4. urratsa. Azkeneko problemak.
P2 problema azkenekoa da
zg = 420 > zb izanik soluzioa osoa delako: x1 = 3
eta
x2 = 4. Oraingoz kalkulatu den soluzio osorik onena izateagatik soluziogaia
da, eta behe-bornea eguneratu egin behar da:
zb = zg = 420.
P3 problema ez da azkenekoa, ez duelako 4. urratseko irizpide bat bera ere
betetzen.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

218
6. Programazio osoa
Problema guztiak azkenekoak ez direnez, algoritmoaren iterazio berri bat egin
behar da 2. urratsean jarraituz.
Bigarren iterazioa
2. urratsa. Adarkatzea. Azkenekoa ez den problema bakarra aukeratuko
dugu: P3 problema. Bertan,
x2 aldagaia aukeratuko dugu bornatua izateko. Pro-
blema adarkatuko dugu P3 problemari
x2 ≤ 2 murrizketa erantsiz P4 problema
sortzeko, eta
x2 ≥ 3 erantsiz P5 problema sortzeko (ikus 210. orrialdea).
3. urratsa. Bornatzea. Sortutako bi problemak ebatzi. Aurreko iterazioan
egin bezala, sentikortasunaren analisia eta simplex dual algoritmoa aplikatuko di-
tugu. Kasu honetan, P3 problemaren taula optimotik abiatuko gara P4 proble-
maren eta P5 problemaren soluzio optimoak kalkulatzeko (ikus soluzioak 212.
orrialdeko 6.1 Irudian).
4. urratsa. Azkeneko problemak.
P5 problema azkenekoa da bideraezina delako.
P4 problemaren soluzio optimoa ez da osoa, eta
zg = 423.33 > 420 = zb
betetzen da. Hortaz, problema ez da azkenekoa. 2. urratsera joan behar da algo-
ritmoaren iterazio berri bati ekiteko.
Hirugarren iterazioa
2. urratsa. Adarkatzea. Oraingoan, P4 problema da azkenekoa ez den baka-
rra, eta adarkatua izateko aukeratuko dugu. Bertan,
x1 aldagaia aukeratuko dugu.
Bi problema berri sortuko ditugu: P6 problema eta P7 problema (ikus ereduak
211. orrialdean).
3. urratsa. Bornatzea. Sortutako bi problema berriak ebatzi, aurreko urra-
tsetan egin bezala. Kasu honetan, P4 problemaren taula optimotik abiatuko gara
(ikus soluzio optimoak 212. orrialdeko 6.1 Irudian).
4.urratsa. Azkeneko problemak.
P6 problema azkenekoa da,
zg = 410 < 420 = zb betetzen delako.
P7 problema ere azkenekoa da,
zg = 400 < 420 = zb betetzen delako.
Problema guztiak azkeneko bihurtu direnez, algoritmoaren aplikazioa amaitu
da. Problema osoaren soluzio optimoa, P2 problemaren ebazpenetik lortu den
soluziogaia da.
x
∗
1 = 3,
x
∗
2 = 4,
z
∗
P O = zb = 420.
2
OpenCourseWare, UPV/EHU

6.5. 0-1 programazio osoa
219
6.5
0-1 programazio osoa
Praktikan aldagai bitarrak besterik ez dituzten problemak existitzen dira. Mota
horretako problemak ebazteko, algoritmo desberdinak garatu izan dira. Atal ho-
netan, funtsean adarkatze- eta bornatze-
algoritmoaren egitura bera duen algoritmo
horietako bat azalduko dugu.
Aztertuko dugun algoritmoa erabiltzeko, 0-1 eredu lineal osoaren helburu fun-
tzioaren koeﬁzienteek ondoko baldintza bete behar dute:
0 ≤ c1 ≤ c2 ≤ · · · ≤ cn
(6.1)
Eredu lineala beti idatz daiteke 
(6.1) baldintza beteko duen idazkeran; hori hala
izan dadin, beharrezkoak diren aldaketa linealak egin beharko dira.
Adibidea. Izan bedi ondoko 0-1 eredu lineal osoa:
max z = 6x1 − 4x2
hauen mende
3x1 + 2x2 ≤ 10
−x1 + x2 ≤ 17
x1, x2 = 0 edo 1
Helburu funtzioaren koeﬁzienteek (6.1) baldintza betetzen ez dutenez, ondoko
aldaketa lineala egin behar dugu: helburu funtzioan koeﬁziente minimoa aukera-
tuko dugu balio absolutuan,
c2 kasu honetan. x2 = y1 egingo dugu baldin koeﬁ-
zientea positiboa bada, eta
x2 = 1 − y1 baldin c2 negatiboa bada. Kasu honetan c2
negatiboa denez,
x2 = 1 − y1 aldagai-aldaketa egingo dugu. Hurrengo koeﬁziente
txikiena balio absolutuan
c1 da; positiboa denez, x1 = y2 egingo dugu.
Aldagai-aldaketa eginez lortzen den eredu linealean helburu funtzioaren koe-
ﬁzienteek 
(6.1) baldintza betetzea lortzen dugu, hau da, positiboak izatea eta go-
ranzko ordenean egotea.
max z = 4y1 + 6y2 − 4
hauen mende
−2y1 + 3y2 ≤ 8
−y1 − y2 ≤ 16
y2, y2 = 0 edo 1
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

220
6. Programazio osoa
2
6.5.1 Deﬁnizioa. (Problema erlaxatua) 0-
1 eredu lineal bat izanik, dagokion pro-
blema erlaxatua lortzeko problemari murrizketa guztiak kendu behar zaizkio, al-
dagaiak bitarrak izatearena izan ezik.
6.5.2 Deﬁnizioa. (Soluzio partziala) 0-
1 eredu lineal bat emanik, aldagairen bat
balio ﬁnkorik gabe duen soluzioari eredu linealaren soluzio partziala deitzen zaio.
6.5.3 Deﬁnizioa. (Soluzio partzial baten osaketa) 0-
1 eredu lineal oso baten so-
luzio partzial bat emanik, ﬁnkatu gabe dauden aldagaiei balio ﬁnkoa ematen zaie-
nean lortzen den soluzioa soluzio partzialaren osaketa dela esaten da.
Adibidea. Izan bedi ondoko 0-1 eredu lineala:
max z = x1 + 2x2 + 4x3
hauen mende
x1 + x2 + 2x3 ≤ 4
3x1 + x2 + 2x3 ≤ 5
x1, x2, x3 = 0 edo 1
Dagokion problema erlaxatua ondokoa da:
max z = x1 + 2x2 + 4x3
hauen mende
x1, x2, x3 = 0 edo 1
Adibidez, x
= (1, 1, −) soluzioa problema erlaxatuaren soluzio partzial bat
da. Soluzio horrek bi osaketa posible ditu:
(1, 1, 0) eta (1, 1, 1). x = (0, −, −)
soluzioa ere problema erlaxatuaren soluzio partzial bat da, eta lau osaketa posible
ditu:
(0, 1, 1), (0, 1, 0), (0, 0, 1) eta (0, 0, 0).
Problema erlaxatua ebaztea erraza gertatzen da, jakinda problemari murrizketa
guztiak kendu zaizkiola, aldagaiak bitarrak izatearena izan ezik. Gainera, helbu-
ru funtzioaren koeﬁziente guztiak positiboak direnez, garbi ikusten da problema
erlaxatuaren soluzio optimoa x
∗ = (1, 1, 1) dela. Soluzio horrek 0-1 problema
osoaren murrizketak beteko ez balitu, helburu funtzioaren koeﬁzienteak txikiene-
tik handienera ordenatuta daudenez, problema erlaxatuaren hurrengo soluziorik
OpenCourseWare, UPV/EHU

6.5. 0-1 programazio osoa
221
onenarekin, hau da, x
= (0, 1, 1) soluzioarekin probatuko genuke, eta gero hu-
rrengoarekin x
= (1, 0, 1), eta abar. Problema erlaxatuaren soluzioak onenetik
okerrenera ordena ditzakegu, eta ordena horretan 0-1 problema osoaren murrizke-
ta betetzen duten egiaztatu, betetzen duen bat aurkitu arte.
2
Ondoko atalean azaltzen den 0-1 adarkatze- eta bornatze- algoritmoak, hain
zuzen ere, hori egiten du: algoritmoa problema erlaxatuaren soluzio optimotik
hasten da, eta 0-1 problema osoaren murrizketak betetzen dituen egiaztatzen du.
Problemak adarkatuz, 0-1 problema osorako soluzio optimoa aurkituko da. Eba-
tzitako problema guztiak erlaxatuak dira.
6.5.1
0-1 adarkatze- eta bornatze-algoritmoa
Algoritmo hau helburua maximizatzea duten 0-1 problema linealak ebazteko di-
seinatua izan da. Helburu funtzioaren koeﬁzienteek
0 ≤ c1 ≤ c2 ≤ · · · ≤ cn
baldintza bete behar dute algoritmoa aplikatzen hasi aurretik.
1. urratsa. Hasieraketa
Problema erlaxaturako soluzio optimoa den x
= (1, . . . , 1) soluzioak 0-1
problema osoaren murrizketak betetzen dituen egiaztatu. Hala bada,
(1, . . . , 1)
soluzioa optimoa da. Amaitu.
Bestela, aztertu ea murrizketak betetzen diren x
= (0, 1, . . . , 1) balioetara-
ko. Hala bada,
(0, 1, . . . , 1) soluzioa optimoa da. Amaitu.
Bestela,
zb = z(x) behe-bornea hasieratu, non x = (0, . . . , 0) den.
zg = z(xg) da, non xg = (0, 1, . . . , 1) den. Problemari k = 1 indizea
esleitu.
2. urratsa. Adarkatzea
Azkenekoa ez den problema bat aukeratu. Aukeratutako problema adarkatu,
xk = 0 eta xk = 1 murrizketak erantsiz, bi problema berri sortzeko.
3. urratsa. Bornatzea
Bi problema berri horietarako
k + 1 osagaia 0 duten eta hurrengoak 1 di-
tuzten xg osaketak egin. Bi problemek osaketa horietan hartzen dituzten zg
balioak kalkulatu. Problema berri horiei
k = k + 1 indizea esleitu.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

222
6. Programazio osoa
4. urratsa. Azkeneko problemak
Azkeneko ez diren problema guztiak aztertu. Azkeneko dira ondoko bal-
dintzetako bat betetzen dutenak:
(1)
zg ≤ zb.
(2)
zg > zb bada, eta xg soluzioak problema osoaren murrizketak betetzen
baditu,
xg soluziogaia da, eta zb = zg eguneratuko da.
(3) Problemaren murrizketa guztiak aldi berean beteko dituen osaketarik
ez da existitzen. Problema bideraezina da.
Problema guztiak azkenekoak badira, amaitu. Problema osoaren soluzio
optimoa
zb behe-borneak erakutsitako soluziogaia da.
Bestela, 2. urratsera joan.
Adibidea. 203. orrialdeko motxilaren problema ebatziko dugu 0-1 adarkatze-
eta bornatze-algoritmoa erabiliz.
max z = 15x1 + 25x2 + 12x3 + 10x4
hauen mende
3x1 + 6x2 + 5x3 + 5x4 ≤ 12
x1, x2, x3, x4 = 0 edo 1
Helburu funtzioaren koeﬁzienteak ordenatzeko, ondoko aldagai-aldaketa egin
behar da:
x4 = y1, x3 = y2, x1 = y3 eta x2 = y4. Beste 0-1 problema osoa eta
dagokion eredu erlaxatua ondokoak dira:
0-1 Problema Osoa: PO
Problema Erlaxatua: PE
max z = 10y1 + 12y2 + 15y3 + 25y4
max z = 10y1 + 12y2 + 15y3 + 25y4
hauen mende
hauen mende
5y1 + 5y2 + 3y3 + 6y4 ≤ 12
y1, y2, y3, y4 = 0 edo 1
y1, y2, y3, y4 = 0 edo 1
OpenCourseWare, UPV/EHU

6.5. 0-1 programazio osoa
223
226. orrialdeko 6.2 Irudiko diagraman laburbilduko ditugu 0-1 problema osoaren
soluzio optimoaren bilaketarako 0-1 adarkatze- eta bornatze- algoritmoa aplika-
tzean lortutako problema erlaxatu guztiak, eta bertan zehaztuko ditugu problema
bakoitzerako soluzio partzial bat eta problemarako goi-
borne bat kalkulatzeko ba-
lioko digun osaketa.
Lehenengo iterazioa
1. urratsa. Hasieraketa.
Problema erlaxatuaren
(1, 1, 1, 1) soluzio optimoak ez du 0-1 problema osoa-
ren murrizketa betetzen.
Problema erlaxatuaren hurrengo soluzio onena den
(0, 1, 1, 1) soluzioak ere
ez du 0-1 problema osoaren murrizketa betetzen. Soluzio horri dagokion helburu
funtzioaren balioa
zg = 52 da.
Problemari
k = 1 indizea esleitu eta behe-bornea zb = 0 balioarekin hasiera-
tuko dugu.
2. urratsa. Adarkatzea.
PE problema erlaxatua bi problematan adarkatuko dugu,
y1 = 0 eta y1 =
1 murrizketak erantsiz. Horrela lortuko ditugu P2 problema eta P3 problema,
hurrenez hurren.
P2 problema
P3 problema
max z = 10y1 + 12y2 + 15y3 + 25y4
max z = 10y1 + 12y2 + 15y3 + 25y4
hauen mende
hauen mende
y1 = 0
y1 = 1
y2, y3, y4 = 0 edo 1
y2, y3, y4 = 0 edo 1
3. urratsa. Bornatzea.
yg = (0, 0, 1, 1) osaketarekin P2 problemaren helburu funtzioak zg = 40 ba-
lioa hartzen du; balio hori problema osorako goi-
borne bat izango da adar honetan.
yg = (1, 0, 1, 1) osaketarekin P3 problemaren helburu funtzioak zg = 50 ba-
lioa hartzen du; balio hori problema osorako goi-
borne bat izango da adar honetan.
Problema hauei
k = 2 indizea esleituko diegu.
4. urratsa. Azkeneko problemak.
P2 problemarako dugun yg = (0, 0, 1, 1) osaketak 0-1 problema osoaren mu-
rrizketa betetzen du. Gainera,
zg = 40 > 0 = zb betetzen denez, soluzio hori
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

224
6. Programazio osoa
soluziogai bihurtuko da, eta P2 problema azkeneko. Behe-bornea eguneratuko
dugu,
zb = 40.
P3 problemaren yg = (1, 0, 1, 1) osaketak, aldiz, ez du 0-1 problema osoaren
murrizketa betetzen. Gainera, P3 problema ez da bideraezina, existitzen delako
0-1 problema osoaren murrizketa beteko duen osaketaren bat, y
= (1, 0, 0, 0)
adibidez.
zg = 50 > zb izanik, ez da azkeneko problema izateko bete behar den
baldintzarik betetzen. Beraz, P3 problema ez da azkenekoa, eta algoritmoaren
iterazio berri bati ekin behar zaio.
Bigarren iterazioa.
P3 problema adarkatuko dugu,
y2 = 0 murrizketa erantsiz P4 problema sor-
tzeko eta
y2 = 1 murrizketa erantsiz P5 problema.
P4 problema
P5 problema
max z = 10y1 + 12y2 + 15y3 + 25y4
max z = 10y1 + 12y2 + 15y3 + 25y4
hauen mende
hauen mende
y1 = 1
y1 = 1
y2 = 0
y2 = 1
y3, y4 = 0 edo 1
y3, y4 = 0 edo 1
Algoritmoan zehazten diren osaketak eta osaketa horietarako helburu funtzioa-
ren balioak kalkulatuko ditugu bi problematarako:
P4 problemarako yg = (1, 0, 0, 1) eta zg = 35 ditugu. Problema azkenekoa
da,
zg < zb = 40 betetzen delako.
P5 problemarako yg = (1, 1, 0, 1) eta zg = 47 ditugu. Problema ez da azkene-
koa.
Problema hauei
k = 3 indizea esleituko diegu. P5 problema azkenekoa ez
denez, 2. urratsera joan eta algoritmoaren iterazio berri bati ekingo diogu.
Hirugarren iterazioa.
P5 problema adarkatuko dugu,
y3 = 0 murrizketa erantsiz P6 problema sor-
tzeko eta
y3 = 1 erantsiz P7 problema sortzeko.
OpenCourseWare, UPV/EHU

6.5. 0-1 programazio osoa
225
P6 problema
P7 problema
max z = 10y1 + 12y2 + 15y3 + 25y4
max z = 10y1 + 12y2 + 15y3 + 25y4
hauen mende
hauen mende
y1 = 1
y1 = 1
y2 = 1
y2 = 1
y3 = 0
y3 = 1
y4 = 0 edo 1
y4 = 0 edo 1
Bi problemetarako osaketak eta osaketa horietarako helburu funtzioaren balioa
kalkulatuko ditugu.
P6 problemarako yg = (1, 1, 0, 0) eta zg = 22 ditugu. Problema azkenekoa
da,
zg < zb = 40 betetzen delako.
P7 problemarako yg = (1, 1, 1, 0) eta zg = 37 ditugu. Problema azkenekoa
da,
zg < zb = 40 betetzen delako.
Problema hauei
k = 4 indizea esleituko diegu.
Azkenekoa ez den problemarik ez dagoenez, adarkaketak amaitu dira. 0-1
problema osoaren soluzio optimoa
zb = 40 behe-borneari dagokion soluziogaia
da, hau da, yg = (0, 0, 1, 1).
Egindako aldagai-aldaketak deseginez, 0-1 problema osoaren soluzio optimoa
lortzen da:
x
∗
1 = 1,
x
∗
2 = 1,
x
∗
3 = 0,
x
∗
4 = 0,
z
∗ = 40.
Ebazpen osoa erakusten duen diagrama 6.2 Irudian ikus daiteke.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

226
6. Programazio osoa
PE problema
P2 problema
P3 problema
P4 problema
P5 problema
P6 problema
P7 problema
y
= (0, −, −, −)
y
= (1, −, −, −)
y
= (1, 0, −, −)
y
= (1, 1, −, −)
y
= (1, 1, 0, −)
y
= (1, 1, 1, −)
yg = (0, 1, 1, 1)
yg = (0, 0, 1, 1)
yg = (1, 0, 1, 1)
yg = (1, 0, 0, 1)
yg = (1, 1, 0, 1)
yg = (1, 1, 0, 0)
yg = (1, 1, 1, 0)
zg = 52
zg = 40
zg = 50
zg = 35
zg = 47
zg = 22
zg = 37
zb = 40
y1
= 0
y1
= 1
y2
= 0
y2
= 1
y3
= 0
y3
= 1
Azkenekoa
Azkenekoa
Azkenekoa
Azkenekoa
Soluziogaia
6.2. Irudia: Adibideko 0-1 problema osoaren ebazpenaren diagrama.
OpenCourseWare, UPV/EHU

A. Eranskina
Aljebra lineala eta multzo ganbilak
Ikerkuntza Operatiboaren gaien garapenean beharrezkoak diren aljebra lineala-
ren eta multzo ganbilen kontzeptuak gogoratuko ditugu eranskin honetan. Eredu
linealak ebazteko erabiltzen den simplex algoritmoa prozedura aljebraikoa den
arren, programazio linealaren geometria aztertzea garrantzitsua da. Hasteko, ere-
du linealaren soluzio optimoa non aurkitzen den ikusten lagunduko diguten oi-
narrizko ideia geometriko batzuk aztertuko ditugu. Ondoren, mutzo ganbil baten
mutur-
puntuen eta eredu linealaren oinarriko soluzioen arteko erlazioa aztertuko
dugu.
A.1
Matrizeak eta bektoreak
Har dezagun
R gorputza. R -ko elementuei eskalar deitzen zaie. m errenkadako
eta
n zutabeko eskalarren taulari matrize esaten zaio.
A
=








a11
a12
· · ·
a1n
a21
a22
· · ·
a2n
..
.
..
.
. ..
..
.
am1 am2 · · · amn








Matrizea
m × n tamainakoa edo dimentsiokoa dela esaten da. A = (aij)
notazioa ere erabil dezakegu.
Zutabe bakarra duen matrizea, hau da,
m × 1 tamainakoa, zutabe-bektoretzat
227

228
A. Aljebra lineala eta multzo ganbilak
har daiteke.
a
=








a11
a21
..
.
am1








Adibidea.
1. Eskalarren taula hau
3 × 4 tamainako matrizea da.
A
=





3 −2
2
5
1
0
7
2
1
2
1
0
1 1





2. Eskalarren taula hau
3 dimentsioko bektorea da.
a
=





3
0
1





2
A.1.1
Matrize-eragiketak
Batuketa
m × n tamainako bi matrize izanik, A = (aij) ∈ R
m×n, B = (bij) ∈ R m×n, A-
ko eta B-ko elementuak elementuz elementu batuz lortzen den
m × n tamainako
C
= (cij) ∈ R
m×n matrizeari A eta B matrizeen arteko batura esaten zaio eta
A
+ B moduan adierazten da.
cij = aij + bij,
i = 1, . . . , m, j = 1, . . . , n.
Bi matrizeren arteko batuketa kalkulatu ahal izateko bi matrizeek tamaina be-
rekoak izan behar dute, eta batuketa egin ondoren lortutako beste matrizea ere
tamaina berekoa izango da.
OpenCourseWare, UPV/EHU

A.1. Matrizeak eta bektoreak
229
Matrizeen arteko batuketa deﬁnitzen den modu berean deﬁnitzen da bekto-
reen arteko batuketa; bektore bat zutabe bakarreko matrize bat dela besterik ez da
kontuan izan behar.
Adibidea.
1. a eta b bektoreen batuketa kalkulatuko dugu.
a
=


1
3


,
b
=


1
4


,
a
+ b =


1
3


+


1
4


=


2
7


2. A eta B matrizeen batuketa kalkulatuko dugu.
A
=





1 0
1
1
0 1 −1
0
2 0
1 −3





,
B
=





1 4
2
0
0 0 −1
0
1 1
2 −1





A
+B =





1 0
1
1
0 1 −1
0
2 0
1 −3





+





1 4
2
0
0 0 −1
0
1 1
2 −1





=





2 4
3
1
0 1 −2
0
3 1
3 −4





2
Propietateak
1. Matrizeen arteko batuketa barne-eragiketa bat da
R
m×n espazioan.
A
, B ∈ R
m×n ⇒ A + B ∈ R m×n.
2. Matrizeen arteko batuketa trukakorra da.
(∀A, B ∈ R
m×n) A + B = B + A.
3. Matrizeen arteko batuketa elkarkorra da.
(∀A, B, C ∈ R
m×n) (A + B) + C = A + (B + C).
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

230
A. Aljebra lineala eta multzo ganbilak
4. Matrizeen arteko batuketak elementu neutroa dauka, 0
∈ R
m×n.
(∀A ∈ R
m×n) A + 0 = 0 + A = A.
5. A
∈ R
m×n matrize orok badu aurkakoa: −A ∈ R m×n.
A
+ (−A) = (−A) + A = 0.
Bektoreen arteko batuketak matrizeen arteko batuketak betetzen dituen pro-
pietate berberak betetzen ditu.
Matrizeen eta eskalarren arteko biderketa
Izan bitez
α ∈ R eskalarra eta A = (aij) ∈ R
m×n matrizea. α eta A arteko
biderketa A matrizearen elementu guztiak
α eskalarraz biderkatuz kalkulatzen
da. Biderketa
α · A notazioaz adierazten da eta biderketaren emaitza B = (bij) ∈
R
m×n matrizea da.
bij = α · aij,
i = 1, . . . , m, j = 1, . . . , n.
Matrizeen eta eskalarren arteko biderketaren emaitza tamaina bereko beste matri-
ze bat da.
Adibidea.
1. A matrizearen eta
α eskalarraren arteko biderketa kalkulatuko dugu.
A
=





0 −2
1
2
1
1





, α = −2,
α· A = −2 ·





0 −2
1
2
1
1





=





0
4
−2 −4
−2 −2





2. a bektorearen eta
α eskalarraren arteko biderketa kalkulatuko dugu.
a
=





1
3
−5





,
α =
1
2
,
α · a =
1
2
·





1
3
−5





=





1
2
3
2
−
5
2





2
OpenCourseWare, UPV/EHU

A.1. Matrizeak eta bektoreak
231
Bektoreen biderkaketa eskalarra
aT errenkada-bektorearen eta b zutabe-bektorearen arteko biderkadura eskalarra
aT bektoreko elementu bakoitza b bektorean dagokion elementuarekin biderka-
tuz eta emaitzak batuz kalkulatzen da. Biderkadura eskalarra aT
· b notazioaz
adierazten da eta emaitza eskalar bat da.
a
T = (a
1
· · · an) ∈ R
1×
n,
b
=





b1
..
.
bn





∈ R
n.
a
T · b = (a
1
· · · an) ·





b1
..
.
bn





=
n
i=1
ai · bi.
Errenkada-bektore baten eta zutabe-bektore baten arteko biderkadura eskalarra
kalkulatu ahal izateko, beharrezkoa da biak dimentsio berekoak izatea. Biderka-
duraren emaitza eskalarra da.
a
∈ R
n, b ∈ R n ⇒ aT · b ∈ R .
Adibidea. a
∈ R
3 eta b ∈ R3 bektoreen arteko biderkadura eskalarra kalku-
latuko dugu.
a
=





4
2
7





,
b
=





−1
2
1





,
a
T · b = (4 2 7) ·





−1
2
1





= 7 ∈ R .
2
Matrizeen arteko biderketa
A
∈ R
m×n eta B ∈ R n×p matrizeak izanik, A eta B matrizeen arteko biderka-
dura C
= A · B ∈ R
m×p matrizea da.
C
= A · B matrizeko 
(i, j) elementua, i = 1, . . . , m, j = 1, . . . , p, A matri-
zeko
i. errenkadaren eta B matrizeko j. zutabearen arteko biderkadura da (erren-
kada bider zutabe).
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

232
A. Aljebra lineala eta multzo ganbilak
Adibidea. A
∈ R
3×2 eta B ∈ R 2×4 matrizeen biderkadura kalkulatuko dugu.
A
=





4 −3
1
0
1
1





,
B
=


1 1 0 1
1 2 7 4


C
= A · B =





1 −2 −21 −8
1
1
0
1
2
3
7
5





∈ R
3×4.
2
Propietateak
1. Matrizeen arteko biderketa elkarkorra da.
(∀A ∈ R
m×n) (∀B ∈ R n×p) (∀C ∈ R p×q) (A · B) · C = A · (B · C).
2. Matrizeen arteko biderketa banakorra da batuketarekiko.
(∀A, B ∈ R
m×n) (∀C ∈ R n×p) (A + B) · C = A · C + B · C.
(∀A ∈ R
m×n) (∀B, C ∈ R n×p) A · (B + C) = A · B + A · C.
3.
(∀A ∈ R
m×n) A · 0n×p = 0m×p,
0q×m · A = 0q×n.
4.
(∀A ∈ R
m×n) Im · A = A · In = A.
5.
(∀α ∈ R ) (∀A ∈ R
m×n) (∀B ∈ R n×p) α · (A · B) = (α · A) · B =
A
· (α · B).
A.1.2
Matrize baten heina
A
∈ R
m×n matrizea izanik, errenkaden arteko oinarrizko eragiketen bidez A
matrizea U matrize mailakatuan eralda daiteke Gaussen ezabapena erabiliz. U
matrizean pibotik ez duten errenkadak nuluak direnez, matrizeak duen pibot ko-
purua errenkada ez-nulu kopurua da.
OpenCourseWare, UPV/EHU

A.1. Matrizeak eta bektoreak
233
Adibidea. Har dezagun matrize hau:
A
=








1 2
3 −4 1
1 2
2
5 4
3 2 −5
2 4
2 0 −6
9 7








Gaussen ezabapena erabiliz, U matrize mailakatua lortuko da.
A
=








1 2
3 −4 1
1 2
2
5 4
3 2 −5
2 4
2 0 −6
9 7








→








1
2
3 −4 1
0
0
−1
9 3
0 −4 −14
14 1
0 −4 −12
17 5








→








1
2
3 −4 1
0 −4 −14
14 1
0
0
−1
9 3
0 −4 −12
17 5








→








1
2
3 −4 1
0 −4 −14
14 1
0
0
−1
9 3
0
0
2
3 4








→








1
2
3 −4
1
0 −4 −14
14
1
0
0
−1
9
3
0
0
0
21 10








= U
2
A.1.1 Deﬁnizioa. Izan bitez A
∈ R
m×n matrizea, eta Gaussen ezabapena era-
biliz lortutako U matrize mailakatua. U matrizearen pibot kopurua (errenkada
ez-nuluen kopurua) A matrizearen heina dela esango dugu, eta rang A notazioaz
adieraziko dugu.
Aurreko adibideko A matrizearen heina 4 da, U matrizearen pibot kopuruaren
edo errenkada ez-nuluen kopuruaren berdina.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

234
A. Aljebra lineala eta multzo ganbilak
A.2
Ekuazio linealen sistemen ebazpena
Izan bedi
m ekuazio eta n ezezagun dituen
Ax
= b
ekuazio-sistema, non A
∈ R
m×n, rang A = r eta b ∈ R m baitira. Gaussen
ezabapena erabiliko dugu sistema ebazteko. Kasu hauek gerta daitezke:
* rang A
= rang (A b) bada, sistemak ez du soluziorik; bateraezina da.
* rang A
= rang (A b) = r bada, sistemak badu soluziorik.
*
r = ezezagun kopurua bada, sistemak soluzio bakarra dauka.
*
r < ezezagun kopurua bada, sistemak inﬁnitu soluzio ditu.
Adibidea. Har dezagun ekuazio linealen sistema hau:
2x1 − x2 + 3x3 = 2
x1 + x2 − x3 = 4
3x1
+ 2x3 = 5
Sistemak soluziorik duen edo ez erabakitzeko, A eta
(A b) matrizeen heinak
kalkulatu behar dira.
A
=





2 −1
3
1
1 −1
3
0
2





(A b) =





2 −1
3 2
1
1 −1 4
3
0
2 5





Gaussen ezabapena eginez,





2 −1
3 2
1
1 −1 4
3
0
2 5





→





2 −1
3 2
0
3
2
−
5
2
3
0
3
2
−
5
2
2





→





2 −1
3
2
0
3
2
−
5
2
3
0
0
0 −1





rang A
= 2 < 3 = rang (A b) betetzen denez, sistemak ez du soluziorik.
2
OpenCourseWare, UPV/EHU

A.2. Ekuazio linealen sistemen ebazpena
235
Adibidea. Har dezagun ekuazio linealen sistema hau:
2x1 + x2 = 3
x1 + x2 = 4
Gaussen ezabapena eginez,


2 1 3
1 1 4


→


2 1 3
0
1
2
5
2


rang A
= rang (A b) = 2 = ezezagun kopurua betetzen denez, sistemak soluzio
bakarra dauka:
x1 = −1, x2 = 5.
2
Adibidea. Har dezagun ekuazio linealen sistema hau:
2x1 − x2 + 3x3 = 2
x1 + x2 − x3 = 4
3x1
+ 2x3 = 6
Gaussen ezabapena eginez,





2 −1
3 2
1
1 −1 4
3
0
2 6





→





2 −1
3 2
0
3
2
−
5
2
3
0
3
2
−
5
2
3





→





2 −1
3 2
0
3
2
−
5
2
3
0
0
0 0





rang A
= rang (A b) = 2 < ezezagun kopurua betetzen denez, sistemak
inﬁnitu soluzio ditu.
Oinarriko ezezaguntzat
x1 eta x2 hartzen baditugu, ekuazio-sistema horrela
idatz daiteke,
2x1 − x2 = 2 − 3x3
3
2
x2 = 3 +
5
2
x3
eta sistemaren inﬁnitu soluzioak
x1 = 2 −
2
3 x3 eta x2 = 2 +
5
3 x3 dira, x3 ∈ R
ezezagun askearen mende.
2
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

236
A. Aljebra lineala eta multzo ganbilak
A.2.1
Oinarriko soluzioak
Har dezagun Ax
= b ekuazio-sistema, non A ∈ R
m×n den, m < n izanik, eta
rang A
= rang (A b) = m betetzen den. Zutabe guztiak linealki independenteak
dituen
m × m tamainako B azpimatrize bat aukeratzen badugu eta A matrizearen
gainerako zutabeek osatzen duten azpimatrizeari N deitzen badiogu, Ax
= b
ekuazio-sistema honela idatz dezakegu:
(B N)


xB
xN


= b,
edo baita honela ere:
BxB + NxN = b.
Aurreko formulan askatuz, B matrizeari dagozkion aldagaiak (oinarriko alda-
gaiak) N matrizeari dagozkion aldagaien (aldagai askeen) mende adieraztea lor-
tzen da:
BxB = b − NxN .
xN bektoreko aldagai askeen balioen arabera, inﬁnitu soluzio existitzen dira. Al-
dagai aske guztiei zero balioa emanez, hau da, xN = 0 eginez, soluzio bakarra
duen sistema hau lortzen da:
BxB = b.
Soluzio horri oinarriko soluzio deitzen zaio.
Adibidea. Har dezagun ekuazio linealen sistema hau:
2x1 − x2 + 3x3 = 2
x1 + x2 − x3 = 4
3x1
+ 2x3 = 6
235. orrialdeko adibidean ekuazio-sistema hori Gaussen ezabapena erabiliz beste
ekuazio-sistema bat bihurtu dugu:
2x1 − x2 = 2 − 3x3
3
2
x2 = 3 +
5
2
x3
Ikusi dugun bezala, sistemak inﬁnitu soluzio ditu
x3 aldagai askearen funtzioan:
x1 = 2 −
2
3 x3 eta x2 = 2 +
5
3 x3. Horien artetik oinarriko soluzioa kalkulatzeko,
x3 = 0 egin behar da: x1 = 2, x2 = 2.
OpenCourseWare, UPV/EHU

A.3. Bektore-espazioak
237
A matrizean B oinarri-azpimatrize desberdinak aukera daitezke, eta horieta-
ko bakoitzerako oinarriko soluzio bat kalkulatu, oinarriari ez dagokion aldagai
askeari zero balioa emanez. Egon daitekeen oinarri kopuru maximoa hau da:


n
m


=
n!
m! (n − m)!
236. orrialdeko adibiderako, sistemak duen oinarriko soluzio kopuru maximoa
hau da:


3
2


=
3!
2! (3 − 2)!
= 3
2
A.3
Bektore-espazioak
Bektore-espazioetako kontzeptu batzuk gogoratzeko,
R
m bektore-espazioa hartu-
ko dugu.
A.3.1 Deﬁnizioa. (Konbinazio lineala) Izan bitez
R
m bektore-espazioko v
1, v2,
. . . , vn bektoreak eta α1, . . . , αn ∈
R eskalarrak.
α1v1 + α2v2 + · · · + αnvn
moduko adierazpenari bektoreen arteko konbinazio lineala esaten zaio.
Adibidea. Har ditzagun bi bektore hauek:
v1
=


1
0


, v2 =


1
−1


1. Adierazpen hau v1 eta v2 bektoreen arteko konbinazio lineal bat da:
2


1
0


+ 5


1
−1


Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

238
A. Aljebra lineala eta multzo ganbilak
2. Adierazpen honek v1 eta v2 bektoreen arteko konbinazio lineal guztiak
ematen dizkigu,
α1, α2 ∈ R izanik:
α1


1
0


+ α2


1
−1


2
A.3.1
Mendekotasun eta independentzia lineala
A.3.2 Deﬁnizioa. v1
, . . . , vn ∈ R
m bektoreak linealki independenteak dira bal-
din
α1v1 + · · ·+ αnvn = 0 konbinazio lineala bete dadin, aukera bakarra eskalar
guztiak zero izatea bada,
α1 = · · · = αn = 0.
A.3.3 Deﬁnizioa. v1
, . . . , vn ∈ R
m bektoreak linealki mendekoak direla esaten
da baldin
α1v1 + · · · + αnvn = 0 konbinazio lineala aurki badaiteke, gutxienez
αi eskalar bat zeroren desberdina izanik.
Adibidea.
1. Har ditzagun v1
, v2 bektore hauek:
v1
=


1
−1


,
v2
=


4
−4


Bi bektoreen konbinazio lineala zero egiten duten
α1, α2 eskalarrak exis-
titzen direnez, guztiak batera zero ez izanik, v1 eta v2 bektoreak linealki
mendekoak dira.
4


1
−1


+ (−1)


4
−4


=


0
0


2. Har ditzagun v1
, v2, v3 bektore hauek:
v1
=





1
−1
2





, v2 =





3
0
−1





, v3 =





9
−3
5





OpenCourseWare, UPV/EHU

A.3. Bektore-espazioak
239
Azter dezagun hiru bektoreen konbinazio lineala zero izateko zein balio har
ditzaketen
α1, α2 eta α3 eskalarrek.
α1





1
−1
2





+ α2





3
0
−1





+ α3





9
−3
5





=





0
0
0





Gaussen ezabapena aplikatuz,





1
3
9
−1
0 −3
2 −1
5





→





1
3
9
0
3
6
0 −7 −13





→





1 3 9
0 3 6
0 0 1





Matrize horrek hiru pibot dituenez,
α1 = α2 = α3 = 0 da ekuazio-
sistemaren soluzio bakarra. Ondorioz, v1
, v2 eta v3 bektoreak linealki in-
dependenteak dira.
2
A.3.2
Oinarria eta dimentsioa
A.3.4 Deﬁnizioa.
S = {v1, . . . , vp} ⊆ R
m bektore-multzoa R m espazioaren
multzo sortzailea dela esaten da baldin v
∈ R
m bektore oro S multzoko bektoreen
konbinazio lineal moduan idatz badaiteke, hau da,
α1, . . . , αp ∈ R eskalarrak
existitzen badira, non v
= α1v1 + · · · + αpvp beteko den.
Adibidea. Har ditzagun
R
3 espazioko v1, v2, v3 eta v4 bektoreek osatzen
duten
S multzoa eta R
3 espazioko edozein v bektore.
S = {v1, v2, v3, v4} =














1
−1
1





,





3
1
0





,





2
1
1










2
−2
2














, v =





v1
v2
v3





Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

240
A. Aljebra lineala eta multzo ganbilak
Azter dezagun
α1v1 + α2v2 + α3v3 + α4v4 = v ekuazio-sistema eta ikus dezagun
sistema betetzen duten
α1, α2, α3, α4 ∈ R eskalarrak existitzen direla.
α1





1
−1
1





+ α2





3
1
0





+ α3





2
1
1





+ α4





2
−2
2





=





v1
v2
v3





Gaussen ezabapena erabiliz,





1 3 2
2 v1
−1 1 1 −2 v2
1 0 1
2 v3





→





1
3
2 2
v1
0
4
3 0 v2 + v1
0 −3 −1 0 v3 − v1





→
→





1 3 2 2
v1
0 4 3 0
v2 + v1
0 0
5
4
0 v3 −
1
4 v1 +
3
4 v2





rang A
= rang (A b) = 3 betetzen denez, sistemak badu soluziorik, eta beraz, S
multzo sortzailea da.
2
A.3.5 Deﬁnizioa. Izan bedi
B = {v1, . . . , vm} ⊆ R
m bektore-multzoa. R m
bektore-espazioan
B oinarria dela esaten da baldin:
• B multzoko bektoreak linealki independenteak badira, eta
• B multzoa R
m espazioaren multzo sortzailea bada.
Bektore-espazio batean oinarri desberdinak kalkula daitezke; baina, oinarri
guztiek bektore kopuru berbera dute. Gogora dezagun bektore-espazio baten di-
mentsioa oinarri batean dagoen bektore kopurua dela.
Adibidea.
B bektore-multzo hau R
3 espazioan oinarria dela egiaztatuko du-
gu.
B = {v1, v2, v3} =














1
2
0





,





0
1
0





,





1
1
2














OpenCourseWare, UPV/EHU

A.3. Bektore-espazioak
241
Hasteko, bektoreak linealki independenteak direla egiaztatuko dugu, hau da,
α1v1+
α2v2 + α3v3 = 0 ekuazio-sistemaren soluzio bakarra α1 = α2 = α3 = 0 dela.
α1





1
2
0





+ α2





0
1
0





+ α3





1
1
2





=





0
0
0





Gaussen ezabapena erabiliz,





1 0 1
2 1 1
0 0 2





→





1 0
1
0 1 −1
0 0
2





Matrize horrek hiru pibot dituenez,
α1 = α2 = α3 = 0 soluzioa ekuazio-
sistemaren soluzio bakarra da.
B-ko bektoreek R
3 espazioan multzo sortzailea osatzen dutela egiaztatzeko,
honako sistema ebatzi behar da:
α1





1
2
0





+ α2





0
1
0





+ α3





1
1
2





=





v1
v2
v3





Sistema bateragarria denez,
B multzo sortzailea da. Hortaz, R
3 espazioko oinarria
da.
2
A.3.1 Teorema. Izan bedi
R
m espazioko B = {v1, . . . , vm} oinarria. Edozein
v
∈ R
m bektore idatz daiteke v
1
, . . . , vm bektoreen konbinazio lineal moduan,
eta konbinazio lineal horren koeﬁzienteak bakarrak dira.
Teoreman aipatzen den konbinazio lineal bakar horren koeﬁzienteak v bekto-
rearen koordenatuak dira
B oinarrian.
A.3.2 Teorema.
R
m bektore-espazioko B oinarri bat eta v ∈ R m bektore bat
izanik, v
∈ B eta v = 0, beti lor daiteke beste oinarri bat B-ko bektoreren bat v
bektoreaz ordezkatuz.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

242
A. Aljebra lineala eta multzo ganbilak
Emaitza hori garrantzia handikoa da programazio linealaren garapenean. Hain
zuzen ere, simplex algoritmoa oinarriko soluzio bideragarri batetik abiatzen da eta
beste hobea batera mugituko da, aurreko teoreman dioen bezala oinarriko bektore
bat aldatuz. Ikus dezagun adibide baten bidez zein baldintza bete behar duen
B
oinarrian ordezkatua izango den bektoreak.
Adibidea. Har ditzagun 240. orrialdeko adibideko
B oinarria eta v bektore
bat:
B = {v1, v2, v3} =














1
2
0





,





0
1
0





,





1
1
2














,
v
=





3
1
0





v
= α1v1 + α2v2 + α3v3 ekuazio-sistema ebatziz,





3
1
0





= α1





1
2
0





+ α2





0
1
0





+ α3





1
1
2





v bektorearen koordenatuak lortuko dira
B oinarrian: α1 = 3, α2 = −5,
α3 = 0. α1 = 0 eta α2 = 0 direnez, v1 eta v2 bektoreak v bektoreaz ordezkatuak
izan daitezke bi oinarri hauek lortzeko:
B
′ = {v, v
2
, v3} , B
′′ = {v
1
, v, v3}
Egiazta daiteke
B oinarrian v3 bektorea v bektoreaz ordezkatuz osatzen den bektore-
multzoan mendekotasun lineala dagoela. Hori hala gertatzen da
α3 = 0 delako.
v3 bektorea ezin da ordezkatua izan oinarrian.
2
Hortaz, oinarri berriak lortzeko, v-ren koordenatu ez-nuluei dagozkien
B oi-
narriko bektoreak izan daitezke ordezkatuak v bektoreaz.
A.4
Multzo ganbilak
Plano euklidestarra zenbaki errealen bikote ordenatuen multzoa da.
R
2 =





x1
x2


,
x1 eta x2 zenbaki errealak dira



OpenCourseWare, UPV/EHU

A.4. Multzo ganbilak
243
x1
x2
(3, −2)
A.1. Irudia: Espazio euklidestarra
R
2 espazioa A.1. Irudian ikusten den moduan adierazten da geometrikoki.
Irudian adierazitako puntua


3
−2


bikoteari dagokio.
a1x1 + a2x2 = c ekuazioak, a1, a2 eta c konstanteak izanik, zuzen bat adieraz-
ten du
R
2 espazioan. Adibidez, 2x1 + 3x2 = 6 ekuazioa A.2. Irudian ikus daiteke
graﬁkoki adierazia.
x1
x2
2x1 + 3x2 = 6
2
3
A.2. Irudia: Zuzena planoan
a1x1 + a2x2 ≤ c moduko inekuazioa a1x1 + a2x2 = c zuzenean dauden pun-
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

244
A. Aljebra lineala eta multzo ganbilak
tuek eta zuzenaren alde batean dauden puntuek osatutako multzoa da. Adibidez,
2x1 + 3x2 = 6 zuzenaren alde bateko puntuek 2x1 + 3x2 < 6 desberdintza be-
tetzen dute, eta beste aldean dauden puntuek
2x1 + 3x2 > 6 desberdintza. A.3.
Irudian margotuta adierazten da
2x1 + 3x2 ≤ 6 inekuazioak adierazitako puntuen
multzoa.
x1
x2
2x1 + 3x2 ≤ 6
A.3. Irudia: Inekuazioa planoan
a1x1 + a2x2 ≤ c edo a1x1 + a2x2 ≥ c moduko desberdintzak betetzen
dituzten puntuen multzoari
R
2 espazioko planoerdi itxia esaten zaio, a1 edo a2
konstanteetako bat gutxienez zeroren desberdina izanik.
Hiru dimentsioko espazio euklidestarra hirukote ordenatuen multzoa da.
R
3 =














x1
x2
x3





,
x1, x2 eta x3 zenbaki errealak izanik









R
3 espazioan a1x1 + a2x2 + a3x3 = c ekuazioak, non a1, a2, a3 eta c kons-
tanteak diren, plano bat adierazten du. Adibidez,
3x1 − x2 + 4x3 = 6 ekuazioa
plano bat da.
a1x1 + a2x2 + a3x3 ≤ c edo a1x1 + a2x2 + a3x3 ≥ c moduko desberdintzak
betetzen dituzten puntuen multzoek
R
3 espazioan espazioerdi itxia osatzen dute.
OpenCourseWare, UPV/EHU

A.4. Multzo ganbilak
245
Ideia hauek
n dimentsioko espazio euklidestarrera orokor daitezke.
R
n =























x1
x2
..
.
xn








,
x1, x2, . . . xn zenbaki errealak izanik















R
n espazioan a1, . . . , an eta c konstanteak dituen a1x1 +a2x2 +· · ·+anxn = c
ekuazioak hiperplano bat adierazten du.
R
n espazioan a1x1 + a2x2 + · · · + anxn ≤ c desberdintza betetzen duten
puntuen multzoa edo
a1x1 +a2x2 +· · ·+anxn ≥ c desberdintza betetzen dutenena
espazioerdi itxiak dira.
A.4.1 Deﬁnizioa.
R
n espazioko C azpimultzoa multzo ganbila da baldin multzo
hutsa bada, multzoak puntu bakarra badu edo multzoko edozein bi puntutarako bi
puntuak lotzen dituen segmentua multzoaren barnean badago.
A.4. Irudian ikus daiteke
(a), (b) eta (c) multzo ganbilak direla, baina (d) multzoa
ez.
(a)
(b)
(c)
(d)
A.4. Irudia: Multzo ganbilak
(a), (b), (c). Ez-ganbila (d)
Ondoko emaitzak froga daitezke:
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

246
A. Aljebra lineala eta multzo ganbilak
• Hiperplanoa multzo ganbila da.
• Espazioerdi itxia multzo ganbila da.
• Multzo ganbilen kopuru ﬁnituaren arteko ebakidura multzo ganbila da.
Eredu linealen azterketan agertzen diren soluzio-multzoak hiperplanoak, espa-
zioerdi itxiak eta beraien arteko ebaki-
multzoak dira; ikusitako ondorioen arabera,
guztiak dira multzo ganbilak.
A.5
Mutur-puntuak eta oinarriko soluzio bideraga-
rriak
Inekuazio linealen multzo bat ekuazio linealen multzo bihur daiteke inekuazioe-
tan aldagaiak gehituz. Inekuazio-sistema bat ekuazio-
sistema bihurtuz, inekuazio-
sistemaren mutur-puntuen eta ekuazio-sistemaren oinarriko soluzioen artean da-
goen erlazioa ikusiko dugu adibide baten bidez, beti ere aldagaiak zero baino han-
diagoak edo berdinak diren balioak hartzera murriztuta badaude.
Har dezagun inekuazio linealen sistema hau,
x1 ≥ 0 eta x2 ≥ 0 izanik:
−x1 + 4x2 ≤ 4
x1 − x2 ≤ 3
O
A
B
C
x1
x2
−x1 + 4x2 = 4
x1 − x2 = 3
A.5. Irudia: Multzo ganbila eta mutur-puntuak
OpenCourseWare, UPV/EHU

A.5. Mutur-puntuak eta oinarriko soluzio bideragarriak
247
A.5. Irudian adierazten dira bi inekuazioak betetzen dituzten
x1 ≥ 0 eta x2 ≥
0 aldagaietarako balioak. Ikus daiteke lau espazioerdi itxi horien arteko ebakidura
multzo ganbil itxia dela, poligono bat kasu honetan. Poligonoak erpin kopuru
ﬁnitua du; multzoaren mutur-puntuak dira.
O puntua koordenatu-ardatzen jatorria da. A puntua −x1 +4x2 = 4 zuzenaren
eta ordenatu-ardatzaren arteko ebaki-puntua da.
−x1 + 4x2 = 4 zuzenaren eta
x1 −x2 = 3 zuzenaren arteko ebaki-puntua B da. C puntua x1 −x2 = 3 zuzenaren
eta abzisa-ardatzaren arteko ebaki-puntua da.
O =


0
0


,
A =


0
1


,
B =


16
3
7
3


,
C =


3
0


Adibidean bi dimentsioko espazio euklidestarrean gertatu den moduan, hiru
dimentsioko espazio euklidestarrean ere espazioerdi itxien kopuru ﬁnituaren arte-
ko ebaki-
multzoa multzo ganbila da, hau da, edo multzo hutsa da, edo puntu baka-
rra duen multzoa da edo mutur-puntu kopuru ﬁnitua duen poliedroa da. Oro har,
plano euklidestarrean espazioerdi itxien kopuru ﬁnituaren arteko ebaki-multzoa
multzo ganbila da, hau da, edo multzo hutsa da, edo puntu bakarra duen multzoa
da edo mutur-puntu kopuru ﬁnitua duen politopoa da.
Bi inekuazioak ekuazio bihurtuko ditugu
x3 eta x4 aldagai ez-negatiboak gehi-
tuz. Honako sistema lortuko da,
x1, x2, x3, x4 ≥ 0 izanik:
−x1 + 4x2 + x3
= 4
x1 − x2
+ x4 = 3
Ekuazio-sistema horrek inﬁnitu soluzio ditu, inekuazio-sistemak dituen soluzio
berberak. Oinarriko soluzioak kalkula ditzakegu, eta soluzioen artean osagaiak
zero baino handiagoak edo berdinak dituztenak aukeratu. Ikusiko dugunez, horiek
dira A.5. Irudiko soluzioen poligonoaren mutur-puntuak.
1. Ekuazio-sistemaren matrizearen lehenengo eta bigarren zutabeak aukeratu-
ko ditugu. Zutabe horiek linealki independenteak dira.
x3 = x4 = 0 egin
eta honako sistema lortuko dugu:
−x1 + 4x2 = 4
x1 − x2 = 3
Sistemaren soluzioa
x1 =
16
3 eta x2 =
7
3 da, eta graﬁkoko B mutur-puntuari
dagokio (ikus A.5. Irudia).
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala

248
A. Aljebra lineala eta multzo ganbilak
2. Ekuazio-sistemaren matrizearen lehenengo eta hirugarren zutabeak aukera-
tuko ditugu. Zutabe horiek linealki independenteak dira.
x2 = x4 = 0 egin
eta honako sistema lortuko dugu:
−x1 + x3 = 4
x1
= 3
Sistemaren soluzioa
x1 = 3 eta x3 = 7 da, eta graﬁkoko C mutur-puntuari
dagokio (ikus A.5. Irudia).
3. Ekuazio-sistemaren matrizearen lehenengo eta laugarren zutabeak aukera-
tuko ditugu. Zutabe horiek linealki independenteak dira.
x2 = x3 = 0 egin
eta honako sistema lortuko dugu:
−x1
= 4
x1 + x4 = 3
Sistemaren soluzioa
x1 = −4 eta x4 = 7 da, eta ez dagokio soluzioen
poligonoaren mutur-puntu bati, soluzioak osagai negatibo bat duelako.
4. Ekuazio-sistemaren matrizearen bigarren eta hirugarren zutabeak aukeratu-
ko ditugu. Zutabe horiek linealki independenteak dira.
x1 = x4 = 0 egin
eta honako sistema lortuko dugu:
4x2 + x3 = 4
−x2
= 3
Sistemaren soluzioa
x2 = −3 eta x3 = 16 da, eta ez dagokio soluzioen
poligonoaren mutur-puntu bati, soluzioak osagai negatibo bat duelako.
5. Ekuazio-sistemaren matrizearen bigarren eta laugarren zutabeak aukeratuko
ditugu. Zutabe horiek linealki independenteak dira.
x1 = x3 = 0 egin eta
honako sistema lortuko dugu:
4x2
= 4
−x2 + x4 = 3
OpenCourseWare, UPV/EHU

A.5. Mutur-puntuak eta oinarriko soluzio bideragarriak
249
Sistemaren soluzioa
x2 = 1 eta x4 = 4 da, eta graﬁkoko A mutur-puntuari
dagokio (ikus A.5. Irudia).
6. Ekuazio-sistemaren matrizearen hirugarren eta laugarren zutabeak aukera-
tuko ditugu. Zutabe horiek linealki independenteak dira.
x1 = x2 = 0 egin
eta honako sistema lortuko dugu:
x3
= 4
x4 = 3
Sistemaren soluzioa
x3 = 4 eta x4 = 3 da, eta graﬁkoko O mutur-puntuari
dagokio (ikus A.5. Irudia).
2
Aldagaiak zero baino handiagoak edo berdinak dituzten espazioerdi itxien ar-
teko ebakidura den multzo ganbilaren mutur-puntuen kalkulua orokor daiteke di-
mentsioa bi baino handiagoa duten espazioetara. Horrela mutur-puntuak kalkulatu
ahal izango dira espazioerdiak graﬁkoki irudikatu gabe.
Ikastaroa: Ikerkuntza Operatiboa. Programazio Lineala
