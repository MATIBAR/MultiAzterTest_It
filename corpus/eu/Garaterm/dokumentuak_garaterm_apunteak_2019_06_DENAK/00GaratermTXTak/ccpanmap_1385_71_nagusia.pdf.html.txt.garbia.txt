   Gaien Aurkibidea 1 OPTIMIZAZIOAREN TEORIA ix 1.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ix 1.1.1 Ekoizpen-problema bat . . . . . . . . . . . . . . . . . . . x 1.2 Ereduen erabilpena . . . . . . . . . . . . . . . . . . . . . . . . . xi 1.2.1 Garraio-problema bat . . . . . . . . . . . . . . . . . . . . xii 1.3 Azterketarako urratsak . . . . . . . . . . . . . . . . . . . . . . . xiii 1.4 Beste zenbait metodo . . . . . . . . . . . . . . . . . . . . . . . . xv 1.4.1 Simulazioa . . . . . . . . . . . . . . . . . . . . . . . . . xv 1.4.2 Metodo heuristikoak . . . . . . . . . . . . . . . . . . . . xvii 1.5 Optimizazioaren erabilera praktikoak . . . . . . . . . . . . . . . . xix 1.5.1 Inbentario-problemak . . . . . . . . . . . . . . . . . . . . xix 1.5.2 Mantenu-ordezkatzearen problemak . . . . . . . . . . . . xx 1.5.3 Itxarote-problemak . . . . . . . . . . . . . . . . . . . . . xx 1.5.4 Antolaketa-problemak . . . . . . . . . . . . . . . . . . . xxi 1.5.5 Baliabide-esleipenaren problema . . . . . . . . . . . . . . xxii 2 EREDU LINEALAK ETA SOLUZIO GRAFIKOA xxiii 2.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii 2.2 Eredu lineala . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii 2.3 Eredu lineala idazteko erak . . . . . . . . . . . . . . . . . . . . . xxiv 2.4 Ereduen eraiketa . . . . . . . . . . . . . . . . . . . . . . . . . . xxvi 2.5 Programazio linealaren suposaketak . . . . . . . . . . . . . . . . xxxiv 2.6 Ebazpen graﬁkoa . . . . . . . . . . . . . . . . . . . . . . . . . . xxxv 2.7 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xl 3 ALJEBRA LINEALA ETA MULTZO GANBILAK xlv 3.1 Aljebra Lineala . . . . . . . . . . . . . . . . . . . . . . . . . . . xlv 3.1.1 Bektoreak . . . . . . . . . . . . . . . . . . . . . . . . . . xlv v  vi GAIEN AURKIBIDEA 3.1.2 Bektore-eragiketak . . . . . . . . . . . . . . . . . . . . . xlv 3.1.3 Menpekotasun eta independentzia lineala. Oinarria . . . . xlvii 3.1.4 Matrizeak . . . . . . . . . . . . . . . . . . . . . . . . . . lii 3.1.5 Ekuazio linealen sistemak. Soluzioak. . . . . . . . . . . . liv 3.2 Multzo ganbilak . . . . . . . . . . . . . . . . . . . . . . . . . . . lvii 3.2.1 Zuzen baten ekuazioa . . . . . . . . . . . . . . . . . . . . lvii 3.2.2 Segmentuak . . . . . . . . . . . . . . . . . . . . . . . . . lvii 3.2.3 Hiperplanoak eta erdiespazioak . . . . . . . . . . . . . . lvii 3.2.4 Multzo ganbilak: deﬁnizioak . . . . . . . . . . . . . . . . lviii 3.2.5 Multzo ganbilak: teoremak . . . . . . . . . . . . . . . . . lix 3.2.6 Multzo ganbil deﬁnizioaren orokorpena . . . . . . . . . . lx 3.3 Programazio linealerako erabilera . . . . . . . . . . . . . . . . . lx 3.3.1 Adibidea . . . . . . . . . . . . . . . . . . . . . . . . . . lx 3.3.2 Eredu linealerako ondorioak . . . . . . . . . . . . . . . . lxi 3.4 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . lxi 4 PROGRAMAZIO LINEALA. SIMPLEX METODOA lxiii 4.1 Helburuaren eta murrizketen aldaketa . . . . . . . . . . . . . . . lxiv 4.2 Idazkera estandarrerako bihurketa . . . . . . . . . . . . . . . . . lxvi 4.3 Soluzioak. Oinarrizko deﬁnizioak . . . . . . . . . . . . . . . . . lxviii 4.4 Oinarrizko teoremak . . . . . . . . . . . . . . . . . . . . . . . . lxxi 4.5 Simplex metodoa . . . . . . . . . . . . . . . . . . . . . . . . . . lxxviii 4.5.1 Deﬁnizioak, idazkerak eta teoremak . . . . . . . . . . . . lxxix 4.5.2 Soluzio optimo bornegabeak . . . . . . . . . . . . . . . . xci 4.5.3 Soluzio optimo anizkoitzak . . . . . . . . . . . . . . . . . xciv 4.5.4 Hasierako oinarria . . . . . . . . . . . . . . . . . . . . . xcvii 4.5.5 Simplex metodoaren taula . . . . . . . . . . . . . . . . . ciii 4.6 Simplex algoritmoa . . . . . . . . . . . . . . . . . . . . . . . . . cv 4.7 Zigortze-metodoa . . . . . . . . . . . . . . . . . . . . . . . . . . cxi 4.8 Bi faseetako metodoa . . . . . . . . . . . . . . . . . . . . . . . . cxvii 4.9 Simplex berrikusiaren metodoa . . . . . . . . . . . . . . . . . . . cxxi 4.10 Zenbait ohar . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cxxvi 4.11 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cxxxii 5 DUALTASUNA cxxxvii 5.1 Sarrera adibidea . . . . . . . . . . . . . . . . . . . . . . . . . . cxxxvii 5.2 Problema duala . . . . . . . . . . . . . . . . . . . . . . . . . . . cxxxix 5.2.1 Deﬁnizioak . . . . . . . . . . . . . . . . . . . . . . . . . cxxxix  GAIEN AURKIBIDEA vii 5.2.2 Primal-dual arteko erlazioa . . . . . . . . . . . . . . . . . cxli 5.2.3 Eredu primalaren eta dagokion dualaren osagaien azalpena cxliii 5.2.4 Dualtasuna: kasu orokorra . . . . . . . . . . . . . . . . . cxliii 5.3 Dualtasunari buruzko teoremak . . . . . . . . . . . . . . . . . . . cxlvii 5.4 Soluzio dual optimoa taulan . . . . . . . . . . . . . . . . . . . . clvii 5.5 Dualtasunaren interpretazio ekonomikoa . . . . . . . . . . . . . . clxi 5.5.1 Itzal-prezioak . . . . . . . . . . . . . . . . . . . . . . . . clxii 5.5.2 Aldagai primalen kostu ekonomikoa . . . . . . . . . . . . clxvi 5.5.3 Simplex metodoaren interpretazioa . . . . . . . . . . . . clxvii 5.6 Simplex dual metodoa . . . . . . . . . . . . . . . . . . . . . . . clxvii 5.6.1 Simplex dual metodoaren urratsak . . . . . . . . . . . . . clxix 5.7 Murrizketa artiﬁzialaren metodoa . . . . . . . . . . . . . . . . . . clxxii 5.8 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . clxxix 6 SENTIKORTASUN-ANALISIA clxxxiii 6.1 Aldaketa diskretuak . . . . . . . . . . . . . . . . . . . . . . . . . clxxxiii 6.1.1 b bektorearen aldaketak . . . . . . . . . . . . . . . . . . clxxxvii 6.1.2 c bektorean gertatutako aldaketak . . . . . . . . . . . . . cxc 6.1.3 aj bektorearen aldaketa j oinarrikoa ez denean . . . . . . cxciii 6.1.4 Aldagai berriak gehitzea . . . . . . . . . . . . . . . . . . cxcvi 6.1.5 Murrizketa berriak gehitzea . . . . . . . . . . . . . . . . cxcviii 6.2 Programazio parametrikoa . . . . . . . . . . . . . . . . . . . . . cci 6.2.1 Prezio-bektorean gertatutako aldaketa jarraiak . . . . . . . cci 6.2.2 Baliabide-bektorean gertatutako aldaketa jarraiak . . . . . ccviii 6.3 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ccxiv 7 GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA ccxix 7.1 Garraio-problema . . . . . . . . . . . . . . . . . . . . . . . . . . ccxix 7.1.1 Garraio-problemarako matrize-idazkera . . . . . . . . . . ccxxiii 7.1.2 Garraio-ereduaren ebazpidea . . . . . . . . . . . . . . . . ccxxiv 7.1.3 Hasierako soluzio baten kalkulua . . . . . . . . . . . . . ccxxvii 7.1.4 Oinarriko soluzio bideragarri baten hobekuntza . . . . . . ccxxxiv 7.1.5 Garraio-problemarako algoritmoa . . . . . . . . . . . . . ccxxxix 7.1.6 Soluzio endekatua . . . . . . . . . . . . . . . . . . . . . ccxlvii 7.2 Esleipen-problema . . . . . . . . . . . . . . . . . . . . . . . . . ccl 7.2.1 Esleipen-metodoa: Metodo hungariarra. . . . . . . . . . . ccliv 7.2.2 Maximizatze-problemak . . . . . . . . . . . . . . . . . . cclix 7.2.3 Aukerazko optimoak . . . . . . . . . . . . . . . . . . . . cclxi  viii GAIEN AURKIBIDEA 7.3 Erabilpen praktikoak . . . . . . . . . . . . . . . . . . . . . . . . cclxiii 7.3.1 Ekoizpen-problema bat . . . . . . . . . . . . . . . . . . . cclxiii 7.3.2 Maximizatze-problema bat . . . . . . . . . . . . . . . . . cclxiv 7.3.3 Ordutegien esleipena . . . . . . . . . . . . . . . . . . . . cclxv 7.4 Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cclxvi 8 PAKETEAK cclxxi 8.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cclxxi 8.1.1 Nahasketen problema . . . . . . . . . . . . . . . . . . . . cclxxi 8.1.2 Jan-neurriaren problema . . . . . . . . . . . . . . . . . . cclxxii 8.1.3 Garraio-problema bat . . . . . . . . . . . . . . . . . . . . cclxxii 8.1.4 Esleipen-problema bat . . . . . . . . . . . . . . . . . . . cclxxiii 8.2 QSB+ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cclxxiv 8.3 LINDO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . cclxxix 8.3.1 Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . cclxxix 8.3.2 Sentikortasun-analisia . . . . . . . . . . . . . . . . . . . cclxxxix  Kapitulua 1 OPTIMIZAZIOAREN TEORIA 1.1 Sarrera Optimizazio-teorian zenbait aukera posibleren artean optimoa hautatzearen prob- lema aztertzen da. Normalki, aukera posibleen multzoa murriztua izaten da eta multzo murriztu horretatik hautatu beharko du optimoa erabakitzaileak. Aukera optimoa hautatu behar dela diogunean inplizituki zera esaten ari gara: aukera posible horiek kuantitatiboki neurtuak izan daitezkeela neurri irizpideren bati jarraituz eta erabakitzaileak aukera horien artetik optimoa hautatu ahal izango duela. Horretarako, optimizazio-teoriak ebatzi beharreko problema zehaztu eta soluzio hoberenak aurkitzeko metodoak eraikitzen ditu. Optimizazio-problema bat aztertzean ondokoak kontutan izan behar dira: • Problemaren aukera posibleak deﬁnitzen dituen murrizketa-multzoa identi- ﬁkatu behar da. • Aukerak kuantitatiboki ebaluatuko dituen irizpidea behar da. • Soluzio optimoa aurkitzeko metodoa behar da. Optimizazio-problema bat ebazterakoan, aurreko hiru puntuek garrantzi berbera dute. Hala ere, datozen gaietan soluzio-algoritmoak aztertuko ditugu gehienbat. Soluzio-algoritmoak eraikitzeari programazio matematikoa deritzo. Optimizazio-problema baten ebazpidean bi urrats nagusi bereiz daitezke: • Lehen urratsean problema planteatu eta berau adieraziko duen eredua eraik- itzen da, hau da, aukera-multzoa eta neurri-irizpidea zehazten dira. ix  x KAPITULUA 1. OPTIMIZAZIOAREN TEORIA • Bigarren urratsean soluzio-algoritmoren bat erabiliz problemaren soluzioa kalkulatzen da. Soluzio-algoritmo horiek lehen urratsean eraikitako eredua ebazteko erabiltzen dira, eta lortutako soluzioa soluzio izango da eredu horrentzat. Soluzioa proble- ma errealerako soluzio izan dadin eredua ondo eraikia egotea eta benetan eskuar- tean daukagun problema erreala adieraztea behar-beharrezkoa izango da. Hori dela eta, problemarako soluzio on bat lortzeko ondokoak egin beharko dira:  ered- ua eraikitzeko datuak lortu, eredurako soluzioa kalkulatu, soluzioa problemarako egiaztatu eta praktikan horren arabera erabakiak hartu. Praktikan asko dira planteamendu hau erabiliz ebatz daitezkeen problemak: ekoizpen-problemak, itxarote-problemak, esleipen-problemak, antolaketa- problemak, etab. Ikus dezagun adibide baten bidez optimizazio-teoriak zer motatako problemak aztertzen dituen. 1.1.1 Ekoizpen-problema bat Ekoizpen- problema honetan errealitatean ager daitekeen zenbait aspektu kontsider- atuko dugu. Lantegi batean n produktu mota desberdin ekoizten da. Ekoizpena modurik hoberenean antolatu ahal izateko ekoizpen-sailak eta salmenta- sailak, beste zen- baiten artean, ekoizpenari eta salmentari buruz dituzten datuak kontutan izaten dira. Ekoizpen-sailak badaki produktu horietariko bakoitza ekoizteko zein lehen- gai erabiltzen den. Jakina da ekoizpena mugatua dela, lehengaiak erosteko dirua mugatua delako, lantegiaren biltegiratze- ahalmena ere mugatua delako, eta lante- giaren ekoizpen-denbora ere mugatua delako. Murrizketa guzti horien arabera produktu-unitate gehiago edo gutxiago ekoiztuko da lantegian. Hala ere, ez dira horiek lantegiaren ekoizpena mugatzen duten arrazoi bakar- rak. Salmenta-sailak publizitatean inbertitzearen ondorioz produktua saltzen du eta horren ondorioz ezagutzen du zein den bezeroen eskaria, produktu-unitateko salneurria eta produktu-unitateko garraio- kostua. Guzti horiek ere eragiten dute produktuaren ekoizpena antolatzeko garaian. Azkenean, lantegiaren ekoizpen-maila hoberena zein den jakin nahi da, lortu- tako irabaziak ahalik eta handienak, edo gastuak ahalik eta txikienak izan daitezen. Ekoizpen-maila optimoa lortzeko aukera desberdinak daude, eta irizpideren bati jarraituz aukera horiek ebaluatuko ditugu. Gure adibiderako irizpide egokia izan  1.2. EREDUEN ERABILPENA xi liteke ekoizpen-maila bakoitzaren ondorioz lor litekeen irabazia neurtzea. Beti ere, ekoizpen-maila optimoa lortzeko ekoizpen-prozesuaren murrizketa guztiak kontutan izan beharko ditugu: baliabideak (ordu- kopurua, lehengaiak etab.), lante- giaren biltegiratze-ahalmena, bezeroen eskariak, eragiketen kostuak  (garraioa etab.) . . . 1.2 Ereduen erabilpena Optimizazio- teoriaren erabilpen praktiko gehienetan eredu matematikoa erabiltzen da problema erreala adierazteko. Eredu matematikoa, helburu-funtzio batez eta zenbait murrizketaz osaturik dago. Helburu- funtzioak aukerak kuantitatiboki neurtzen ditu eta berau da optimizatu behar dena. Murrizketek, aldiz, problemaren aukerak edo erabaki-aldagaiak deﬁnitzen dituzte. Oro har, errealitateko sistema bat adieraziko duen eredua eraikitzeko jarraitu beharreko araurik ez da existitzen. Horregatik, lehen urrats hori zientzia baino artea dela esan ohi da. Eredu matematikoa sistema errealaren sinpliﬁkazioa da beti eta erabaki- aldagaiak, murrizketak, parametroak eta elkarren arteko erlazioak zehazten dira bertan. Soluzioak kalkulatzerakoan ereduaren erabilera abantailatsua izan dadin, ere- dua sinplea izatea komeni da. Sistema erreala murrizketa askoren menpe egon badaiteke ere, sistemaren jokaera baldintzatzen dutenak zein diren bereiztu be- harko da, beraiek izango baitira ereduan kontutan izan beharko ditugunak. Ered- ua zenbat eta sinpleagoa izan, orduan eta erabilgarriagoa gertatuko da. Hala ere, gehiegi sinpliﬁkatu nahi izateagatik, behar baino murrizketa gutxiago edo erabaki- aldagai gutxiago kontutan izango bagenu, lortuko genukeen ereduak ez luke behar bezala sistema erreala adieraziko, eta horren ondorioz, eredu matematikoa ebatziz lortutako soluzioa ez litzateke sistema errealaren soluzio izango. Zenbait kasutan metodo bat baino gehiago erabiltzeko aukera izango dugu eredua ebazteko. Beste zenbaitetan aldiz, eta eredua konplexuegia izateagatik, soluzio-metodo zehatzak erabili ordez metodo heuristikoak erabili beharko ditugu. Errealitatean bada oso sarri agertzen den eta optimizazio-teoriako metodoen bidez ebatzia izan daitekeen zenbait problema mota. Sakonki aztertuak izan on- doren, problema adierazteko eredu ﬁnkoak eta soluzioa lortzeko teknika bereziak eraiki dira. Adibide gisa, hor daude programazio lineala, osoa, ez- lineala, sare- teoria, itxarote-iladak etab. Ereduaren eraikuntzak duen garrantziaz jabetzeko adibide bat aztertuko dugu.  xii KAPITULUA 1. OPTIMIZAZIOAREN TEORIA 1.2.1 Garraio-problema bat Lantegi batek produktu baten ekoizpenerako bi ekoizpen-zentro ditu bi hiri des- berdinetan: H1 eta H2. Behin produktuaren ekoizte-prozesua amaitu denean, B1, B2 eta B3 biltegietara garraiatuko dira produktuak. H1 hirian asteko 30 produktu- unitate ekoizten da eta 20 unitate H2 hirian. Biltegien asteko eskariak 15, 10 eta 25 produktu-unitatekoak dira, hurrenez hurren. Honako taulan, hirietatik biltegietara produktu- unitate bat garraiatzeak eragiten dituen kostuak datoz: B1 B2 B3 H1 7 4 6 H2 9 5 3 Problema honetan lortu nahi dena zera da: hirietatik biltegietarako asteko gar- raioak antolatu nahi dira ahalik eta kosturik txikienean, beti ere, hirietan ekoiztu- tako produktu-unitateekin biltegien eskariak beteko direlarik. Garraio-sistema hau adieraziko duen eredu matematikoa eraikitzeko honako erabaki-aldagaiak deﬁnituko ditugu: • xij : Hi(i = 1, 2) hiritik Bj(j = 1, 2, 3) biltegira garraiatzen den produk- tuaren unitate-kopurua. Problemaren helburua garraioa ahalik eta kosturik txikienean antolatzea denez, optimizatu beharreko helburu-funtzioa ondokoa izango da: min z = 7x11 + 4x12 + 6x13 + 9x21 + 5x22 + 3x23 Hiri bakoitzetik biltegietara garraiatzen den unitate-kopurua mugatua dago. x11 + x12 + x13 ≤ 30 x21 + x22 + x23 ≤ 20 B1, B2 eta B3 biltegien asteko eskariak bete egin behar dira: x11 + x21 ≥ 15 x12 + x22 ≥ 10 x13 + x23 ≥ 25  1.3. AZTERKETARAKO URRATSAK xiii Kontutan izan beharko da baita, erabaki- aldagaiak, hau da, garraiatutako produk- tuen unitate-kopuruak, ezin daitezkeela negatiboak izan. xij ≥ 0 i = 1, 2 j = 1, 2, 3 Guztiarekin, garraio-sistema hori adierazten duen eredu matematikoa honakoa da: min z = 7x11 + 4x12 + 6x13 + 9x21 + 5x22 + 3x23 ondoko murrizketen menpe x11 + x12 + x13 ≤ 30 x21 + x22 + x23 ≤ 20 x11 + x21 ≥ 15 x12 + x22 ≥ 10 x13 + x23 ≥ 25 xij ≥ 0 i = 1, 2 j = 1, 2, 3 Eredu matematikoa eraikitzeko erabilitako datuak ﬁdagarriak ez badira, ered- ua ez da baliogarria izango gure problema ebazteko. Aurreko adibidean, datuak ziurrak direla suposatzen ari gara. Hau hala ez balitz, sistema ebaztean lortutako soluzioak ereduaren soluzio izango lirateke, baina ez sistema errealarenak. Prak- tikan, datu zehatzak lortzea problemaren ebazpenaren urratsik zailenetarikoa izan daiteke, eta eginbehar horretan laguntzeko ez dago inolako erregelarik. Zenbait kasutan, datuak probabilitatez beteko direla kontutan izatea garrantzit- sua da, horrelakoetan eredu determinista eraiki ordez eredu probabilistikoa eraiki beharko dugulako. 1.3 Azterketarako urratsak 1. Problemaren formulaketa. Problema praktikoetan askotan gertatzen da ebatzi behar den problema ez dela hasieran sakonki ezagutzen. Problemaren formulaketa zehatza egin ahal izateko jakin behar da zein diren sisteman eragiten duten eragile gar- rantzitsuenak. Urrats honetan ﬁnkatu beharko da lortu nahi den helburua, zein diren horre- tarako aukera posible desberdinak eta zein diren problemaren murrizketak.  xiv KAPITULUA 1. OPTIMIZAZIOAREN TEORIA 2. Eredu matematikoaren eraikuntza. Behin problema zehazki formulatua izan denean, sistema hori adieraziko duen eredu matematikoa eraiki behar da. Ereduak problema erreala adier- azi behar du modu sinpliﬁkatuan. Sinpleagoa izate hori sistema erreala aztertzeko abantaila handia da, sistemaren ulerpena eta erabilera errazten dituelako. Eragozpenak ere baditu hala ere, eredua sistema errealaren ideialpe- na izateagatik, suposaketak eta hurbilketak egin beharko direlako, eta horien ondorioz, eraikitako eredua sistema errealaren adierazpen baliogarri ez iza- tea gerta daitekeelako. Eredua idazteko, sistemaren funtzionamendua baldintzatzen duten aldaga- iak identiﬁkatu behar dira. Aldagai horiek erabiliz helburua neurtzen edo optimizatzen duen funtzioa eta soluzioen espazioa deﬁnitzen duten erlazioak idazten dira. Guztiarekin, eredua idatzia izango dugu. Eredu horren egitura ezaguna izan liteke eta ondorioz baliteke soluzio-metodoa ezaguna izatea. Hau hala izatekotan erraza gertatuko da soluzioa lortzea. Alderantziz, eredua konplexuegia bada, soluzio zehatzak lortzeko metodo bat eraikitzea zaila izango da; horrelakoetan, soluzio hurbilak emango di- tuzten teknikak erabiltzea komenigarria izango da. 3. Ereduaren ebazpidea. Aurreko urratsean aipatu dugunez, zenbait problema praktiko aztertua izan da eta problema horiek adierazten dituzten ereduak ebazteko metodoak eza- gunak dira. Optimizazio-teorian ezagunak diren metodoen artean progra- mazio lineala, programazio osoa, programazio dinamikoa, iladen teoria etab. aurkitzen dira. Metodo horiek, oro har, iteratiboak dira eta problemen soluzio optimoa kalkulatzen dute. Behin eredua ebatzia izan denean, lortutako soluzio optimoaren azterke- ta egitea interesgarria, eta askotan beharrezkoa, izaten da. Azterketa honi, analisi postoptimoa edo sentikortasun-analisia deritzo. Ereduaren parametroren bat aldatuko balitz, aldaketa horrek soluzioan izango lukeen eragina ezagutzea interesa lekiguke. Azterketa hori beharrezko gerta daiteke ereduaren parametroren bat aldatzen denean, edo datu estimatuak erabili direlako, estimazioa oso zehatza izan ez delarik, edo aldaketarik gertatu ez bada ere, gerta litezkeen aldaketek soluzioan izango luketen eragina ezagutzea interesa lekigukee- lako, besterik gabe. 4. Ereduaren eta soluzioaren egiaztapena.  1.4. BESTE ZENBAIT METODO xv Sistema adierazteko eraikitako eredua egokia den ala ez jakiteko, aurretik dauzkagun datuak erabiliz funtzionamendua egiazta daiteke. Eredua bali- ogarria izango da baldintza ezagunetan emaitza onak sortzen baditu. Egiaz- tapena pasatako datuekin egiteak desabantailak baditu; datu berberak baldin badira eredua eraikitzeko eta eredua egiaztatzeko erabiltzen direnak, egiaz- tapena oso esanguratsua ez izatea gerta liteke. Hala ere, egiaztapen hori egitea ez da beti posible izaten, zenbaitetan au- rretik ez delako daturik izaten. Horrelakoetan egin eredua ebaztearen on- dorioz kalkulatutako soluzioa erabil daiteke problema errealean erabaki- ak hartzeko, eta errealitatean lortutako datuak geroago ereduaren jokaera ebaluatzeko erabiliak izango dira. 5. Soluzioaren erabilpena praktikan. Praktikan erabakiak hartzeko unean oso lagungarri gertatzen da ereduaren bitartez kalkulatutako soluzioa eskuartean izatea. Eraikitako ereduak eta soluzioa lortzeko erabilitako metodoak emaitza ona sortzen duten egiazta daiteke azken urrats honetan. Kalkulatutako emaitza ona ez dela egiaztatuz gero, planteatutako eredua berrikusi beharko da. 1.4 Beste zenbait metodo Ereduak eraikitzearen teoria asko garatu bada ere, zenbait sistema erreal adier- azteko aipatu ditugun eredu matematikoak erabiltzea oso zaila gertatzen da oraindik, bai sistemaren aldagai-kopurua edota murrizketa-kopurua handiegia delako, bai soluzioa lortzeko teknika matematikorik ez dagoelako. Arazo horiek direla eta, eredu matematikoa erabiltzeari komenigarri ez derit- zogunean beste teknikaren bat erabili beharko da, halanola simulazioa eta metodo heuristikoak. Sarreraren eta irteeraren arteko erlazioa esplizituki adierazi beharrik ez da izaten simulazio ereduetan, eta hori abantaila handia da. Bestalde, metodo heuristikoak erregelatan oinarritzen direnez, algoritmo zehatzak baino errazagoak dira askotan. 1.4.1 Simulazioa Simulazio-eredu batek sistema errealaren portaera imitatzen du eta, saiakuntza estatistikotzat hartu behar da.  xvi KAPITULUA 1. OPTIMIZAZIOAREN TEORIA Sistema errealak adierazteko eredu matematikoak erabiltzean sistema sinpli- ﬁkatu egin behar izaten dela aipatu dugu; ez ordea simulazioa erabiliz gero. Baina, simulazioaren bidez lortzen diren soluzioak soluzio on baldin badira ere, ez dira optimo izaten, eta gehienetan, soluzio on horiek lortzeak kalkulu asko eskatzen du. Simulazio adibide bat Demagun joko batean parte hartzeko aukera daukagula. Jokoa txanpona bat- en jaurtiketan datza. Jakina denez, txanpona jaurtiki ondoren aurpegia edo gu- rutzea agertuko da. Joko honetan txanpona behin eta berriz botako dugu ateratako aurpegi-kopuruaren eta gurutze-kopuruaren arteko aldea 3-koa den arte. Behin 3- ko alde hori lortu denean 8.000 pta irabazten du jokalariak, baina hau gertatzen ez den bitartean txanpona jaurtikitzen duen bakoitzeko 1.000 pta ordaindu beharko du. Jokoaren arauak horiek izanik, jokalariak dirua irabaziko du helburua lortzeko 8 jaurtiketa baino gutxiago behar izaten duenetan. Bestelako kasuetan garbi dago jokalariak dirua galduko duela. Joko honetan parte hartzea errentagarri gertatuko zaion jakin nahi du jokalariak. Jokoan gertatzen diren diru irabazi eta galerak garbiago ikusteko behin eta berriz txanponarekin bere kasa jokoan jardutea erabakitzen du, gero saio horien arabera batezbesteko irabazia kalkulatzeko. Demagun zenbait jokaldi egiten duela eta ondoko emaitzak lortzen dituela: XAAXAXAXXXXXAAAAAXXXX XXAXAAXXXAXXAXXXXAXAX XXXXAXXXXXXAXAXXAXAAA AXAXAAXAAAAXAAAAXAXAX AAXXXXXAAXAXAAA . . . Ondokoak dira lortu diren emaitzak. Lehen jokaldian, txanpona 11 aldiz jau- rtiki ondoren jokaldia bukatzen da  (7 gurutze eta 4 aurpegi). 11.000 ordaindu eta 8.000 irabazi direnez, 3.000 galdu dira. Bigarrenean berriz 5 aldiz jaurtiki on- doren (gurutze 1 eta 4 aurpegi). 5.000 ordaindu eta 8.000 jasotzeagatik 3.000- ko irabazia izan dugu. Jokaldi asko burutu ondoren  (laginaren tamaina handia izanik) jokoa irabazteko txanpona batezbesteko zenbat aldiz jaurtiki beharko duen badaki  1.4. BESTE ZENBAIT METODO xvii jokalariak. Kontutan izan behar da, laginaren tamaina eta bariantza oso garrantz- itsuak direla jokoan parte hartzea komeni den ala ez erabakitzeko. Kasu honetan 13 jokaldi burutu dira eta batezbestekoa honela kalkulatuko dugu: 11 + 5 + 5 + 9 + 7 + 7 + 5 + 3 + 17 + 5 + 5 + 11 + 9 13 = 7.6 Normalki, laginak ez dira txanpona jaurtikiz lortzen, ausazko zenbakiez os- aturiko zerrendak sortuaz baizik. Zerrenda horietatik abiatuz eta probabilitate- banaketak erabiliz ausazko azterketak lortuko dira. Iladen simulazioa Demagun bezeroek zerbitzuren baten zain ilada bat osatzen dutela. Honelakoetan bi motatako kostuak sortzen dira: eragite-kostua, zeina zerbitzari-kopuruarekin batera handitzen den, eta itxarote-kostua, zerbitzari- kopuruak behera egitean han- ditzen dena. Kostu hauek zerbitzari- kopuruaren arabera aldatzeaz gain zerbitzatze- denboraren eta bezeroen sarritasunaren arabera ere aldatzen dira. Problemak eskatzen duena zera da: kostuak minimo izan daitezen izan be- harko dugun zerbitzari-kopurua zein den aurkitzea. Kopuru hori zein izan daite- keen ezagutzeko sistemaren funtzionamendua simulatuko duen sistema eraiki deza- kegu, zerbitzari- kopuru desberdinekin zer nolako kostuak sortzen diren aztertu eta honela batezbesteko kostuak kalkulatzeko. Simulazioari esker lorturiko datuek beharrezko erabakiak hartzen lagunduko digute. 1.4.2 Metodo heuristikoak Oro har, metodo heuristikoak ere iteratiboak dira. Problemarako soluzioa ematen dute, soluzio hori soluzio optimotik zenbateraino gertu dagoen jakiterik ez bada- go ere. Hala ere, metodo hauek badituzte abantailak, kalkulu gutxiago eskatzen baitute soluzioa lortzeko eta ulerterrazagoak diren erregelatan oinarritzen baitira. Metodo heuristikoak soluzio hurbilak kalkulatzeko erabiltzeaz gain, optimizazio- algoritmo zehatzetan erabil daitezke konberjentzia azkartzeko asmoz. Adibidea: Demagun bidaiari batek lau hiri bisitatu behar dituela; egunean zehar lau hiri- etatik pasa behar du behin eta bakarrik behin, iturburu hirira itzuli baino lehen.  xviii KAPITULUA 1. OPTIMIZAZIOAREN TEORIA Kilometro- kopuru txikieneko ibilbidea burutu nahi du bidaiariak, eta horretarako, hiriak zein ordenatan bisitatu beharko dituen jakin nahi du. Hirien arteko dis- tantziak taulakoak dira: 1 2 3 4 1 − 6 3 8 2 6 − 4 7 3 3 4 − 10 4 8 7 10 − Diagonaleko distantziak zero badira ere, zero horiek ez dira esleituak izango. Soluzioa kalkulatzeko metodo heuristiko erraz bat honakoa da: 1. hirian has- ten dela emanik, 3. hirira abiatuko da, bera baita gertuen gelditzen zaiona. On- doren, oraindik bisitatuak izan ez diren hirien artetik gertuen dagoenera joango da, 2. hirira alegia. 2. hiritik gertuen dagoen bisitatu gabeko hirira:  4. hirira. Azkenik, 1. hirira itzuliko da. Ibilitako kilometro-kopurua: 3 + 7 + 4 + 8 = 22 Metodo horren izena aldameneko gertuenaren metodoa da eta problemarako soluzio bat kalkulatzen du oso modu errazean. Hala ere, soluzio hori soluzio optimotik zein gertu dagoen jakiteko modurik ez dago. Adibidea: Demagun xii.orrian azaldutako garraio-problemaren moduko bat daukagula, eta dagozkion kostu-matrizea eta eskari eta eskaintzari dagozkion murrizketak ezagunak direla. Soluzio bat kalkulatzeko honako metodo heuristikoa erabil daiteke. H1 hiritik B1 biltegira ahalik eta produktuen unitate-kopuru handiena bidaltzen da. Ondoren gauza bera egiten da B2 biltegira ere, eta H1 hiriaren eskaintza oraindik bukatu ez bada B3 biltegiaren eskaria zerbitzatuko da. Modu berean jokatzen da H2 hiriaren eskaintzarekin. Honako soluzioa lortuko genuke. B1 B2 B3 ESKAINT ZA H1 15 10 5 30 H2 20 20 ESKARIA 15 10 25  1.5. OPTIMIZAZIOAREN ERABILERA PRAKTIKOAK xix Garraio-problemaren soluzioa lortzeko metodo hau erabiltzea ez da oso egokia, eskariak zerbitzatzeko ez dituelako garraio-kostuak ezertarako kontutan izaten. Soluzio bat lortzeko metodo heuristiko hobeak badira. 1.5 Optimizazioaren erabilera praktikoak Modu honetako planteamenduak adibide praktiko askotan erabil daitezke. Gain- era, horietariko zenbait oso maiz agertzen da eta arreta bereziz aztertuak izan di- ra. Horri esker, problema horiek identiﬁkatu dira, eta berauek adierazteko eredu matematikoak eta eredua ebazteko teknikak ﬁnkatu dira. Azter ditzagun hori- etariko batzuk. 1.5.1 Inbentario-problemak Inbentarioan produktuen unitate- kopuruak gordetzen dira. Bezeroen eskariak betet- zeko erabiltzen da inbentarioa. Eskari horiek denboran zehar bete behar dira. Mota desberdinetako kostuak aurki ditzakegu inbentario bati lotuak. Inben- tarioaren tamainarekin zuzenki proportzionala den kostua, gerora erabiliak izango diren inbentarioko unitateak biltegiratuak izateak dakarren kostua da, adibidez. Bestalde, inbentarioko unitateak erosteak edo ekoizteak eragiten duen kostua eta inbentarioaren urritasun-kostua edo atzerapen- kostua daude, inbentarioaren tamaina txikitzean handiagotuko direnak. Horrelako prozesuetan erabakiak hartu behar dira. Erosi edo ekoiztu behar- reko unitate-kopurua eta zenbat denbora barru erosi edo ekoiztuak izango diren zehaztu beharko da. Bai inbentarioaren igoerak eta baita jaitsierak ere kostu gehigarria suposatzen dutenez, mantenu minimoa eskatuko duen inbentario-maila zehaztu nahi da. Prozesu hori determinista izango da eskariak aldez aurretik ezagunak baldin badira. Aitzitik, eskariak ausaz sortzen badira, prozesua bera ere ausazkoa izan- go da; inbentario-mailaren mantenua ausazko eskarien funtzioan egongo da une bakoitzean. Mota horretako problemak ebazteko bada zenbait teknika matem- atiko, hala nola programazio lineala, programazio dinamikoa eta programazio koadratikoa.  xx KAPITULUA 1. OPTIMIZAZIOAREN TEORIA 1.5.2 Mantenu-ordezkatzearen problemak Zenbait prozesutan erabiltzen den tresneriak ez du betirako iraungo eta noizbe- hinka tresneria zaharkitua tresneria berriaz ordezkatzea komeni da. Hau gerta daiteke uneko tresneria ez dabilelako eta arazoa konponezina delako edota tresne- ria errendimendu gutxikoa delako. Ordezkatze-problemak bi taldetan bana daitezke, tresneriaren iraupen motaren arabera: 1. Zenbait tresneri denboran zehar eraginkortasuna galduz doa, bai narriadura- gatik edo baita eraginkorragoak diren tresneriak merkaturatzen direlako, tresneri zaharren eraginkortasun erlatiboa jaitsiarazten dutelarik. 2. Beste zenbait tresneri motaren eraginkortasuna, aldiz, konstantea da zeharo hondatzen diren arte. Hondatze hori edozein unetan gerta daiteke, hon- datzearen probabilitatea tresneriaren adinarekin batera handitzen bada ere. Eredua eraikitzeko unean, problema determinista den ala ausazkoa den bereiz- tu beharko dugu. Hauek dira mantenu-ordezkatzearen problemetan izaten diren kostuak: • Mantenu-kostua eta eragite-kostua, tresneriaren aintzinatasunarekin hazten direnak. • Tresneriaren balioa, aintzinatasunarekin txikituz doana. • Tresneri berria erosteak eragindako kostua. Tresneriaren ordezkaketa egiteko datarik egokiena zehaztean datza problema. Data horrek tresneria berria erosteak eragindako kostua eta tresneria zaharraren erabilgarritasun galera eta balio galera orekatuko ditu. Mantenu-ordezkatzearen problemak bai teknika bereziak erabiliz eta bai pro- gramazio dinamikoa erabiliz ebatz daitezke. 1.5.3 Itxarote-problemak Mota honetako problematan, nolabaiteko zerbitzua eskaintzen duen zerbitzaria dago eta bezeroek eskariak egiten dituzte zerbitzatuak izateko. Eskari horiek guz- tiak ausaz sortzen dira eta ilada bat edo gehiago osatuko dute zerbitzariaren zain daudelarik.  1.5. OPTIMIZAZIOAREN ERABILERA PRAKTIKOAK xxi Oro har, itxarote-kostuak sortzen dira, bai bezeroaren galerarako (iladan zain egoteagatik) bai zerbitzariaren galerarako  (iladan bezeroen eskaririk ez egotea- gatik). Itxarote-problemak sailkatzeko honako ezaugarriak izan behar dira kontutan: 1. Bezeroen eskariak lerrokatzeko ilada-kopurua, hau da, zerbitzari-kopurua. 2. Jarraian iristen diren bi eskariren arteko denbora. 3. Zerbitzatze-denbora. 4. Zerbitzatzeko modua: lehentasunezkoa, lehentasunik gabekoa. 5. Zerbitzariek osatutako egitura: seriean, paraleloan, nahasian. Helburua zera izan daiteke: kostu totala (zerbitzarien eragite-kostua eta beze- roen itxarote-kostua) minimizatuko duen zerbitzari-kopurua zehaztea. Kopuru hori zehazteko zenbait kasutan eredu matematikoa eraikitzea posible izango zaigu, baina beste zenbaitetan simulazioa erabiltzea komenigarria izango da. 1.5.4 Antolaketa-problemak Burutu beharreko zenbait eginkizun eta bete beharreko zenbait murrizketa izanik, antolaketa-problematan eginkizun horiek burutzeko ordena optimoa zehaztu behar da. Adibidez, n eginkizun burutzeko m makina bagenu, lortu beharreko helburua eginkizunak makinei esleitzearena izango litzateke, neurriren bat optimizatuko lukeelarik: makinen langabezi denbora minimo izatearena, eginkizun guztiak bu- rutzeko beharrezko denbora minimizatzearena etab. Bi antolaketa-problema berezi jarduera-sareen problema eta bidaiariaren prob- lema dira. • Jarduera-sareen problemak, proiektu bat burutzeko beharrezko denbora op- timoa zehazten du. Honela, ordena ﬁnko batean burutu beharreko jarduera multzoa izanik, jarduera horietariko bakoitzak iraupen denbora (zehatza edo ausazkoa) duela jakinda eta jarduera burutzeak nolabaiteko kostua su- posatzen duela jakinda, jarduera guzti horiek antolatu behar dira. Ohizko helburuak honakoak izaten dira: kostu total minimoa duen soluzioa lortzea, iraupen minimoko soluzioa lortzea, egite-probabilitate maximoa duen soluzioa lortzea etab. Optimizazio-teorian ezagunak diren PERT eta CPM teknikak erabiltzen dira problema hauek ebazteko.  xxii KAPITULUA 1. OPTIMIZAZIOAREN TEORIA • Lehen ikusi dugu, metodo heuristikoen bidezko ebazpidea aztertzerako- an, bidaiariaren problema. Problema hori eta antolaketa-problemak alder- atzen baditugu, bidaiariaren problema makina batean n eginkizun burutzeko eginkizunak zer nolako ordenatan burutu beharko liratekeen erabakitzea dela ikusten da. Modu honetako problemak ebazteko programazio lineal osoa erabil daiteke. 1.5.5 Baliabide-esleipenaren problema Zenbait jarduera burutu behar denean eta jarduera bakoitza burutzeko baliabide nahikoa ez dagoenean sortzen da baliabideak esleitzearen problema. Problema horren helburua urriak diren baliabideak esleitzea da, esleitze horrek eraginkorta- suna neurtzen duen funtzioa optimizatuko duelarik. Baliabide erabilgarrien kop- urua ezaguna da, eta baita jarduera bakoitza burutzeak eskatzen duen baliabide- kopurua eta eragindako kostua ere. Epealdi baterako egindako baliabide- esleipenak ez baldin badu geroagoko epealdietan egingo diren baliabide-esleipenen gain inolako eraginik, orduan esleipen-problema estatikoa da. Horrelako problemak ebazteko programazio lineala erabil daiteke. Aitzitik, epealdi batean egindako baliabide- esleipenak hurrengo epealdiko baliabide- esleipenaren gain eragina balu, esleipen- problema dinamikoa izango litzateke, berau ebazteko programazio dinamikoa er- abili beharko litzatekeelarik. Baliabide- esleipenaren problemak asko dira praktikan, hala nola langileak makinei esleitzearena, produktu baten garraioa iturburu-puntuetatik helburu- puntuetara an- tolatzearena etab. Azaldutako erabilpenez gain bada praktikan ager daitekeen beste zenbait prob- lema ere; hala ere, ezagunenak dira aztertuenak izan direnak eta horientzako ere- duak eta soluzioak kalkulatzeko metodoak ezagunak dira. Normalki, sistema errealetan ez da aurrean aztertutako problema horietariko bat bakarra agertzen. Ekoizte-prozesu batean adibidez, baliabide-esleipenaren problema ager daiteke, edota inbentario-problema, itxarote- problema, antolaketa- problema, etab. Problema guzti horiek elkarren segidan ebatz daitezke, edo prob- lema horietariko bat baino gehiago aintzakotzat hartuko duen eredua eraikitzen saia gaitezke.  Kapitulua 2 EREDU LINEALAK ETA SOLUZIO GRAFIKOA 2.1 Sarrera Laburki esanda, programazio linealak mugatuta dauden baliabideak lehian di- harduten jardueren artean esleitzearen arazoa aztertzen du, esleipena optimoa ger- ta dadin. Jarduera horiek burutuak izan daitezen, urriak diren baliabideak lortzeko lehian dabiltza eta jarduera horien maila optimoa aukeratzean datza problema. Problema orokor hau egoera desberdin askotan aurki daiteke praktikan: behar- rei baliabideak esleitzerakoan, ekoizpenaren plangintzan, ekoiztutako produktuak iturburuetatik helburuetara garraiatzean etab. Programazio linealak problema deskribatzeko eredu matematikoa erabiltzen du. Lineal adjektiboak zera adierazten du: eredu matematikoko funtzio guz- tiak, bai murrizketak eta bai helburu-funtzioa, linealak direla. Behin problema ebazteko eredu matematikoa eraikia izan denean soluzioa lortzeko oso eraginko- rra den prozedura erabiliko dugu; SIMPLEX metodoa hain zuzen ere. Metodo hau oso erabilgarria gertatzen da egoera asko planteatu daitekeelako eredu lineala erabiliaz; optimizazioan beste zenbait arlotan ere erabil daiteke gainera. 2.2 Eredu lineala Deﬁnizioa 2.2.1 Eredu lineala esaten zaio ondokoa optimizatzen (maximizatzen edo minimizatzen) duenari: z = c T x (2.1) xxiii  xxiv KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA ondoko murrizketak betetzen dituelarik: Ax ≤ > b (2.2) x ≥ 0 (2.3) Optimizatu behar den funtzioak (2.1) helburu-funtzio izena du,  (2.2) desberdintzek murrizketa eta (2.3) ekuazioek ez-negatibotasun murrizketa. Planteatu berri dugun ereduan agertzen diren elementuak ondokoak dira: • x bektorearen n osagaiak erabaki-aldagaiak dira. • cT bektorea unitateko prezio-bektorea edo kostu-bektorea da. Honek ere n osagai du. • Baliabide-bektorea deritzon m osagaidun b bektorea . • Teknologi koeﬁzienteen matrizea izena duen A matrizea, m lerroz eta n zutabez osaturik dagoena. A matrizeko aij elementu bakoitzak (i = 1 . . . m, j = 1 . . . n) j jarduera-unitatea burutua izan dadin behar den i baliabidearen unitate-kopurua adierazten du. Eredu linealean, c T eta b bektoreen eta baita A matrizearen elementuak ezagu- nak dira. x bektorearen osagaiak, aldiz, ereduaren aldagaiak dira eta beren balioa zehazteke dago. 2.3 Eredu lineala idazteko erak Eredu lineala idazteko ondoko hiru idazkerak erabil daitezke.  2.3. EREDU LINEALA IDAZTEKO ERAK xxv 1. opt z = (c1, . . . cn)      x1 .. . xn      ondoko murrizketen menpe         a11 a12 . . . a1n a21 a22 . . . a2n .. . am1 am2 . . . amn                 x1 x2 .. . xn         ≤ = ≥         b1 b2 .. . bm                 x1 x2 .. . xn         ≥         0 0 .. . 0         2. opt z = c1x1 + c2x2 + · · · + cnxn ondoko murrizketen menpe a11x1 + a12x2 + · · · + a1nxn ≤ > b1 a21x1 + a22x2 + · · · + a2nxn ≤ > b2 .. . am1x1 + am2x2 + · · · + amnxn ≤ > bm x1, x2 . . . xn ≥ 0 3. opt z = n j =1 cjxj  xxvi KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Taula 2.1: Makinen erabilgarritasunak Ordu-kopurua Makina mota (Asteko makina-ordutan) A 200 B 100 D 50 ondoko murrizketen menpe n j =1 aijxj ≤ > bi i = 1 . . . m xj ≥ 0 , j = 1 . . . n 2.4 Ereduen eraiketa Programazio linealaren bitartez problema bat aztertu nahi dugunean, problema adieraziko duen eredua eraikitzea izango da lehenengo egin beharko duguna. Lehen urrats hau ebazpen osoaren urratsik zailena izan daiteke, eta kontu handiz egin be- harko dugu ez baitago eredua nola eraiki esango digun erregelarik; ereduak eraikiz ikasten da ereduak eraikitzen. Azter dezagun zenbait adibide praktiko. Adibidea. Baliabide-esleipenaren problema Lantegi batek P1, P2 eta P3 izendatuko ditugun produktuak ekoizterakoan, bere ekoizpen-ahalmenari ahalik eta etekin handiena atera nahi dio. Produktu horiek ekoizteko erabiltzen dituen A,B eta D makinen erabilgarritasuna, hots or- du erabilgarrien kopurua, mugatuta dago. Horrek lantegiaren ekoizpena mugatu egiten du. Makinen erabilgarritasunak 2.1 .taulan datoz adieraziak. Era berean, produktu-unitate bakoitza ekoiztua izan dadin behar den makina bakoitzeko ordu- kopurua 2.2 .taulan emana dator.  2.4. EREDUEN ERAIKETA xxvii Taula 2.2: Beharrezko makinen ordu-kopuruak P1 P2 P3 A makina 8 2 3 B makina 4 3 - D makina 2 - 1 Lantegiko salmenta-sailak dioenez, P1 eta P2 produktuak saltzeko ahalmena, ekoiztu litekeen kopuru maximoa baino handiagoa da. P3 produktua berriz, asteko 20 unitate baino gehiago ezin daiteke sal. Saldutako P1, P2 eta P3 produktu-unitate bakoitzetik lortutako irabazia 20, 6 eta 8 ptakoa da, hurrenez hurren. Problemak zera eskatzen du: irabazia maximoa izan dadin lantegiak asteko ekoiztu beharko duen produktu bakoitzeko kopurua zehazteko eredu lineala formulatzea. EBAZPIDEA • Erabaki-aldagaiak. x1, x2, x3. Asteko zenbat P1, P2 eta P3 produktu-unitate ekoiztu behar den adierazten dute. • Helburu-funtzioa. max z = 20x1 + 6x2 + 8x3 • Murrizketak. – Denborari dagozkionak. 8x1 +2x2 +3x3 ≤ 200 4x1 +3x2 ≤ 100 2x1 +x3 ≤ 50 – Salmentari dagokiona. x3 ≤ 20 • Ez-negatibotasun murrizketak. x1, x2, x3 ≥ 0 Ekoiztutako produktu-kopurua ez da inoiz negatiboa izango.  xxviii KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Taula 2.3: Elikagaien bitaminak eta kostua BITAMINAK ELIKAGAI ELIKAGAIA (mg/gr) GRAMOAREN A B D E KOSTUA 1 2 1 0 1 14 2 1 2 1 2 9 3 1 0 2 0 13 4 1 2 1 1 16 Adibidea. Jan-neurriaren problema Elikapen-zentro batean A, B, D eta E bitaminak kopuru egokian izango dituen jan-neurria prestatzen ari dira. Jan-neurriak ondokoak bete beharko ditu: gutx- ienez 25 mg A bitamina izan beharko ditu, B bitamina-kopuruak 25 mg eta 30 mg artean egon beharko du, D bitaminak berriz 22 mg-tik gora agertu beharko du eta gehienera jota ere 17 mg E bitamina nahi dira. Bitamina guzti horiek 4 elikagai ezberdinen bidez lor daitezke. 2.3 . taulan zera dator adierazia: elikagai gramoko dagoen A, B, D eta E bitaminen mg- kopurua eta elikagai horietariko bakoitzaren gramoko kostua. Eskatzen dena zera da: kosturik txikieneko jan-neurria aurkitu nahi da, beti ere beharrezko A, B, D eta E bitamina-kopurua ziurtatuko duelarik. EBAZPIDEA • Erabaki-aldagaiak. Erabaki-aldagaiek zera adierazten dute: jan-neurriak duen elikagai bakoitzeko gramo-kopurua. xj : j elikagai-kopurua gramotan, j : 1 . . . 4 • Murrizketak. Hauek ondokoa adierazten dute: bitamina mota bakoitzeko behar den unitate-kopurua.  2.4. EREDUEN ERAIKETA xxix 2x1 + x2 + x3 + x4 ≥ 25 (A Bitamina) 25 ≤ x1 + 2x2 + 2x4 ≤ 30 (B Bitamina) x2 + 2x3 + x4 ≥ 22 (D Bitamina) x1 + 2x2 + x4 ≤ 17 (E Bitamina) • Helburu-funtzioa. Problemaren helburua ahalik eta kosturik txikieneko jan- neurria lortzea da. min z = 14x1 + 9x2 + 13x3 + 16x4 • Ez-negatibotasun murrizketak. x1 . . . x4 ≥ 0 Honela lortu dugun eredua linealak diren funtzioz osatua dagoela ikus dezakegu. Ondokoa beteko duten x1, x2, x3 eta x4 aldagaien balioak zehaztea izango da ere- du linealaren soluzioa topatzea: min z = 14x1 + 9x2 + 13x3 + 16x4 ondoko murrizketen menpe 2x1 + x2 + x3 + x4 ≥ 25 x1 + 2x2 + 2x4 ≤ 30 x1 + 2x2 + 2x4 ≥ 25 x2 + 2x3 + x4 ≥ 22 x1 + 2x2 + x4 ≤ 17 x1 . . . x4 ≥ 0 Adibidea. Nahasketen problema Birﬁndegi batean 2 gasolina mota (A eta B) ekoizten dituzte, horretarako 3 es- entzia desberdin nahastuz. Erabil daitekeen esentzia- kopurua eta mota bakoitzeko upelaren prezioa 2.4 .taulan datoz adieraziak. A eta B gasolinak kalitate onekoak izan daitezen, nahasketak egiterakoan on- dokoak kontutan izan behar dira:  xxx KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Taula 2.4: UPELA- UPELAKO ESENTZIA KOPURUA PREZIOA 1 2.000 10 2 3.000 8 3 1.000 12 • A gasolinaren %50-a gutxienez 1. esentzia da eta ezin du 2. esentzia %30- etik behera izan. • B gasolinaren 3. esentzia-kopuruak %30-etik beherakoa izan behar du. A gasolinaren salneurria 40-koa da upelako eta B-rena 35-ekoa. Demagun ekoiz- tutako gasolina guztia saltzeko gai dela birﬁndegia. Irabaziak ahalik eta handienak izan daitezen mota bakoitzetik zenbat gasolina ekoiztu beharko den zehaztuko duen eredu lineala eraikiko dugu. EBAZPIDEA • Erabaki-aldagaiak. xij : j gasolinak (j = A, B) duen i esentzia-kopurua (i = 1, 2, 3) • Helburu-funtzioa. – Ekoizpen-kostua. EK = 10(x1A + x1B) + 8(x2A + x2B) + 12(x3A + x3B) – Salmenta-prezioa. SP = 40(x1A + x2A + x3A) + 35(x1B + x2B + x3B)  2.4. EREDUEN ERAIKETA xxxi max (irabazia) = −EK + SP = = 30x1A + 32x2A + 28x3A + 25x1B + 27x2B + 23x3B • Murrizketak. – Lehengaien erabilgarritasunari buruzkoak. x1A + x1B ≤ 2000 (1 esentzia) x2A + x2B ≤ 3000 (2 esentzia) x3A + x3B ≤ 1000 (3 esentzia) – Gasolinen kalitateari buruzkoak. x1A ≥ 50 100 (x1A + x2A + x3A) x2A ≥ 30 100 (x1A + x2A + x3A) x3B ≤ 30 100 (x1B + x2B + x3B) – Ez-negatibotasunari buruzkoak. xij ≥ 0 ∀i = 1, 2, 3 ∀j = A, B Adibidea. Ordutegien antolakuntza Lantegi batean erabateko jardunaldiaz lanean arituko diren langileak behar dituzte; langile-kopuru desberdina asteko egun bakoitzerako. 2.5 .taulan datoz, hain zuzen ere, asteko egun bakoitzean behar direnak. Langile bakoitzak 5 egun jarraietan lanean aritu ondoren 2 egunetako atsede- naldia hartu behar du, legeak hala arautzen duelako. Guztiarekin, lantegiaren beharrei aurre egiteko behar den langile-kopuru min- imoa emango duen eredu lineala zehaztatuko dugu. EBAZPIDEA  xxxii KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Taula 2.5: Eguna Beharrezko langileak Astelehena 20 Asteartea 15 Asteazkena 18 Osteguna 18 Ostirala 12 Larunbata 17 Igandea 10 • Erabaki-aldagaiak. xj : j egunean (j = 1 . . . 7) atsedenaldiaren ondoren lehen aldiz lantegiratuko den langile-kopurua. Adibidez, x1 astelehenean lanean hasten direnak dira eta ostiral arte lanean arituko dira. • Helburu-funtzioa. Langile-kopuru minimoa kontratatu nahi du lantegiak. min z = x1 + x2 + . . . + x7 • Murrizketak. x1 +x4 +x5 +x6 +x7 ≥ 20 → astelehena x1 +x2 +x5 +x6 +x7 ≥ 15 → asteartea x1 +x2 +x3 +x6 +x7 ≥ 18 → asteazkena x1 +x2 +x3 +x4 +x7 ≥ 18 → osteguna x1 +x2 +x3 +x4 +x5 ≥ 12 → ostirala x2 +x3 +x4 +x5 +x6 ≥ 17 → larunbata x3 +x4 +x5 +x6 +x7 ≥ 10 → igandea  2.4. EREDUEN ERAIKETA xxxiii Taula 2.6: Garraio-kostuak (pta/unit) 1 2 3 A ZENTROA 5 20 15 B ZENTROA 20 15 6 • Ez-negatibotasun murrizketak. xj ≥ 0 j = 1 . . . 7 Adibidea. Garraio-problema Lantegi batek bi ekoizpen-zentro du: A eta B. Bietan produktu mota bera ekoizten da, 2.000 unitate/hilabeteko lehen zentroan eta 3.000 bigarrengoan. Ekoizpen-zentro horietatik hiru erostetxetara saltzen dituzte ekoiztutako pro- duktuak. Erostetxe horiek hilero 500, 3.500 eta 2.000 produktu-unitate eskatzen dituzte. Zentroetatik erostetxeetara produktuak garraiatzeak badu bere kostua. Ikus 2.6 .taula. Hortaz, zein izango litzateke erostetxeen eskariei aurre egin eta burutu be- harreko garraio guztiak kosturik txikienean egin ahal izateko lantegiak beharko lukeen garraio-sistema? EBAZPIDEA • Erabaki-aldagaiak. xij : i ekoizpen-zentrotik (i = A, B) j erostetxera garraiatzen den produk- tuaren unitate-kopurua (j = 1, 2, 3). • Helburu-funtzioa. Banaketa-kostua ahalik eta txikien egitea. min z = 5xA1 + 20xA2 + 15xA3 + 20xB1 + 15xB2 + 6xB3  xxxiv KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA • Murrizketak – Zentroen eskaintzari buruzkoak. Zentroetan ekoitz daitekeena baino gehiago ezin daiteke sal. xA1 + xA2 + xA3 ≤ 2000 xB1 + xB2 + xB3 ≤ 3000 – Erostetxeen eskariei buruzkoak. Eskariak zerbitzatu egin behar dira. xA1 + xB1 ≥ 500 xA2 + xB2 ≥ 3500 xA3 + xB3 ≥ 2000 – Ez-negatibotasunari buruzkoak. xij ≥ 0 i = A, B j = 1, 2, 3 2.5 Programazio linealaren suposaketak Sistema erreal batek, eredu lineal batez adieraztean, proportzionaltasuna, batuko- rtasuna, zatigarritasuna eta ziurtasuna gordetzen dituela suposatzen da. Eredua lineala izan dadin lehen bi suposaketak egitea beharrezkoa da. 1. Proportzionaltasuna. Ereduko k jarduera burutzen bada, ondokoak beteko dira: (a) z-ren eraginkortasun-neurria ckxk da. (b) i baliabide bakoitzeko kontsumoa aikxk da. Bi neurri horiek k jarduera mailarekiko zuzenki proportzionalak dira. Honek esan nahi du bai helburu-funtzioan baita murrizketetan ere, jarduera hasteak ez duela kostu gehigarririk eskatzen. 2. Batukortasuna. Jarduera desberdinen artean elkarrekintzarik ez egotea eskatzen du batukortasunak. Horri esker, bi erabaki-aldagaik ez dute in- oiz biderkadura bat osatuko. Honela, batukortasunak zera eskatzen du:  2.6. EBAZPEN GRAFIKOA xxxv ( x1 . . . xn) jardueren edozein maila emanik eraginkortasunaren neurri tota- la eta baliabide bakoitzeko kontsumo totala, burututako jarduera bakoitzak sortutakoaren baturaren berdina izango dela. Adibidez, j eta k jarduerak burutzen direnean ondoko batugaiak agertzen dira helburu-funtzioan eta i murrizketan: cjxj + ckxk aijxj + aikxk Aurreko bi ezaugarriak beteko ez balira, eskuartean daukagun problema ez- lineala izango litzateke. Berau ebazteko bada beste zenbait metodo zehatz. 3. Zatigarritasuna. Zenbait erabaki-aldagaik errealitatean zentzua izan dezan balio osoa hartu beharko du. Zatigarritasunak esaten duena zera da: jar- duera bakoitzeko unitateak zatigarriak direla, eta hau da, hain zuzen ere, programazio linealean lortutako soluzio optimoan sarritan gertatzen dena. Bilatzen den soluzio optimoak osoa izan behar duenean, lortutakoa biribil daiteke edo, biribilketaren emaitza egokia ez izatekotan programazio lineal osoaren prozedurak erabil daitezke. 4. Ziurtasuna. Ezaugarri honen arabera, ereduko aij, bi eta cj parametroak konstante ezagunak dira. Baina problema errealetan oso gutxitan gertatzen da hori. Parametro ezagunak dituen eredu batentzako soluzioa kalkulatzea posible da. Denboran zehar parametroak aldatuko balira, orduan sentikortasun- analisirako teknikak erabiliko genituzke. Horiei esker, aldakorrak diren parametroak aldatzen diren heinean, une bakoitzean hartzen duen balioari dagokion soluzio optimoa lortuko da. Parametrorik sentikorrenak zein diren ere ezagutu ahal izango dugu, zehazkiago aztertuak izan daitezen. 2.6 Ebazpen graﬁkoa Oro har, eta nahiz eta problema lineal guztiak graﬁkoki ebazterik ez izan, guztiek badute interpretazio geometrikorik. Problemak 2 edo 3 aldagai duenean graﬁko- ki ebatz daiteke. Metodo graﬁkoa interesgarria da berari esker programazio lin- ealeko kontzeptu garrantzitsuak graﬁkoki ikus daitezkeelako. Hori ikusteko zen- bait eredu graﬁkoki ebatziko dugu.  xxxvi KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Adibidea. Soluzio Optimo Bakarreko eredua Demagun ondoko problema lineala.  2.6. EBAZPEN GRAFIKOA xxxvii max z = 15x1 + 10x2 ondoko murrizketen menpe 2x1 + 4x2 ≤ 44 −x1 + 4x2 ≤ 20 2x1 − x2 ≤ 14 x1 − 3x2 ≤ 2 x1, x2 ≥ 0 Gure helburua zera da: helburu-funtzioa maximoa izan dadin x1 eta x2 erabaki- aldagaiek zein balio hartu beharko duten zehaztea. EBAZPIDEA Murrizketek mugatzen duten azalera marraztuko dugu koordenatu sistema batean. Ereduaren murrizketa bakoitza erdiespazioa da. Honela, lehen murrizketak, 2x1 + 4x2 ≤ 44, mugatutako erdiespazioa marrazteko 2x1+4x2 = 44 zuzena irudikatzen da. Zuzen honek planoa bi erdiespaziotan banatzen du eta horietariko bat izango da murrizketak mugatzen duena (zuzena bera barne murrizketa berdintasunez ere betetzen baita). Irudian gezien bidez bereizten da. (Ikus ??. orriko irudia). Gainontzeko hiru murrizketentzat ere gauza bera eginez soluzioen multzoaren adierazpen graﬁkoa lortzen da. Puntuz bete dugun azalera soluzio-puntuen multzoa da, bertako puntuek mur- rizketa guztiak betetzen dituztelako. 0ABDEF poligonoa multzo ganbila da. Au- rrerago frogatuko dugunez, edozein eredu linealerako soluzio-multzoa multzo ganbila da eta soluzio optimoa multzo ganbilaren mutur-puntua da. Aurreko adibidean 0,A,B,D,E eta F dira soluzio-multzoaren mutur-puntuak. Puntu horiek kalkulatzeko, zuzenen arteko ebakidura puntuak aurkitu behar dira eta z = 15x1 + 10x2 optimo egiten duen puntua (maximo gure kasuan) izango da bilatzen dugun soluzio optimoa. Puntuak hauek dira: A = (0 5) , B = (8 7) , D = (10 6) E = (8 2) , F = (2 0) , 0 = (0 0)  xxxviii KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA z helburu-funtzioak D puntuan lortzen duela balio optimoa egiazta daiteke ( z = 210). Graﬁkoki ere ikus daiteke 0,A,B,D,E eta F puntuen artetik zein den soluzio optimoa, horretarako guztien balioak kalkulatu beharrik izan gabe. z = 15x1 + 10x2 zuzena irudikatzen da z-ri balio ﬁnkoren bat emanez. Soluzioen eskualdean zehar zuzena desplazatzen da optimizatzeak eskatzen duen norantza jarraituz. Kasu honetan, jatorri-puntutik urrunduz z-ren balioa handitzen da. Soluzio optimoa: 2x1 + 4x2 = 44 2x1 − x2 = 14    → D = (10, 6) z ∗ = 15 · 10 + 10 · 6 = 210 Honek zera esan nahi du: x1 eta x2 erabaki-aldagaiek x1 = 10 eta x2 = 6 balioak hartzean helburu-funtzioak balio maximoa lortuko duela. Irabazi maxi- moa z ∗ = 210-ekoa da. Adibidea. Aukerazko Soluzio Optimoak edo Soluzio Optimo Anizkoitzak dituen problema lineala. Demagun ondoko eredu lineala eraiki dugula: max z = 2x1 + 4x2 ondoko murrizketen menpe 2x1 + 4x2 ≤ 44 −x1 + 4x2 ≤ 20 2x1 − x2 ≤ 14 x1 − 3x2 ≤ 2 x1, x2 ≥ 0 Adibide honetako soluzio-puntuen multzoa eta aurreko adibidekoa multzo berbera direla ikus daiteke, murrizketak berberak direlako. Baina helburu-funtzioa al- datu egin dugu. z-ri balio bat emanez irudikatzen da helburu-funtzioa eta opti- mizazioak eskatzen duen norantzan zuzena desplazatuz BD segmentura iristen da. (Ikus ??. orriko irudia).  2.6. EBAZPEN GRAFIKOA xxxix BD segmentua osatzen duten puntu guztiek balio optimoa ematen diote helburu- funtzioari. Geroago frogatuko dugunez, eredu linealak mutur-puntu optimo bat baino gehiago duenean problemak soluzio-kopuru inﬁnitua du. z ∗ = 2 · 10 + 4 · 6 = 44, z ∗ = 2 · 8 + 4 · 7 = 44 B eta D puntuetan z funtzioak balio berbera hartzen du eta baita segmentuaren puntu guztietan ere. Adibidea. Soluziorik gabeko problema. Demagun ondoko eredua: max z = x1 + x2 ondoko murrizketen menpe 2x1 + x2 ≤ 5 x1 ≥ 4 x1, x2 ≥ 0 Murrizketek eta ez-negatibotasun murrizketek deﬁnitutako eskualdeen arteko ebakidura punturik existitzen ez dela ikus daiteke. Beraz, problema honek ez dauka soluziorik. (Ikus ??.orriko goiko irudia). Adibidea. Bornegabeko soluzioen eskualdea. Izan bedi honako problema: max z = 10x1 + 12x2 ondoko murrizketen menpe x1 + 2x2 ≥ 2 −2x1 + 3x2 ≥ 2 x1, x2 : ez-murriztuak  xl KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA Helburu-funtzioa inﬁnituraino haz daiteke. Ez dauka, beraz, soluziorik prob- lema honek, edo esan daiteke soluzio bornegabea duela. (Ikus ??.orriko beheko irudia). Problema erreal batean bornegabeko soluzioa lortzea, hau da, baliabideak mu- gatuta daudenean helburu-funtzioak inﬁniturantz jotzeak ez dirudi oso logikoa. Horrelakoak gertatzen direnean problema ebazteko eraiki den eredua berrikusi beharko dugu, agian murrizketak idaztean erroreak gertatu direlako edo problema ebazteko garrantzitsua izan daitekeen beste zenbait murrizketa kontutan hartua izan ez delako. Bornegabeko soluzioarekin topo egiteko derrigorrezkoa da soluzioen mult- zoa bornegabea izatea. Hala ere, beharrezko baldintza bada ere, ez da nahikoa, honelako multzoetan soluzio bornatuak egon daitezke eta. Begira, bestela, aur- reko problemaren helburu-funtzioa aldatu eta beste min z = −2x1+3x2 funtzioaz ordezkatuz gero lortzen duguna: Adierazpen graﬁko horretan A puntuan hasten den zuzenerdiaren puntu guzti- ak soluzio dira. Puntu horietan z funtzioak 2 balioa hartzen du. 2.7 Ariketak 1. Ondoko problemen eredu linealak idatz itzazu: (a) Hiritik gertu hiru lantegi aurkitzen dira: 1-lantegia, 2-lantegia eta 3- lantegia. Lantegi hauek, eguneroko ekoizpen-prozesuaren eraginez sortutako hondakinak bertako ibaira botatzen dituzte. Hondakinak kutsagarriak dira, eta herriko alkateak mehatxu egin die: jaurtikitako hondakin kutsagarriak maila onargarritik gorakoak balira, 1.000.000 ptako izuna ordaindu beharko lukete. Zorionez, kutsadura maila onargarrian mantentzea posible da. Horre- tarako, sortutako hondakinek garbitze-prozesua gainditu beharko dute. Honi esker, hondakinen bi kutsagai nagusien kopurua txikitzea lortuko da. Garbitze-prozesuaren kostua eta prozesuaren ondorioz lortutako kutsagai bakoitzeko beherapena 2.7 .taulan datoz adieraziak. i. Kutsagai bakoitza 40 tona jaitsi nahi da. Horrek eskatzen duen garbitze-prozesuaren kostua ahalik eta txikiena izan dadin eredu lineala idatz ezazu.  2.7. ARIKETAK xli Taula 2.7: HONDAKIN TONA GARBITZEAREN 1.KUTSAG. 2.KUTSAG. KOSTUA BEHERAP. BEHERAP. 1-LANT. 20.000 pta 0.5 tona 0.2 tona 2-LANT. 15.000 pta 0.1 tona 0.1 tona 3-LANT. 35.000 pta 0.3 tona 0.15 tona Taula 2.8: HILEKO EROSTE SALMENTA BILTEG. PROD. BEHARRAK PREZIOA PREZIOA ESPAZIOA A 1000 unit 60 pta/unit 100 pta/unit 5 dm3/unit B 800 unit 100 pta/unit 150 pta/unit 6 dm3/unit D 750 unit 90 pta/unit 140 pta/unit 8 dm3/unit E 1100 unit 200 pta/unit 280 pta/unit 3 dm3/unit F 2000 unit 30 pta/unit 50 pta/unit 10 dm3/unit ii. Demagun kutsadura maila jaisteko udaletxeak 5 milioi ptako dir- ulaguntza eman duela. Kutsadura ahalik eta txikiena izan dadin lantegi bakoitzak diru hori erabiliz garbitu beharko duen tona- kopurua zehaztuko duen eredu lineala idatz ezazu. (b) Denda batek bere bezeroen eskariei aurre egiteko 5 produktu erosi be- har ditu. Hilero behar den produktu bakoitzeko kopurua, produktu- unitate bakoitzaren kostua, produktu bakoitzaren salmenta prezioa eta beharrezko biltegiratze-espazioa 2.8 . taulan adierazitakoak dira. Dendak 700.000 pta inberti ditzake eta 60.000 dm3 erabil ditzake pro- duktuak gordetzeko. Hileko beharrak betetzeko erositako produktuez  xlii KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA gain erositako produktuek % 10-eko beherapena izango dute. Dendak hilean behin erosten ditu hileko eskariei aurre egin ahal iza- teko beharrezko produktuak, baina ez du inoiz 2 hilabete baino gehi- agorako erosiko. Irabazia ahalik eta handiena izan dadin eredu lineala eraiki ezazu. (c) Lantegi batek hurrengo lau hiruhilabeteetan eraikiko duen txalupa- kopurua ﬁnkatu behar du, eskaria 40, 60, 75 eta 25 txalupakoa dela jakinda. Hiruhilabetealdi bakoitzeko eskaria zerbitzatu egin behar du lantegiak. Lehen hiruhilabetearen hasierako inbentarioa 10 txalupakoa da eta bakoitzaren hasieran hiruhileko ekoizpena erabaki beharko da. Gauzak erraztearren, hiruhilabeteko batean eraikitako txalupak hiruhi- labeteko horretako eskariari aurre egiteko baliagarriak direla suposatzen da. Hiruhilabeteko bakoitzeko ohizko ekoizpena 40 txalupakoa da, eta kostua 40.000 pta/txalupa da. Hala ere, ekoizpen-gehigarria erabiltzea posible da, honela lortutako txalupen kostua 45.000 ptakoa izango de- larik. Hiruhilabeteko bakoitzaren amaieran (ekoiztu eta hiruhilabetealdiaren eskariak bete ondoren) biltegiratzen den txalupen biltegiratze-kostua 2.000 ptakoa da itsasuntziko. Ekoizpena kosturik txikienean antolatzeko eredu lineala eraiki ezazu. (d) Lantegi batek bi lurrin mota sortzen du: Brute lurrina eta Chanelle lurrina. Lurrin mota bakoitza ekoizteko behar diren lehengaien kostua 60 pta/Kg-koa da. Lehengai kiloa lantzeko 2 laborategi-ordu behar da. Lantzen den lehengai kiloko 200 gr Brute lurrin eta 250 gr Chanelle lurrin eratortzen da; lurrinen salneurriak 25 pta/gr eta 20 pta/gr dira, hurrenez hurren. Behin bi lurrin mota horiek lortu dituenean, lantegiak birﬁnketa-proze- suaren bidez luxuzko Brute lurrina (60 pta/gr salneurriduna) eta lux- uzko Chanelle lurrina (50 pta/gr salneurriduna) lortzeko aukera du. Birﬁnketa prozesuan birﬁntzen den Brute lurrin gramo 1-ek laborategi- ordu 1 behar du eta 12 ptako kostua izango du; luxuzko Brute lur- rin gramo 1 lortzen da. Birﬁndutako Chanelle lurrin gramo 1-ek 0.5 laborategi-ordu eskatzen du eta 12 ptako prozesatze-kostua sortzen du, luxuzko Chanelle lurrin gramo 1 lortuko delarik. Urtean 4.000 laborategi-ordu dago erabilgarri lantegian eta 2.000 Kg  2.7. ARIKETAK xliii lehengai eros dezake. Lantegiari irabaziak maximizatzen lagunduko dion eredu lineala eraiki ezazu. Laborategi-orduen kostua ﬁnkotzat har ezazu. 2. Ondoko eredu linealak graﬁkoki ebatz itzazu: (a) max z = x1 + 2x2 ondoko murrizketen menpe x1 − x2 ≥ 3 x1 + 2x2 ≤ 1 x2 ≤ 5 x1, x2 ≥ 0 (b) min z = 4x1 − x2 ondoko murrizketen menpe x1 + x2 ≤ 4 x1 − x2 ≤ 6 x1 + x2 ≥ 1 x1, x2 ≥ 0 (c) max z = x1 + x2 ondoko murrizketen menpe x1 + x2 ≤ 6 x1 + 2x2 ≥ 2 3x1 − 4x2 ≥ −1 x1 − x2 ≤ 2 x1, x2 ≥ 0 (d) max z = x1 + 3x2  xliv KAPITULUA 2. EREDU LINEALAK ETA SOLUZIO GRAFIKOA ondoko murrizketen menpe x1 − 2x2 ≤ 2 x1 + 2x2 ≥ 4 x1, x2 ≥ 0 (e) max z = x1 − 2x2 ondoko murrizketen menpe x1 − 2x2 ≤ 2 x1 + 2x2 ≥ 4 x1, x2 ≥ 0  Kapitulua 3 ALJEBRA LINEALA ETA MULTZO GANBILAK Programazio linealaren garapenean aljebra linealeko eta multzo ganbiletako zen- bait kontzeptu erabiltzen da. Hori dela eta, datozen gaiak ondo ulertzeko behar- rezko gertatuko zaizkigun deﬁnizioak, propietateak eta teoremak aztertuko ditugu gai honetan. 3.1 Aljebra Lineala 3.1.1 Bektoreak Demagun ℜ-ren gain deﬁnituriko ℜn bektore-espazioa, zeinean bektore arteko batuketa eta bektore eta eskalare arteko biderkaketa deﬁniturik dauden. ℜn-ko bektorea honela adierazten da: x =      x1 .. . xn      3.1.2 Bektore-eragiketak 1. Batuketa. x eta y bektoreen arteko batuketa beste bektore bat da, zeinaren osagaiek ondokoa betetzen duten: zi = xi + yi ∀i. Eragiketa honek trukatze-propietatea eta elkartze-propietatea betetzen ditu. xlv  xlvi KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK Adibidea: Izan bitez ondorengo bi bektoreak: x =      3 2 −1      eta y =      2 −4 5      x eta y bektoreen arteko batuketa: z = x + y =      3 2 −1      +      2 −4 5      =      5 −2 4      2 2. Bektore eta eskalare arteko biderkaketa. x bektore baten eta λ eskalare baten arteko biderkaketa y = λx moduko bektorea da non yi = λxi ∀i. Bektore baten eta eskalare baten arteko biderkaketak batuketarekiko banatze- propietatea betetzen du. Adibidea: Izan bitez x bektorea eta λ eskalarea: x =      −2 4 −1      λ = 2 Beraien arteko biderkaketa honela kalkulatzen da: λx = 2 ·      −2 4 −1      =      −4 8 −2      2  3.1. ALJEBRA LINEALA xlvii 3. Bi bektoreren arteko biderkadura eskalarra ∀x, y x T · y = (x1 . . . xn)      y1 .. . yn      = n i =1 xiyi Bi bektoreren arteko biderkadura eskalarra zenbaki erreala da. Adibidea: Har ditzagun bi bektore hauek: x =      3 2 −1      eta y =      2 −4 5      Bektoreen arteko biderkadura eskalarra x T · y = (3 2 − 1)      2 −4 5      = 3 · 2 + 2 · (−4) + (−1) · 5 = −7 Ikus daitekeenez, bi bektoreren arteko biderkadura eskalarra zenbaki erreala da. 2 3.1.3 Menpekotasun eta independentzia lineala. Oinarria Deﬁnizioa 3.1.1 (Konbinazio lineala) Baldin y ∈ ℜn bektorea ondoko erara idazterik baldin badago: y = α1x1 + α2x2 + · · · + αnxn orduan y ∈ ℜn bektorea x1, x2 . . . xn ∈ ℜ n bektoreen arteko konbinazio lineala dela esaten da, α1 . . . αn eskalareak izanik.  xlviii KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK Adibidea: Izan bitez bektore hauek: x =   2 4   , x1 =   1 0   , x2 =   1 −1   x bektorea, x1 eta x2 bektoreen konbinazio lineal moduan idatz daiteke: α1   1 0   + α2   1 −1   =   2 4     1 1 0 −1     α1 α2   =   2 4     α1 α2   =   1 1 0 −1   − 1   2 4     α1 α2   =   6 −4   2 Deﬁnizioa 3.1.2 (Menpekotasun lineala) x1, x2 . . . xn ∈ ℜ n bektore multzoa lin- ealki menpekoak direla esaten da baldin eta ondokoa betetzen duten αi eskalareak existitzen badira, guztiak batera zero ez izanik. α1x1 + α2x2 + · · · + αnxn = 0 Adibidea: Izan bitez ondorengo bektoreak: x1 =   2 4   , x2 =   −1 −2    3.1. ALJEBRA LINEALA xlix Linealki menpekoak al dira? α1   2 4   + α2   −1 −2   =   0 0     2 −1 4 −2     α1 α2   =   0 0   Sistemaren bi bektoreak linealki menpekoak dira, zeren eta: 2 −1 4 −2 = 0 Horregatik, sistemak α1 = α2 = 0 soluzioa izateaz gain beste inﬁnitu soluzio du. 2 Deﬁnizioa 3.1.3 (Independentzia lineala) x1, x2 . . . xn ∈ ℜ n bektoreak emanik, baldin eta α1x1 + α2x2 + · · · + αnxn = 0 ⇒ α1 = α2 = · · · = αn = 0 betetzen bada, orduan x1, x2 . . . xn bektoreak linealki independenteak dira. Adibidea: x1 eta x2 datozen bektoreak izanik beren arteko menpekotasun lineala azter- tuko dugu. x1 =   2 3   , x2 =   −1 4   Konbinazio lineala aztertu beharko dugu: α1   2 3   + α2   −1 4   =   0 0   ⇒ α1 = α2 = 0 ?  l KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK Aska ditzagun α1 eta α2:   2 −1 3 4     α1 α2   =   0 0     α1 α2   =   2 −1 3 4   − 1   0 0   = 1 11   4 1 −3 2     0 0   =   0 0   Beraz, linealki independenteak dira. Deﬁnizioa 3.1.4 (Multzo sortzailea) {x1, x2 . . . xn} ℜ n-ko bektore-multzoa mult- zo sortzailea da baldin ∀y ∈ ℜn bektore {x1, x2 . . . xn} bektoreen konbinazio lineal moduan idazterik baldin badago, hau da, ∃α1 . . . αn y = α1x1 + . . . + αnxn Deﬁnizioa 3.1.5 (Oinarria) ℜn bektore-espazio bateko oinarri bat, espazio barnekoa den eta ondoko baldintzak betetzen dituen {x1 . . . xn} bektore-multzoa da. 1. Linealki independenteak izatea. 2. Espazioaren multzo sortzailea izatea. Deﬁnizioa 3.1.6 (Dimentsioa) Bektore-espazio baten dimentsioa oinarria osatzen duten bektore-kopurua da. Kontutan izan behar da, oinarri guztiek bektore-kopuru berbera dutela. Teorema 3.1.1 Bektore-espazioko edozein bektore oinarriko bektoreen konbinazio lineal moduan idatzia izan daiteke. Gainera, konbinazio lineal hori bakarra da. Teorema 3.1.2 Demagun ℜn-ko B oinarria daukagula. Oinarri honetatik abi- atuz beste oinarri bat lortzea posible da. B oinarrikoa ez den eta zero ez den w bektorea izanik, beti existitzen da B oinarrian bektoreren bat zein w bektoreaz ordezkatua izan daitekeen, beti ere aldaketa egin ondoren lortzen den bektore- multzoa ere oinarri izango delarik.  3.1. ALJEBRA LINEALA li Ez dugu teorema honen frogapena garatuko, baina garatuko bagenu, oinarriko zein bektore ordezkatua izan daitekeen ikusiko genuke. Ikus dezagun adibide baten bidez. Adibidea: Izan bedi bektore multzo hau: B = {x1 =      1 2 0      , x2 =      0 1 0      , x3 =      1 1 2      } (a) ℜ3-ko oinarri dela egiaztatuko dugu: |B| = 1 0 1 2 1 1 0 0 2 = 2 = 0 Ondorioz, ∃B−1 eta α1x1 + α2x2 + α3x3 = 0 sistemak soluzio bakarra du: α1 = α2 = α3 = 0. Bektoreak linealki independenteak direla esan nahi du horrek. ℜ3-n 3 bektore linealki independente aurkitu ditugunez, oinarria badaukagu. (b) B oinarriko bektoreak v bektoreaz ordezkatuz beste oinarri batzuk lortuko ditugu: v =      3 1 0      B-ko bektoreen konbinazio lineal moduan idatz daiteke v bektorea.      3 1 0      = α1      1 2 0      + α2      0 1 0      + α3      1 1 2       lii KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK      α1 α2 α3      =      1 0 1 2 1 1 0 0 2      − 1      3 1 0      Sistema ebatziz, α1 = 3 , α2 = −5 , α3 = 0 lortzen da. B oinarria izanik, eta B oinarriarekiko v bektorearen koordenatuak ezagu- nak izanik, ondorengo bi oinarriak eraikitzea posible izango zaigu: B ′ = {v, x2, x3} , B′′ = {x1, v, x3} x3 bektorea ezin daiteke v bektoreaz ordezkatua izan, α3 = 0 delako. 2 3.1.4 Matrizeak Deﬁnizioa 3.1.7 (Matrizeak) mxn ordenako A matrizea ondoko forma duen adier- azpena da: Amxn =         a11 a12 · · · a1n a21 a22 · · · a2n .. . am1 am2 · · · amn         • Matrize-eragiketak: 1. Berdintasuna. A = B baldin aij = bij ∀i, j 2. Batuketa. C = A + B , cij = aij + bij ∀i, j 3. Eskalare eta matrize arteko biderkaketa. λA = B bij = λaij ∀i, j 4. Matrize arteko biderkaketa. C = A · B , cij = n h =1 aihbhj = ai1b1j + · · · + ainbnj  3.1. ALJEBRA LINEALA liii A m x n dimentsioko matrizea bada eta B n x r dimentsiokoa, ord- uan C m x r dimentsiokoa izango da. Biderkaketa egin ahal izateko beharrezkoa da A-ren zutabe-kopurua eta B-ren lerro-kopurua kopuru berbera izatea. Deﬁnizioa 3.1.8 (Heina) Matrize baten heina, linealki independenteak diren ma- trizearen zutabe-kopuru edo lerro-kopuru maximoa da. Froga daiteke matrizean linealki independente diren lerro-kopuru maximoa eta zutabe-kopuru maximoa kopuru berbera direla. Teorema 3.1.3 A matrizearen heina k da baldin eta soilik baldin k+1 ordenako A matrizearen azpideterminante guztiak zero badira eta gutxienez zero ez den k ordenako azpideterminante bat existitzen bada. Idazkera: rg(A) = k Adibidea: Ondorengo matrizearen heina kalkulatuko dugu: A =      1 2 −1 3 1 2 2 4 −2      |A| = 1 2 −1 3 1 2 2 4 −2 = 0 Heina ez da 3. a11 a12 a21 a22 = 1 2 3 1 = 1 − 6 = −5 = 0 ⇒ rg(A) = 2 2  liv KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK 3.1.5 Ekuazio linealen sistemak. Soluzioak. Demagun Ax = b sistema lineala, A m x n matrizea izanik. Sistemak soluziorik izan dezan beharrezkoa eta nahikoa da rg(A) = rg(Ab) izatea. • Baldin rg(A) = rg(Ab) = ezezagun-kopurua ⇒ Soluzio bakarra du sistemak • Baldin rg(A) = rg(Ab) < ezezagun-kopurua ⇒ Sistemak inﬁnitu soluzio du Demagun Ax = b sistema non A m x n matrizea den m < n izanik, eta ekuazio guztiak nagusiak diren (linealki independenteak). Esan dugunez, sistema honek inﬁnitu soluzio du. rg(A) = rg(Ab) = m Baldin B m ordenako azpideterminantea bada, zeinaren zutabe guztiak linealki independenteak diren, sistema honela berridaztea posible da: BxB + RxR = b B-ko zutabeek ℜm-ren oinarria osatzen dute, |B| = 0 delako. Beraz, xB kalkula daiteke. Horretarako, ekuazioaren bi atalak B−1-ez biderkatuko ditugu: B − 1Bx B + B − 1Rx R = B − 1b xB = B − 1b − B−1Rx R xR ∈ ℜ n−m ⇒ inﬁnitu balio har dezake Edozein oinarritarako inﬁnitu soluzio lortu ahal izango dugu. Baina, guri ez zaizkigu soluzio guzti horiek interesatzen. Guk xR = 0 balioa ﬁnkatuta lortutako xB soluzioak nahi ditugu. Nagusi ez diren ezezagunei zero balioa emanda ondoko soluzioa lortzen da: xB = B − 1b − B−1Rx R xR = 0 eginez ⇒ xB = B − 1b Honela, xR-ri balio bakarra emango diogu eta xB-ri oinarriko soluzio izena emango diogu. Oinarri bakoitzerako lor daiteke oinarriko soluzioa.  3.1. ALJEBRA LINEALA lv Zenbat oinarri desberdin har daiteke? m lerrodun eta n zutabedun matrize bat- en m x m matrize desberdinen kopuru maximoa (m < n), hau da, A matrizearekin osa daitezkeen Bmxm matrizeak bezain beste:   n m   = n! m!(n − m)! Oinarri bakoitzari oinarriko soluzio bakarra dagokionez, hau oinarriko soluzio- kopuru maximoa da baita. Maximoa da, horietako B matrizeren baten determi- nantea zero izatekotan B oinarri izango ez delako. Ziurra dena zera da: oinarriko soluzio-kopurua ﬁnitua dela.  lvi KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK Adibidea: Honako sistemaren oinarriko soluzio bat kalkulatuko dugu. 2x1 − x2 + 3x3 = 2 x1 + x2 − x3 = 4 Matrize bat: B =   2 −1 1 1   Matrize honen determinantea ez da zero. Beraz, oinarria da. 2x1 − x2 = 2 − 3x3 x1 + x2 = 4 + x3 x3 = 0 eginez, oinarriko soluzioa lortuko dugu.   x1 x2   =   2 −1 1 1   − 1   2 4   =   2 2   Problema honek duen oinarriko soluzio-kopuru maximoa hau da:   3 2   = 3! 2!(3 − 2)! = 3 Egiazta daiteke beste bi matrizeen determinantea zeroren desberdina dela, eta be- raz, oinarriko soluzioak ematen dituztela, hau da xB =   2 3 1 −1   − 1   2 4   xB =   −1 3 1 −1   − 1   2 4   2  3.2. MULTZO GANBILAK lvii 3.2 Multzo ganbilak 3.2.1 Zuzen baten ekuazioa x1, x2 ∈ ℜ 2 bi puntu emanik x1 = x2 izanik, bi puntuek deﬁnituriko zuzenaren ekuazioa x = x1 + λ(x2 − x1) ∀λ ∈ ℜ da. Ondoko eran ere idatz daiteke. x = λx2 + (1 − λ)x1 Beraz, x1 eta x2 puntuek deskribatutako zuzenaren ekuazioa ondoko multzoaren bidez adieraz daiteke: R = {x/x = λx2 + (1 − λ)x1 , x1, x2 ∈ ℜ 2 , x1 = x2, λ ∈ ℜ} Deﬁnizio hau ℜn-rako orokortuz zuzen baten ekuazioa lortzen da ℜn espazioan: R = {x/x = λx2 + (1 − λ)x1 , x1, x2 ∈ ℜ n , x1 = x2 , λ ∈ ℜ} 3.2.2 Segmentuak ℜ2-n, x1 eta x2 bi puntu elkartzen dituen segmentua ondoko S multzoaren bidez adieraz daiteke: S = {x/x = λx2 + (1 − λ)x1 , x1, x2 ∈ ℜ 2 , x1 = x2 , 0 ≤ λ ≤ 1} Deﬁnizioa ℜn-rako orokortuz, ℜn-n bi puntu elkartzen dituen segmentua: S = {x/x = λx2 + (1 − λ)x1 , x1, x2 ∈ ℜ n , x1 = x2 , 0 ≤ λ ≤ 1} 3.2.3 Hiperplanoak eta erdiespazioak • ℜ2-n → c1, c2 eta z balioak emanik c1x1 + c2x2 = z zuzen baten ekuazioa da. 1 dimentsioko azpiespazioa da planoan; hiperplano izena hartzen du. • ℜ3-n → c1, c2, c3 eta z emanik c1x1 + c2x2 + c3x3 = z plano baten ekuazioa da. 2 dimentsiokoa da, 3 dimentsioko espazioan; hiperplanoa da. • Oro har , ℜn-n → c1, c2 . . . cn eta z emanik c1x1+· · ·+cnxn = z hiperplano baten ekuazioa da.  lviii KAPITULUA 3. ALJEBRA LINEALA ETA MULTZO GANBILAK cT x = z hiperplanoak elkarrekiko baztertzaileak diren hiru eskualdetan ba- natzen du espazioa. 1. {x/cT x < z} erdiespazio irekia. 2. {x/cT x = z} hiperplano bera. 3. {x/cT x > z} erdiespazio irekia. Ondokoak erdiespazio itxiak dira: {x/c T x < z} ∪ {x/cT x = z} = {x/cT x ≤ z} {x/c T x = z} ∪ {x/cT x > z} = {x/cT x ≥ z} 3.2.4 Multzo ganbilak: deﬁnizioak Deﬁnizioa 3.2.1 (Konbinazio lineal ganbila) x1, x2 ∈ ℜ n bi puntu izan bitez. x = λx2 + (1 − λ)x1 , 0 ≤ λ ≤ 1 idatzi badaiteke, orduan x puntua x1 eta x2 puntuen konbinazio lineal ganbila dela esaten da eta x1 eta x2 puntuak lotzen dituen segmentua da. Baldin 0 < λ < 1 betetzen bada, konbinazioari konbinazio lineal ganbil murriztua esaten zaio. Deﬁnizioa 3.2.2 (Multzo ganbila) X multzoa multzo ganbila da baldin x1, x2 ∈ X puntu-bikote ororentzat, x1 = x2 izanik, konbinazio lineal ganbila x = λx2 + (1 − λ)x1 , 0 ≤ λ ≤ 1 ere multzokoa bada. Deﬁnizioa 3.2.3 (Mutur-puntua) X multzo ganbilaren x puntua mutur-puntua da baldin ∃ /x1, x2 ∈ X, x1 = x2 non x = λx2 + (1 − λ)x1 0 < λ < 1  3.2. MULTZO GANBILAK lix 3.2.5 Multzo ganbilak: teoremak Teorema 3.2.1 Hiperplanoa multzo ganbila da. Frogapena: Izan bedi X = {x/c T x = z} ∀x1, x2 ∈ X ⇒ λx2 + (1 − λ)x1 ∈ X? Baldin x1 ∈ X ⇒ c T x1 = z Baldin x2 ∈ X ⇒ c T x2 = z c T  aij − cij Kontutan izan behar da A matrizearen egitura berezia dela, eta horrexegatik aij bektorearen bi osagaik dutela 1 balioa: i posizioko osagaiak eta m+j posiziokoak. Gainontzeko osagaiak zero dira. Honen ondorioz, zij − cij = ui + vj − cij  ccxxxvi KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Beraz, ui eta vj kalkulatzeko 0-ren berdinak diren dualaren murrizketak planteatzen dira. Murrizketa horiek dira oinarriko bektoreei dagozkienak. zij − cij = 0 ∀aij ∈ B u1 . . . um, v1 . . . vn balioak kalkulatzeko, n + m balio alegia, ui + vj − cij = 0 moduko m + n − 1 ekuazio dago. Sistema honetan 1 mailako askatasun-gradua dago: aldagai bati balio bat emanez gero gainontzeko aldagaien balioak kalkula daitezke. Aldagai dualen balioak kalkulatu ondoren zij − cij = ui + vj − cij balio guztiak kalkula daitezke. Horien arabera soluzioa optimoa den edo hobeagotzerik ba al den jakingo dugu. Adibidea: Har ditzagun gure adibideari dagokion kostu-taula eta ipar- mendebaldeko ertzaren metodoa erabiliz lortutako soluzioa. Hauek dira dauzkagun kostu-taula eta ﬂuxu- taula: Kostu-taula: O1 O2 O3 ESKAINT ZA A 8 6 10 2000 B 10 4 9 2500 ESKARIA 1500 2000 1000  7.1. GARRAIO-PROBLEMA ccxxxvii Fluxu-taula: O1 O2 O3 ESKAINT ZA A 1500 500 2000 B 1500 1000 2500 ESKARIA 1500 2000 1000 Oinarria: B = {a11, a12, a22, a23} {u1, u2, v1, v2, v3} balioak kalkulatzeko ekuazio sistema hau ebatzi beharko dugu: u1 + v1 = 8 u1 + v2 = 6 u2 + v2 = 4 u2 + v3 = 9 u1 aldagaiari 0 balioa emanez gero, v1 = 8, v2 = 6, u2 = −2 eta v3 = 11 soluzioa lortzen da. zij − cij = ui + vj − cij ∀aij ∈ B balioak kalkulatzeko oinarriko ez diren a13 eta a21 bektoreak hartuko ditugu. • z13 − c13 = u1 + v3 − c13 = 0 + 11 − 10 = 1 > 0 • z21 − c21 = u2 + v1 − c21 = −2 + 8 − 10 = −4 < 0 ∃ z13 − c13 = 1 > 0 ⇒ a13 oinarriratuko da a13 oinarriratuz soluzioa hobetzea lortuko dugu. 2  ccxxxviii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Oinarritik kanporatua izango den bektorea Soluzioa hobe dadin oinarria utzi beharko duen bektorea zein den zehazteko on- dorengoak izango ditugu kontutan. 1. m jatorri-puntuz eta n helburu-puntuz osaturiko garraio-problema orekatu baten oinarriko m + n − 1 aldagai multzoan ez dago ziklorik. Adibidez, aurreko adibidean a11, a12, a22, a23 oinarriko bektoreek ez dute ziklorik os- atzen. 2. Oinarriko aldagaiak erabiliz eta helburuaren balioa hobetzeko oinarriratuko den aldagaia erabiliz ziklo bakar bat osa daiteke. Oinarria utziko duen alda- gaia zikloak ematen digu. Zikloa osatzen duten bektoreen arteko bat izango da oinarria utziko duena. Adibidez, aurreko adibidean oinarrian ez dagoen a13 bektorea ondoko konbinazio linealaren bidez adieraz daiteke: a13 = a12 − a22 + a23 Taulan begiratuz gero bektore horiek ziklo bat osatzen dutela ikusten da. Behin oinarrira sartuko den aldagaia eta oinarritik irtengo dena zehaztu di- tugunean, ﬂuxu-taulan aldaketa egingo dugu. Honen ondorioz, eskariak edo es- kaintzak desorekatu egingo zaizkigu. Orekatzeko beharrezko aldaketak burutu beharko ditugu. Adibidea: Aurreko adibidearekin jarrai dezagun. Ipar-mendebaldeko ertzaren metodoa erabiliz lortu dugun soluzioa hau da: O1 O2 O3 ESKAINT ZA A 1500 500 2000 B 1500 1000 2500 ESKARIA 1500 2000 1000 Oinarriratuko den bektorea a13 da, eta a13, a12, a22, a23 bektoreek zikloa os- atzen dute. a13 = a12 − a22 + a23 idaztea posible da.  7.1. GARRAIO-PROBLEMA ccxxxix Zikloaren arabera, a22 bektorea ez da oinarritik irtengo, koeﬁziente negatiboa duelako. Zein irtengo da? a12 edo a23? x12 = 500 x23 = 1000    txikiena: 500 → x12 irtengo da Gauzak honela utziz gero, taula desorekatua geldituko zaigu. O2-ren eskaria orekatzeko x22 = 1500 + 500 = 2000 jarri beharko dugu eta orain B eskaintza orekatzeko x23 = 1000 − 500 = 500. Eskari eta eskaintza guztiak betetzen dira. O1 O2 O3 ESKAINT ZA A 1500 500 2000 B 2000 500 2500 ESKARIA 1500 2000 1000 2 Zikloaren osaeran parte hartzen ez duten aldagaien gain ez du oinarriaren al- daketak inolako eraginik izango. Existitzen den zikloa bakarra da, sartzen den bektorearen konbinazio lineala baita. Soluzio hobea kalkulatzeko egiten dena zikloaren oreka mantentzea da. 7.1.5 Garraio-problemarako algoritmoa 1. Problema orekatu. 2. Soluzio bideragarri bat kalkulatu. 3. Une honetan daukagun oinarriari dagozkion u1 . . . um, v1 . . . vn kalkulatu. 4. Baldin ∀aij ∈ B zij −cij = ui +vj −cij ≤ 0 bada, une honetan daukagun soluzioa optimoa da. Bestela, zij − cij = ui + vj − cij positiboen artetik balio handieneko aldagaia oinarriratuko da. 5. Oinarrira sartu berri den aldagaiak eta oinarriko zenbait aldagaik osatutako zikloa zein den zehaztu, eta soluzio berria kalkulatu. 3. urratsean jarraitu.  ccxl KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Adibidea: Garraio-problema bat ebatziko dugu, dagozkion kostu-taula, eskari eta es- kaintzak ondokoak izanik. 1 2 3 4 ESKAINTZAK 1 5 9 - 4 28 2 6 10 3 - 32 3 4 2 5 7 60 ESKARIAK 48 29 40 33 1. 3 i =1 ai = 120 < 4 j =1 bj = 150 Problema ez da orekatua. Gezurrezko iturburu-puntu bat gehituko dugu, bere eskaintza 30 eta garraio-kostuak 0 izango direlarik. 1 2 3 4 ESKAINTZAK 1 5 9 M 4 28 2 6 10 3 M 32 3 4 2 5 7 60 4 0 0 0 0 30 ESKARIAK 48 29 40 33 (1,3) eta (2,4) posizioetan M garraio-kostua jarri dugu, iturburu-puntu eta helburu-puntu horien arteko garraioa posible ez dela adierazteko. 2. Vogel-en metodoa erabiliko dugu hasierako oinarriko soluzio bideragarri bat kalkulatzeko.  7.1. GARRAIO-PROBLEMA ccxli 1 2 3 4 ESKAINTZAK LDi 1 5 9 M 4 28 1 2 6 10 3 M 32 3 3 4 2 5 7 60 2 4 0 0 0 0 30 0 ESKARIAK 48 29 40 33 ZDi 4 2 3 4 Diferentziarik handiena 1. zutabean eta 4. zutabean aurkitzen dira. 1. zutabea aukeratzen dugu, eta bertan c41 = 0 balioa. x41 balioa esleituko dugu. x41 = min {30, 48} = 30 4. iturburu-puntua zerbitzatua izan da. 1. helburu-puntuaren eskaria 18-koa da hemendik aurrera. 1 2 3 4 ESKAINTZAK LDi 1 5 9 M 4 28 1 2 6 10 3 M 32 3 3 4 2 5 7 60 2 ESKARIAK 18 29 40 33 ZDi 1 7 2 3 Diferentziarik handiena 7-koa da, eta 2. zutabean c32 = 2 da kostu minimoa. x32 = min {29, 60} = 29 Bigarren zutabea zerbitzatua izan da, eta 3. iturburu-puntuaren eskaintza 60 − 29 = 31-koa izango da. Kostu-taula honakoa da.  ccxlii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 3 4 ESKAINTZAK LDi 1 5 M 4 28 1 2 6 3 M 32 3 3 4 5 7 31 1 ESKARIAK 18 40 33 ZDj 1 2 3 x23 esleituko dugu. x23 = min {32, 40} = 32 2. iturburua zerbitzatua gelditzen da eta 3. helburuaren eskaria 40 − 32 = 8 da. Datozen kalkuluetarako ez da 2. lerroa erabiliko. Hortaz, ondorengo kostu-taula daukagu. 1 3 4 ESKAINTZAK LDi 1 5 M 4 28 1 3 4 5 7 31 1 ESKARIAK 18 8 33 ZDj 1 M-5 3 Hirugarren zutabean esleipena egingo dugu. x33 = min {8, 31} = 8 Helburu-puntua zerbitzatua izan da, eta 3. iturburu-puntuaren eskaintza 31 − 8 = 23. 1 4 ESKAINTZAK LDi 1 5 4 28 1 3 4 7 23 3 ESKARIAK 18 33 ZDj 1 3  7.1. GARRAIO-PROBLEMA ccxliii x31 = min {18, 23} = 18 Eskariak eta eskaintzak eguneratuz zera daukagu. 4 ESKAINTZAK 1 4 28 3 7 5 ESKARIAK 33 Esleipenak egiteko zutabe bat besterik ez daukagu oraingo honetan. x14 = 28, x34 = 5 Burututako esleipen guztiak ﬂuxu-taulan adieraziko ditugu. 3. ui i = 1, 2, 3, 4 eta vj j = 1, 2, 3, 4 balioen kalkulua. u1 + v4 = 4 u2 + v3 = 3 u3 + v1 = 4 u3 + v2 = 2 u3 + v3 = 5 u3 + v4 = 7 u4 + v1 = 0 Baldin u3 = 0 bada, honako soluzioa lortzen da. u3 = 0, v1 = 4, v2 = 2, v3 = 5 v4 = 7, u4 = −4, u2 = −2, u1 = −3 4. Datorren taulan, oinarriko kostuak eta oinarriko ez diren bektoreei dagozkien zij − cij balioak biltzen dira.  ccxliv KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 ui 1 -4 -10 2-M 4 -3 2 -4 -10 3 5-M -2 3 4 2 5 7 0 4 0 -2 1 3 -4 vj 4 2 5 7 x44 = 5 oinarrian sartzen da, eta aurreko taulako zikloa aztertuz, x34 = 5 − 5 taulatik irtengo dela ikusten da.  7.1. GARRAIO-PROBLEMA ccxlv 5. Hurrengo soluzioa hau da. Algoritmoaren 3. 4. eta 5. pausoak errepikatu egingo ditugu, optimaltasun baldintzak beteko diren arte. 3. Ekuazioak: u1 + v4 = 4 u2 + v3 = 3 u3 + v1 = 4 u3 + v2 = 2 u3 + v3 = 5 u4 + v1 = 0 u4 + v4 = 0 Baldin u3 = 0 orduan, v1 = 4, v2 = 2, v3 = 5 u4 = −4, v4 = 4, u1 = −4, u2 = −2  ccxlvi KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 4. zij − cij balioen kalkulua. 1 2 3 4 ui 1 -1 -7 5-M 4 0 2 -4 -10 3 2-M -2 3 4 2 5 -3 0 4 0 -2 1 0 -4 vj 4 2 5 4 5. x43 = 8 oinarriratuko da eta x33 = 8 − 8 da. Soluzio berria honakoa da 1 2 3 4 ESKAINTZAK 1 28 2 32 3 31 29 4 17 8 5 ESKARIAK 3. Ekuazioak askatuz u1 + v4 = 4 u2 + v3 = 3 u3 + v1 = 4 u3 + v2 = 2 u4 + v1 = 0 u4 + v3 = 0 u4 + v4 = 0 u4 = 0, v1 = v3 = v4 = 0 u3 = 4, v2 = −2, u1 = 4, u2 = 3  7.1. GARRAIO-PROBLEMA ccxlvii 4. . 1 2 3 4 ui 1 -1 -7 4-M 4 4 2 -3 -9 3 3-M 3 3 4 2 -1 -3 4 4 0 -2 0 0 0 vj 0 -2 0 0 Soluzioa optimoa da. Esleipenak honakoak dira. x14 = 28, x23 = 32, x31 = 31, x32 = 29 1. helburu-puntuaren eskaria, 17-koa, ez da zerbitzatua izan ( x41 gezurrezko aldagaia da). Era berean, 3. helburu-puntuaren 8 unitate eta 4. helburu- puntuaren 5 unitate zerbitzatu gabe gelditu dira. z ∗ = 4 · 28 + 3 · 32 + 4 · 31 + 2 · 29 = 390 2 7.1.6 Soluzio endekatua m jatorri-puntu eta n helburu-puntu duen garraio- problema izanik, oinarriko soluzio bideragarri bat osatzen duten aldagaien artean hertsiki positiboak direnak m+n−1 baino gutxiago badira, orduan soluzioa endekatua da. Endakatzea ondorengo ka- suetan gerta daiteke: • Ipar-mendebaldeko ertzaren metodoaren bidez edo Vogel-en metodoaren bidez hasierako soluzio bideragarri bat eraikitzean, azkena ez den pausoren batetan aldi berean jatorri-puntu bat eta helburu-puntu bat desagertzen dire- nean. • Hasierakoa ez den soluzio batean egonik, oinarritik irtengo den bektorea aukeratzeko unean bi bektore edo gehiagok aukeratuak izateko baldintza betetzen dutenean, beren artean zorizko aukeraketa egiten dugunean.  ccxlviii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Horrelako kasuetan, zero balioa hartzen duten aldagaien artean oinarrikoak dire- nak eta ez direnak bereiztu egin beharko ditugu. Endakatzeak bi arazo sortzen ditu: 1. Ziklatzearen arazoa. Simplex metodoarekin ere arazo berbera gertatzen zitzaigun. 2. Garraioaren algoritmoa erabili ahal izateko, soluzioak ez-endakatua izan beharko du, MODI metodoaren ekuazio sistema bete dadin. Adibidea: Har dezagun ondoko garraio-problema orekatua: 1 2 3 4 ESKAINT ZA 1 23 22 17 24 40 2 18 23 16 22 60 3 21 18 21 23 70 ESKARIA 50 50 30 40 Ipar-mendebaldeko ertzaren metodoa erabiliz hasierako soluzio bat kalkulatuko dugu: 1 2 3 4 ESKAINT ZA 1 40 40 2 10 50 60 50 3 30 40 70 40 ESKARIA 50 50 30 40 10 Aldagai hertsiki positiboen kopurua: 5 < 4 + 3 − 1 = 6. Beraz, soluzioa endekatua da.  7.1. GARRAIO-PROBLEMA ccxlix Endekatu bihurtu zaigu bigarren lerroa eta hirugarren zutabea batera desagertu zaizkigunean. Soluzioa ez-endekatu bihurtzeko x23 aldagaia oinarrikotzat hartuko dugu eta hertsiki positiboa den ǫ balioa emango diogu. Azter dezagun ea soluzio hori optimoa den. Horretarako oinarriko ∀i, j-rako ui + vj = cij sistema ebatziko dugu. • Oinarria: B = {a11, a21, a22, a23, a33, a34} • Ekuazio sistema: u1 + v1 = 23 u2 + v1 = 18 u2 + v2 = 23 u2 + v3 = 16 u3 + v3 = 21 u3 + v4 = 23 • u1 = 0 eginez lortzen den soluzioa: v1 = 23, u2 = −5, v2 = 28, v3 = 21, u3 = 0, v4 = 23 • Oinarriko ez diren aldagaientzako: * z12 − c12 = u1 + v2 − c12 = 0 + 28 − 22 = 6 * z13 − c13 = u1 + v3 − c13 = 0 + 21 − 17 = 4 * z14 − c14 = u1 + v4 − c14 = 0 + 23 − 24 = −1 * z24 − c24 = u2 + v4 − c24 = −5 + 23 − 22 = −4 * z31 − c31 = u3 + v1 − c31 = 0 + 23 − 21 = 2 * z32 − c32 = u3 + v2 − c32 = 0 + 28 − 18 = 10 1 2 3 4 ui 1 23 6 4 −1 0 2 18 23 16 −4 −5 3 2 10 21 23 0 vj 23 28 21 23  ccl KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA z32 − c32 = max {zij − cij/zij − cij > 0} a32 oinarrira sartuko da. Fluxu-matrizea eta a32 = a22 − a23 + a33 zikloa aztertuz, oinarritik a22 edo a33 atera daitekeela ikusten dugu. xij txikienari lotuta dagoena a33 da. Soluzioa: 1 2 3 4 ESKAINT ZA 1 40 40 2 10 20 30 60 3 30 40 70 ESKARIA 50 50 30 40 Soluzio hau ez da endekatua; algoritmoa erabiltzen jarrai dezakegu optimoa lortu arte. 2 7.2 Esleipen-problema Garraio-problemaren kasu partikularra da esleipen-problema. Problema honetan lortu nahi dena zera da: iturburu-puntuen (izaki, eginkizun etab.) eta helburu- puntuen (eginkizun, makina etab.) arteko esleipena, esleipen honek kostu- funtzioa optimizatuko duelarik. Esleipen honek izaki bakoitza eginkizun bakar bati eta eginkizun bakoitza izaki bakar bati esleituko ditu. i izakia eta j eginkizuna elkarri esleitzeak cij kostua eragiten du. Erabaki-aldagaiak honela deﬁnituak daude: xij =    1 baldin i izakia eta j eginkizuna elkarlotu badira 0 bestelakoetan Formalki esateko, n izaki eta n eginkizun izanik, eta cij i izakia j eginkizu- nari esleitzeko kostua bada, kostu totala minimo egingo duen esleipena aurkitzean datza esleipen-problema.  7.2. ESLEIPEN-PROBLEMA ccli Ondoko eredu lineala plantea daiteke: min z = n i =1 n j =1 cijxij ondoko murrizketen menpe n j =1 xij = 1 i = 1 . . . n n i =1 xij = 1 j = 1 . . . n xij = 0, 1 ∀i, j cij balioak i izakia j eginkizunari lotzeak sortzen duen eraginkortasuna adier- aziko balu, orduan helburua maximizatzea litzateke, eta minimizatze-problemara aldatu beharko genuke algoritmoa erabili ahal izateko. i eginkizun bakoitza izaki bakar bati elkartzen zaiola diote lehen n murrizketek; hurrengo n murrizketek aldiz, izaki bakoitzari eginkizun bakar bat egokitzen zaio- la. xij aldagaiak bitarrak dira. Esleipen-problema garraio-problema ebazten den moduan ebatz daiteke. Horretarako, xij aldagaiak positibo izatera pasako di- ra, eta eskari eta eskaintzak 1 izango dira. Esleipen-problemaren eta garraio- problemaren arteko erlazioa ikusteko interesgarria da hau egitea, baina ez beste ezertarako, esleipen- problema ebazteko metodo eraginkorragoak badaude eta. Meto- do hauetan, garraio-probleman gertatu zaigun antzera, kostu-matrizea izango da informazio gehien emango diguna. Oro har, problema praktikoetan ez da beti jatorri-puntuen kopurua eta helburu- puntuen kopurua berbera izango. Kopurua bera ez denetan problema orekatu egin beharko da horretarako problemari gezurrezko jatorri-puntuak edo gezurrezko helburu-puntuak gehituz. Honako adibidearen bidez esleipen-problema erreal bat nolakoa izan daite- keen ikusiko dugu. Adibidea: Demagun herri batean lau eraikin jaso nahi direla: A, B, D eta E. Lehiaketa publikora atera du udaletxeak, eta 4 izan dira lehiaketara aurkeztu diren kontratis- tak:  1, 2, 3 eta 4. Kontratista bakoitzak eraikin bakoitza altxatzeak ekarriko duen kostuaren aurreproiektua (milioi pezetatan) aurkeztu du. Datuak taulakoak dira:  cclii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 A 58 58 60 54 B 66 70 70 78 D 106 104 100 95 E 52 54 64 54 Demagun kontratista bakoitzari eraikin bakar bat eraikitzea eskatuko zaiola, eta eraikin guztiak eraiki behar direla. Zein da kontratista eta eraikin arteko es- leipen optimoa? Udaletxeari merkeen aterako zaiona, alegia? 2  7.2. ESLEIPEN-PROBLEMA ccliii Esleipen-problema ebatziko duen algoritmoa datozen bi teorematan oinarritzen da: Teorema 7.2.1 Esleipen problema baten helburu-funtzioa z = n j =1 n i =1 cijxij izanik, bere {xij} aldagaiek hartutako balioak soluzio optimo badira, orduan {xij} soluzio optimo da baita helburu-funtzio horren ordez z ′ = n j =1 n i =1 c ′ ij xij duen problemarako. c′ ij = cij − ui − vj da eta ui eta vj konstanteak dira. Frogapena: z ′ = n j =1 n i =1 c ′ ij xij = n j =1 n i =1 (cij − ui − vj)xij = = n j =1 n i =1 cijxij − n j =1 n i =1 uixij − n j =1 n i =1 vjxij = = z − n i =1 ui n j =1 xij − n j =1 vj n i =1 xij = = z − n i =1 ui − n j =1 vj = z − k z eta z′ helburu-funtzioen arteko aldea konstante bat da. Horregatik lortzen dute optimoa {xij} erabaki-aldagaien balioen multzo berberean. 2 Teorema horri esker kostu-matrizea eraldatu ahal izango dugu lerroka edota zutabeka eragiketak eginez. Horrela, adibidez, lerro edota zutabe bati konstante bat kendu ahal izango diogu.  ccliv KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Teorema 7.2.2 Baldin ∀i, j cij ≥ 0 bada eta xij aldagaiek hartutako balioen multzoak z = n j =1 n i =1 cijxij = 0 betetzen badu, orduan {xij} daukagun problemarako soluzio optimoa da. Frogapena: cij ≥ 0 dela dakigu ∀i, j-rako, eta baita xij = 0, 1 dela ere. z-ren minimo ab- solutua 0 da. Horregatik, {xij} multzo batek z = 0 egiten badu, minimo absolutua lortuko da eta hori izango da problemaren soluzio optimoa. 2 Esan dugun bezala, aurreko bi teorematan oinarritzen da esleipen-problema baten soluzioa lortzeko erabiltzen den metodoa. Metodo horren urratsak jar- raitzean kostu- matrizea eraldatuko dugu, lehen teoremari esker erabil ditzakegun eragiketak eginez, zeroak lortzeko. Gero, esleipen guztiak egin ondoren, helburu- funtzioaren balioa zero bada, minimo absolutua lortu dugu eta soluzioa optimo izango da. 7.2.1 Esleipen-metodoa: Metodo hungariarra. Ikusi bezala, esleipenaren matrizeko lerro edo zutabe bateko osagai guztiei kon- stante bat gehitzen edo kentzen badiegu, horrek ez du esleipen optimoaren gain in- olako eraginik izango. Metodo hungariarra gertakizun honetan oinarrituz, kostu- matrizea eraldatu eta bertan ahalik eta zero- kopuru handiena lortzen saiatuko da. Hauek dira jarraitu beharreko urratsak: 1. Problema orekatu. 2. Kostu-matrizeko elementu guztiak ez- negatibo bihurtu eta problema minimizatze- idazkerara moldatu. 3. Lerro bakoitzetik kosturik txikieneko ui elementua hartu eta lerroko ele- mentu guztiei balio hori kendu. Matrizeko elementuak aldatuak izan dira eta orain c′ ij balioak ditugu. ui = min j cij  7.2. ESLEIPEN-PROBLEMA cclv 4. Aurreko urratsean lerroetarako egindako gauza bera egin zutabeetarako. vj = min i c ′ ij orain c′′ ij elementuak lortu ditugu. 5. Zeroak esleitu. Zero- kopuru txikieneko lerroa aukeratu, zero horietako edozein esleitu eta lerro edo zutabe berberean dauden gainontzeko zeroak zirribor- rotu. Gainontzeko lerroekin ere gauza bera egin, zirriborrotugabeko zero- kopuru txikiena duen lerrotik jarraituz; • Halakoren batean, lerro guztietan esleitutako zero bat baldin badauk- agu, orduan daukagun soluzioa optimoa da. Amaitu. • Oraindik ez badugu lerro bakoitzeko zero bana esleitzea lortu, 5. ur- ratsean jarraituko dugu. 6. Ahalik eta lerro edota zutabe-kopuru txikiena aukeratuko dugu, beti ere, es- leitutako zero guztiak lerro edota zutabe horietan egongo direlarik. Aukeraketa honela burutuko dugu: (a) Esleitutako zerorik ez daukan lerro oro markatu. (b) Markatutako lerroetan zirriborrotutako zeroa duten zutabeak markatu. (c) Markatutako zutabeetan zero bat esleituta duten lerroak markatu. (b) eta (c) urratsak errepikatu ez lerro eta ez zutabe gehiago markatu ahal izango ez dugun arte. Markatuak izan ez diren lerroetan eta markatutako zutabeetan daude zero guztiak. Lerro eta zutabe horiek estali. 7. Zero gehiago sortuko dugu. Horretarako, estaligabeko elementuen artetik txikiena aukeratuko dugu. Estaligabeko elementuei kopuru hori kendu, eta kopuru hori gehitu estalitako lerro eta zutabe arteko ebakidura puntu di- renei. 4. urratsera joan. Esleipen-problema ebazteko erabiltzen den metodo hungariar hau Konig-en teoreman oinarritzen da. Teorema honen arabera, lerro eta zutabeetan indepen- denteki eslei daitekeen zero-kopurua, taulako zero guztiak estaltzeko behar den lerro edota zutabe-kopuru minimoa da.  cclvi KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Adibidea: Har dezagun kontratisten eta eraikinen arteko esleipen-problema. Metodo hungariarra erabiliko dugu soluzio optimoa lortzeko. Kostu-taula honakoa dela esan dugu: 1 2 3 4 A 58 58 60 54 B 66 70 70 78 D 106 104 100 95 E 52 54 64 54 1. Problema orekatua da. 2. Matrizeko osagai guztiak positiboak dira, eta helburua minimizatzea da. 3. Lerro bakoitzeko elementuei lerroko elementurik txikiena kenduko diegu. Lehen lerroko elementurik txikiena 54 da, bigarrenekoa 66, hirugarrenekoa 95 eta laugarrenekoa 52. Matrize hau lortuko dugu: 1 2 3 4 A 4 4 6 0 B 0 4 4 12 D 11 9 5 0 E 0 2 12 2 4. Eragiketa horiek egin ondoren lortutako taulan zutabe bakoitzean txikiena kenduz gero, ondoko taula lortzen da: 1 2 3 4 A 4 2 2 0 B 0 2 0 12 D 11 7 1 0 E 0 0 8 2  7.2. ESLEIPEN-PROBLEMA cclvii 5. Zeroak esleitu. • Zero-kopuru txikieneko lerroak lehenengoa eta hirugarrena dira. Lehenen- gotik hasiko gara. Bertan zero bakarra dago. (A,4) zeroa esleitua gelditzen da, beraz, eta A lerroko eta 4 zutabeko gainontzeko zeroak zirriborrotuko ditugu. A lerroan ez dago beste zerorik, bai ordea 4 zutabean. 1 2 3 4 A 4 2 2 0 B 0 2 0 12 D 11 7 1 0 E 0 0 8 2 • Esleitugabeko zeroak dituzten lerroak bigarrena eta laugarrena dira. Hirugarren lerroan ez dago esleitua izan daitekeen zerorik. Bi ler- ro horietariko edozein aukera dezakegu, bigarrena adibidez. Bigarren lerroan bi zero ditugu; edozein aukera daiteke. Har dezagun (B,1) ze- roa. Hau esleiturik gelditzen da. (B,3) eta (E,1) zeroak zirriborrotu egingo ditugu, bata B lerroan egoteagatik eta 1 zutabean egoteagatik bestea. 1 2 3 4 A 4 2 2 0 B 0 2 0 12 D 11 7 1 0 E 0 0 8 2 • Zirriborrotugabeko zero bakarra dago taulan, laugarren lerroan hain zuzen ere: (E,2). Esleitua gelditzen da, ba.  cclviii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 A 4 2 2 0 B 0 2 0 12 D 11 7 1 0 E 0 0 8 2 Taulako lerro bakoitzeko ez dago esleitutako zero bat. Beraz, hurrengo ur- ratsean jarraitu beharko dugu. 6. Zero guztiak estaltzeko beharrezko lerro edota zutabe-kopuru minimoa auk- eratuko dugu. (a) D lerroa markatuko dugu x baten bidez, bertan ez daukagulako esleitu- tako zerorik. (b) Markatu berri dugun lerroan esleitua izan ez den zero bat dago, 4. zutabean hain zuzen ere. Markatu egingo dugu zutabe hau. (c) Aurreko urratsean zutabe bat, laugarrena, markatu dugu. Zutabe hor- retan badago esleitutako zero bat, A lerrokoa alegia. Lerro hau markatu egingo dugu. (b) Markatutako A lerroan ez dago esleitugabeko zerorik. Beraz, prozesua amaitu da. Markatuak izan ez diren lerroek eta markatuak izan diren zutabeek zero guztiak estaltzen dituzte. 7. Zero berriak sortu. Har ditzagun estaliak izan ez diren taulako elementuak: 4, 2, 2, 11, 7, 1. Horietatik txikiena 1 elementua da. Estaliak ez dau- den elementuei 1 kenduko diegu eta bi aldiz estaliak izan direnei 1 gehitu. Batuketak eta kenketak egin ondoren hau lortzen da: 1 2 3 4 A 3 1 1 0 B 0 2 0 13 D 10 6 0 0 E 0 0 8 3  7.2. ESLEIPEN-PROBLEMA cclix 8. Zeroak esleitu: 1 2 3 4 A 3 1 1 0 B 0 2 0 13 D 10 6 0 0 E 0 0 8 3 Lau zero izan dira esleituak. Beraz, soluzio optimoa lortu dugu. • (A → 4) : 4. kontratistak A eraikina altxako du. • (B → 1) : 1. kontratistak B eraikina altxako du. • (D → 3) : 3. kontratistak D eraikina altxako du. • (E → 2) : 2. kontratistak E eraikina altxako du. Kostua= cA4 + cB1 + cD3 + cE2 = 54 + 66 + 100 + 54 = 274 2 7.2.2 Maximizatze-problemak Helburua minimizatzea denetan bakarrik erabil daiteke metodo hungariarra. Prob- lemaren helburua maximizatzea balitz, aldatu egin beharko genuke metodoa er- abiltzen hasi baino lehen. Hori bai! cij koeﬁzienteek positibo izan beharko dute, esleipen-metodoaren baldintza beharrezkoa da eta. Adibidea: Lantegi batek hiru langile behar ditu. Iragarki bat bidali du egunkarira eta 5 lagun azaldu zaizkio. Bost langile horietatik hiru aukeratu beharko ditu zuzendari- ak. Horretarako hautapen- froga bat prestatu du, lan bakoitzari buruzko galderekin, eta langile bakoitzak 0-tik 10- era bitarteko puntuaketa lortu du lan bakoitzerako. Puntuaketa taulakoa da.  cclx KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 5 A 2 4 10 3 6 B 7 7 5 6 4 D 8 6 7 − 9 Laugarren langilea ez da D lana egiteko gai. Guzti honekin, lan eta lagun arteko esleipena egin behar dugu, lan bakoitza egiteko aukeratutako pertsonen gaitasuna maximizatuko delarik. Kasu honetan helburua gaitasunak maximizatzea da. Algoritmoa erabiltzen hasi baino lehen, helburua minimizatze helburu bihurtu beharko dugu, kostu- matrizea aldaketa honen arabera aldatuz. ∀i, j- rako cij ordez −cij jartzea zilegi da, baina taulako balio guztiak negatibo bihurtuko zaizkigu honen ondorioz. Positibo bihurtzeko taulako elementurik han- diena hartuko dugu, 10, eta elementu guztiei gehituko diegu. Taula honela gelditu zaigu: 1 2 3 4 5 A 8 6 0 7 4 B 3 3 5 4 6 D 2 4 3 − 1 Orain helburua minimizatzea da. Taula prest daukagu algoritmoa erabiltzen hasteko. 4. langilea D lana egiteko gai ez dela dio problemaren enuntziatuak; esleipen hori gertatuko ez dela ziurtatzeko M balioa, guk nahi adina handia, jarriko dugu taulako posizio horretan. Bestalde, problema ez da orekatua, jatorri-puntuen eta helburu-puntuen kop- urua berdina ez delako. Gezurrezko bi jatorri-puntu gehituko dizkiogu taulari; jatorri-puntu hauen kostuak zero izango dira edozein helburu-puntutarako. Bi langile eta gezurrezko bi lan hauek lotuko ditu soluzioak, eta langile horiek lanik gabe gelditu direla esan nahiko du. Horregatik da kostua zero.  7.2. ESLEIPEN-PROBLEMA cclxi 1 2 3 4 5 A 8 6 0 7 4 B 3 3 5 4 6 D 2 4 3 M 1 E 0 0 0 0 0 F 0 0 0 0 0 Orain bai metodo hungariarra erabil daitekeela esleipen optimoa ezagutzeko. 2 7.2.3 Aukerazko optimoak Zeroak esleitzeko unean, lerro bakoitzean zero bat esleitzea lortu badugu eta es- leipenak egiterakoan aukera bat baino gehiagoren artean aukeratu behar izan badugu, orduan aukerazko optimoak daude. Adibidea: Har dezagun aurreko adibideko taula, behin minimizazio helburura aldatua izan denean. Kostu-matrizeko elementu guztiak positiboak dira. Lerro bakoitzean lerroko txikiena kenduz: 1 2 3 4 5 A 8 6 0 7 4 B 0 0 2 1 3 D 1 3 2 M 0 E 0 0 0 0 0 F 0 0 0 0 0 Zutabe bakoitzean bada zeroren bat. Beraz, zeroak esleitzen has gaitezke.  cclxii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 5 A 8 6 0 7 4 B 0 0 2 1 3 D 1 3 2 M 0 E 0 0 0 0 0 F 0 0 0 0 0 Bost zero izan dira esleituak, zero bat lerroko. Algoritmoa amaitu da. • Soluzioa: A → 3, B → 1, D → 5, E → 2 eta F → 4. • Esleipen-kostua: c13 + c21 + c35 + c42 + c54 = 10 + 7 + 9 + 0 + 0 = 26 Soluzio honen arabera 2 langilea eta 4 langilea lanik gabe gelditu dira. Bigarren lerroan esleipena egiterakoan, B lana 1. lagunari esleitzeko aukera izateaz gain badago beste aukera bat: B lana 2. lagunari esleitzekoa. Bigarren aukera hartuz gero ondorengo aukerazko soluzioa lortuko genuke: 1 2 3 4 5 A 8 6 0 7 4 B 0 0 2 1 3 D 1 3 2 M 0 E 0 0 0 0 0 F 0 0 0 0 0 • Soluzioa: A → 3, B → 2, D → 5, E → 1, F → 4 • Kostua: 10 + 7 + 9 + 0 + 0 = 26 Oraingo honetan lanik gabe gelditu direnak 1. langilea eta 4. langilea dira. Modu berean, laugarren eta bosgarren lerroetatik ere aukerazko soluzioak lor daitezke, baina hauek ez dute benetazko lanen esleipenaren gain inolako eraginik izango. 2  7.3. ERABILPEN PRAKTIKOAK cclxiii 7.3 Erabilpen praktikoak 7.3.1 Ekoizpen-problema bat Lantegi batek bere ekoizpena antolatu behar du hurrengo urteko 4 hiruhilabetealdietarako. Izango duen eskaria estima dezake:  lehen hiruhilabetealdian 100 unitateko eskaria izango du, bigarrengoan 200, 150 unitatekoa hirugarrengoan eta 100 azkenen- goan. Hiruhilabetealdi bateko ekoizpen-ahalmena 120 unitatetara mugatua dago. Hiruhilabetealdi bateko eskaria ezin daiteke geroagoko hiruhilabetealdiren bate- tan zerbitzatu. Produktu- unitate bat ekoizteak 2 unitateko kostua dakarkio lante- giari. Gainera, 0.5 unitateko kostu gehigarria izango du produktu-unitate hori biltegiratzeko beharrean aurkitzen bada. Problema hau garraio-problema baten moduan planteatuko dugu. Adibide honetan lau hiruhilabetealdiak aldi berean jatorri-puntu eta helburu- puntu dira. xij erabaki-aldagaiek zera adierazten dute: j hiruhilabetealdiko es- karia zerbitzatzeko i hiruhilabetealdian sortu beharko den unitate-kopurua. Baldin i > j bada, xij oinarrian egotea ezinezkoa izango da, lehen esan baitugu hiruhi- labetealdi bateko eskaria ezin daitekeela geroagoko hiruhilabetealdiren batetan zerbitzatu. Jatorri-puntuen eskaintza hiruhilabetealdiko ekoizpen maximoa da, hau da, a1 = 120, a2 = 120, a3 = 120, a4 = 120. Eskariak berriz: b1 = 100, b2 = 200, b3 = 150, b4 = 100. Ekoizte-kostuak hauek dira: • cij = ekoizte-kostua i = j den kasuetan. • cij = ekoizte-kostua + biltegiratze-kostua i < j denetan. • cij = M i > j bada. M balio hau xij aldagaia oinarriko ez bihurtzeko behar adina handia da. Problema honi dagokion garraioaren kostu-taula hau da:  cclxiv KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA 1 2 3 4 ESKAINT ZA 1 2 2.5 3 4 120 2 M 2 2.5 3 120 3 M M 2 2.5 120 4 M M M 2 120 ESKARIA 100 200 150 100 7.3.2 Maximizatze-problema bat Lantegi batek hiru ekoizte-zentro ditu:  A, B eta D. Bere produktua sortzeak emat- en dion unitateko irabazia 110-ekoa da. Irabazi hau kalkulatzeko ekoizte-kostua eta salmenta-prezioa izan dira kontutan. Produktua hiru ekoizte- zentro horietatik lau salmenta-puntuetara garraiatzeak suposatzen dituen kostuak hauek dira: 1 2 3 4 A 30 10 25 20 B 15 25 30 10 D 20 30 15 20 Ekoizpen-zentro hauen hilabeteko ekoizte-ahalmena 2.000 unitatera mugatua dago. Salmenta-puntuen hilabeteko eskariak 1.000, 1.200, 1.500 eta 1.000 uni- tatekoak dira, hurrenez hurren. Lantegiak ahalik eta irabazi handiena lor dezan bere ekoizpena planiﬁkatzen lagunduko dion garraio-taula idatziko dugu. • Eskaintzak: a1 = 2.000, a2 = 2.000, a3 = 2.000 • Eskariak: b1 = 1.000, b2 = 1.200, b3 = 1.500, b4 = 1.000 Oraingo honetan, kostu-taulako cij balioak irabaziak dira. • cij=Ekoiztearen irabazia - Garraio-kostua Garraio-taula:  7.3. ERABILPEN PRAKTIKOAK cclxv 1 2 3 4 ESKAINT ZA A 80 100 85 90 2000 B 95 85 80 100 2000 D 90 80 95 90 2000 ESKARIA 1000 1200 1500 1000 Garraioaren algoritmoa erabili ahal izateko taulako elementuen zeinuak al- datu egin beharko ditugu, taulako balioak irabaziak eta helburua maximizatzea direlako. 7.3.3 Ordutegien esleipena Demagun bi irakasle daudela matematika lau ikasgelatan erakusteko prest. Irakasle bakoitzak bi eskola eman beharko ditu. Irakasleek ordutegiari buruzko lehen- tasunak azaldu dituzte eta beheko taulan datoz adieraziak. 10-eko puntuaketak irakasleak gehien nahi duen ordua hori dela esan nahi du eta 1- ekoak gutxien nahi duen ordua hori dela. Lehentasunen taula: 9.00 10.00 11.00 13.00 1. irakaslea 9 9 7 6 2. irakaslea 9 8 8 4 Irakasleen lehentasunak ahalik eta gehien errespetatuko diren eran banatu nahi dira eskolak. Esleipen-taula hau eraiki beharko da ordutegiak irakasleen artean banatzeko. 9.00 10.00 11.00 13.00 1. irakaslea 9 9 7 6 2. irakaslea 9 8 8 4 1. irakaslea 9 9 7 6 2. irakaslea 9 8 8 4  cclxvi KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Lerro bakoitzean posizio bat esleitzen da eta ondorioz irakasle bakoitzari bi ordutegi desberdin egokituko zaizkio. Gogoratu taula minimizatze erari egokitu behar zaiola esleipenaren algoritmoa erabiltzen hasi baino lehen. 7.4 Ariketak 1. Demagun garraio-taula hau daukagula: 1 2 3 4 ESKAINT ZA 1 6 3 2 4 30 2 7 5 4 6 60 3 9 8 6 3 40 ESKARIA 20 50 45 20 (a) Idatzi dagokion eredu lineala. (b) Eraiki ezazu garraio-eredu orekatua. (c) Ipar-mendebaldeko ertzaren metodoa erabiliz soluzio bat kalkula eza- zu. (d) Vogel-en metodoa erabiliz kalkula ezazu, baita, soluzio bat. (e) Aurreko puntuetan lorturiko soluzioen artetik hoberena har ezazu soluzio optimoa bilatzeko. 2. Garraio-problema bati dagokion garraio-taula behekoa da. M balioek gar- raio hori ezinezkoa dela esan nahi dute. 1 2 3 4 ESKAINT ZA 1 2 4 M 3 10 2 6 2 7 3 10 3 M 9 M 7 10 ESKARIA 8 6 15 6  7.4. ARIKETAK cclxvii (a) Ipar-mendebaldeko ertzaren metodoa erabiliz lortutako soluzioa eta Vogel-en metodoa erabiliz lortutakoa aldera itzazu. (b) Soluzio optimoa lor ezazu. 3. cclxiii .orriko ekoizpen-problemaren antzekoa ebatzi nahi da. Oraingoan hiruhilabetealdi bateko eskaria geroagoko beste hiruhilabetealdi batean zer- bi daiteke, eta horrelakoetan 0.60-ko zigor-kostua ezarriko da atzerapenezko hiruhilabetealdi bakoitzeko. Problema eredu lineal moduan idatz eta ebatz ezazu. 4. Igeriketa talde baten entrenatzaileak taldeko sei igerilarien artetik lau auk- eratu behar ditu txandaketa proba batean parte hartzeko. Aurretik egindako proba batean igerilari bakoitzak igeriketa estilo bakoitzean lortutako denbo- rak baditu entrenatzaileak eta denbora horiek aukeraketa egiten lagunduko diote. Denborak segundutan hartuak daude. 1 2 3 4 5 6 BIZKAR ESTILOA 36 34 33 38 37 42 BULAR ESTILOA 42 35 40 35 35 35 TXIMELETA EST. 34 29 39 29 32 40 CROLL ESTILOA 30 28 29 30 28 30 Zein lau igerilari eta bakoitza zein estilotan igerian aritzeko aukeratuko ditu entrenatzaileak txapelketan irabazle izateko aukerak ahalik eta handienak izateko? Erabil ezazu metodo hungariarra. 5. Aire- konpainia batek A hiritik B hirira 5 hegaldi egiten ditu, eta beste hainbeste itzultzeko. Hegaldien ordutegia taulakoa da. Tripulazio bakoitzak eguneko bi hegaldi burutu behar ditu eta hegaldi artean gutxienez bi orduko atsede- naldia izan behar du. Tripulazioak bai A hirian eta bai B hirian bizi daitezke.  cclxviii KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA Hegaldia Irteera A-tik Helduera B-ra 1 5.00 9.00 2 9.00 13.00 3 12.30 16.30 4 17.00 21.00 5 20.00 24.00 Hegaldia B-tik irteera A-ra itzulera 1 6.00 9.00 2 9.00 12.00 3 13.00 16.00 4 15.00 18.00 5 20.00 23.00 Zehazta ezazu tripulazio bakoitzak zein ordutako hegaldiak egin beharko dituen eta zein hiritan bizi beharko duen hegaldi arteko atsedenaldi denbo- rak minimizatzeko.  7.4. ARIKETAK cclxix 6. Datozen esleipen-taulatako elementuak irabaziak dira. Soluzio optimoa au- rki ezazu. (a) . 1 2 3 4 1 7 3 2 4 2 4 − 7 6 3 2 9 3 3 4 6 4 − 9 (b) . 1 2 3 4 5 1 4 3 6 3 7 2 12 5 4 5 2 3 9 2 2 7 10 4 6 7 9 3 5  cclxx KAPITULUA 7. GARRAIO-PROBLEMA ETA ESLEIPEN-PROBLEMA  Kapitulua 8 PAKETEAK 8.1 Sarrera Problema linealak eskuz ebazteko kalkulu matematiko asko egin behar izaten da. Lana erraztearren, zenbait konputagailu programa garatu da, eta tamaina handiko problemak ere modu errazean ebatziak izango dira. Gai honetan bi pakete aztertuko ditugu: QSB+ eta LINDO paketeak. Menu- en bitartez erabiltzen da lehenengoa eta aginduen bitartez bigarrena. Bakoitzak eskaintzen dituen aukerak banan bana aztertuko ditugu, eta adibide batzuk exeku- tatuko ditugu bakoitzak sortzen duen irteera nolakoa den ikusteko. Honakoak dira adibideen enuntziatuak: 8.1.1 Nahasketen problema Birﬁndegi batean 2 gasolina mota (A eta B) ekoizten dituzte, horretarako 3 es- entzia desberdin nahastuz. Erabil daitekeen esentzia- kopurua eta mota bakoitzeko upelaren prezioa 8.1 .taulan datoz adieraziak. A eta B gasolinak kalitate onekoak izan daitezen, nahasketak egiterakoan on- dokoak kontutan izan behar dira: • A gasolinaren %50-a gutxienez 1. esentzia da eta ezin du 2. esentzia %30- etik behera izan. • B gasolinaren 3. esentzia-kopuruak %30-etik beherakoa izan behar du. cclxxi  cclxxii KAPITULUA 8. PAKETEAK Taula 8.1: UPELA- UPELAKO ESENTZIA KOPURUA PREZIOA 1 2.000 10 2 3.000 8 3 1.000 12 A gasolinaren salneurria 40 ptakoa da upelako eta B-rena 35 ptakoa. Demagun ekoiztutako gasolina guztia saltzeko gai dela birﬁndegia. Irabaziak ahalik eta handienak izan daitezen mota bakoitzetik zenbat gasolina ekoiztu beharko den zehaztuko duen eredu lineala eraiki genuen. Ikus xxix. orria. 8.1.2 Jan-neurriaren problema Elikapen-zentro batean A, B, D eta E bitaminak kopuru egokian izango dituen jan-neurria prestatzen ari dira. Jan-neurriak ondokoak bete beharko ditu: gutx- ienez 25 mg A bitamina izan beharko ditu, B bitamina-kopuruak 25 mg eta 30 mg artean egon beharko du, D bitaminak berriz 22 mg-tik gora agertu beharko du eta gehienera jota ere 17 mg E bitamina nahi dira. Bitamina guzti horiek 4 elikagai ezberdinen bidez lor daitezke. 8.2 .taulan zera dator adierazia: elikagai gramoko dagoen A, B, D eta E bitaminen mg-kopurua eta elikagai horietariko bakoitzaren gramoko kostua. Eskatzen dena zera da: kosturik txikieneko jan- neurria aurkitu nahi da, beti ere beharrezko A, B, D eta E bitamina-kopurua ziurtatuko duelarik. (Begira xxviii. orriko eredua). 8.1.3 Garraio-problema bat Demagun herrialde batean badirela ogia ekoizten duten 2 lantegi:  A eta B. Lante- gi horietan ekoiztutako ogia 3 okindegitara garraiatzen da, hauek sal dezaten: O1, O2, O3. (Ikus ccxx. orria). Jatorri-puntuen (lantegien) eskaintzak, helburu-puntuen (okindegien) eskariak eta garraio-kostuak irudikoak dira.  8.1. SARRERA cclxxiii Taula 8.2: Elikagaien bitaminak eta kostua BITAMINAK ELIKAGAI ELIKAGAIA (mg/gr) GRAMOAREN A B D E KOSTUA 1 2 1 0 1 14 2 1 2 1 2 9 3 1 0 2 0 13 4 1 2 1 1 16 Erabaki-aldagaiak: xij = i (i = A, B) lantegitik Oj (j = 1, 2, 3) okindegira garraiatzen den ogiaren unitate-kopurua 8.1.4 Esleipen-problema bat Igeriketa talde baten entrenatzaileak taldeko sei igerilarien artetik lau aukeratu behar ditu proba batean parte hartzeko. Aurretik egindako proba batean igeri- lari bakoitzak igeriketa- estilo bakoitzean lortutako denborak baditu entrenatza- ileak eta denbora horiek aukeraketa egiten lagunduko diote. Denborak segundutan hartuak daude. 1 2 3 4 5 6 BIZKAR ESTILOA 36 34 33 38 37 42 BULAR ESTILOA 42 35 40 35 35 35 TXIMELETA EST. 34 29 39 29 32 40 CROWL ESTILOA 30 28 29 30 28 30 Zein lau igerilari eta bakoitza zein modalitatetan igerian aritzeko aukeratuko ditu entrenatzaileak txapelketan irabazle izateko aukerak ahalik eta handienak iza- teko?  cclxxiv KAPITULUA 8. PAKETEAK 8.2 QSB+ QSB+ (Quantitative Systems for Business Plus) paketearen helburua erabakiak hartzen laguntzea da, eta bide horretatik erabiltzaileak emandako optimizazio- problemak ebazten ditu. 19 moduluz osaturik dago, modulu bakoitza problema mota bat ebazteko egokitua dagoelarik. Horietariko hiru dira irakasgai honetan aztertzen diren problemak ebazteko erabiliko ditugunak: 1. Programazio lineala 2. Garraio-problemak ebazteko modulua 3. Esleipen-problemak eta bidaiariaren problema ebaztekoa Hiru horietaz gain praktikan ager daitekeen beste hainbat problema ebazteko gai da QSB+. Erabiltzaileari paketea erabilgarri gerta dakion, lehioen eta menuen bidez an- tolaturik dago. Honakoak dira eskaintzen diren aukerak: 1. Moduluak: • Programazio lineala • Programazio lineal osoa • Helburu bidezko programazioa • Programazio koadratikoa • Programazio ez-lineala • Programazio dinamikoa • Garraio-problema • Esleipen-problema eta bidaiariaren problema • Sare espezialduen eredutzea • Sare gaituen ﬂuxuaren eredutzea • Proiektu-antolaketa (PERT/CPM) • Inbentario-teoria • Inbentario-teoria 2 • Iladen teoria  8.2. QSB+ cclxxv • Ilada sistemen simulazioa • Erabakien analisia • Markov prozesuak • Denbora-serieen aurresatea • Analisi ﬁnantziarrak 2. Datu-sarrera: • Datuak sartu • Fitxategia irakurri • Datuak erakutsi • Datuak aldatu • Datuak gorde • QSB+ -etik irten 3. Soluzioa: • Problema ebatzi • Ebatzi eta taulak erakutsi • Graﬁka bidez ebatzi • Graﬁkaren neurriak ﬁnkatu • Soluzioa erakutsi • Soluzioa inprimatu • Soluzioa gorde • Azken taula inprimatu 4. Aukerak: • Koloreak • Kolorebakarra • Inprimagailua 5. Laguntza:  cclxxvi KAPITULUA 8. PAKETEAK • Moduluari buruzkoa • Interfazeari buruzkoa • Editatze-teklei buruzkoa Hona hemen adibideak ebatzi ondoren QSB+ paketeak lortutako soluzioak. Nahasketen problema Datorren taulan biltzen dira problema ebatzi ondoren lortutako datuak. Solu- tion zutabekoak dira problemaren aldagaien balio optimoak. Opportunity Cost zutabean hasierako aldagaiei dagozkien zj − cj balioak datoz. Gainontzeko hiru zutabeetan zera dator adierazia:  c bektorearen parametro bakoitzak zein tartetan egon beharko duen oinarri optimoa alda ez dadin. Parametro horietariko bakar bat aldatuko da aldi berean. |---------------------- Solution Summary for nahasket -----------------------| | 12-27-1994 14:12:47 Page: 1 of 1 | |----------------------------------------------------------------------------| | Variable | Variable | |Opportuni-| Minimum | Current | Maximum | | Number | Name | Solution | ty Cost |Obj. Coef.|Obj. Coef.|Obj. Coef.| |----------+----------+----------+----------+----------+----------+----------| | 1 | x1A | 2000 | 0 | 20 | 30 | M| | 2 | x2A | 1200 | 0 | 15.33333 | 32 | 32| | 3 | x3A | 800 | 0 | 28 | 28 | M| | 4 | x1B | 0 | 10 | -M | 25 | 35| | 5 | x2B | 1800 | 0 | 27 | 27 | 43.66666| | 6 | x3B | 200 | 0 | 0 | 23 | 23| |----------------------------------------------------------------------------| | Maximized OBJ = 174000 Iteration = 5 Elapsed CPU seconds = 0.050781 | |----------------------------------------------------------------------------| | | |----------------------------------------------------------------------------| Ondorengo taula honetan, Constraint Status zutabeak murrizketen zentzua ematen digu. Shadow Price zutabean itzal-prezioak datoz, soluzio dual optimoa, alegia. Gainontzeko hiru zutabeetan b bektorearen parametro bakoitza zein tarte- tan mugitu ahal izango den esaten zaigu, beti ere oinarri optimoa aldatuko ez delarik. Aldi berean parametro horietariko bakar bat alda daiteke.  8.2. QSB+ cclxxvii |--------------------- Constraint Summary for nahasket ----------------------| | 12-27-1994 14:12:47 Page: 1 of 1 | |----------------------------------------------------------------------------| |Constraint|Constraint| Shadow | Surplus | Minimum | Current | Maximum | | Number | Status | Price | | R. H. S. | R. H. S. | R. H. S. | |----------+----------+----------+----------+----------+----------+----------| | 1 |Tight (<)| 35 | 0 | 0.000122 | 2000 | 2500 | | 2 |Tight (<)| 27 | 0 | 1666.667 | 3000 | M | | 3 |Tight (<)| 23 | 0 | 800 | 1000 | 1571.429 | | 4 |Tight (>)| .1 | 0 | -14285.7 | 0 | 50000 | | 5 |Tight (>)| 0 | 0 | -20000 | 0 | 40000 | | 6 |Loose (>)| 0 | 40000 | -M | 0 | 40000 | |----------------------------------------------------------------------------| | Maximized OBJ = 174000 Iteration = 5 Elapsed CPU seconds = 0.050781 | |----------------------------------------------------------------------------| | | |----------------------------------------------------------------------------| Janeurriaren problema |---------------------- Solution Summary for janeurri -----------------------| | 12-27-1994 14:15:06 Page: 1 of 1 | |----------------------------------------------------------------------------| | Variable | Variable | |Opportuni-| Minimum | Current | Maximum | | Number | Name | Solution | ty Cost |Obj. Coef.|Obj. Coef.|Obj. Coef.| |----------+----------+----------+----------+----------+----------+----------| | 1 | X1 | 4.428571 | 0 | 1.250001 | 14 | 24| | 2 | X2 | 2.285714 | 0 | -11 | 9 | 16| | 3 | X3 | 5.857143 | 0 | 6.333333 | 13 | 35.5| | 4 | X4 | 8 | 0 | 9.571428 | 16 | M| |----------------------------------------------------------------------------| | Minimized OBJ = 286.7143 Iteration = 4 Elapsed CPU seconds = 0 | |----------------------------------------------------------------------------| | | |----------------------------------------------------------------------------| |--------------------- Constraint Summary for janeurri ----------------------| | 12-27-1994 14:15:06 Page: 1 of 1 | |----------------------------------------------------------------------------| |Constraint|Constraint| Shadow | Surplus | Minimum | Current | Maximum | | Number | Status | Price | | R. H. S. | R. H. S. | R. H. S. | |----------+----------+----------+----------+----------+----------+----------| | 1 |Tight (>)| 7.285714 | 0 | 17.25 | 25 | 33 | | 2 |Loose (<)| 0 | 5 | 25 | 30 | M | | 3 |Tight (>)| 6.428571 | 0 | 17 | 25 | 30 | | 4 |Tight (>)| 2.857143 | 0 | 8.333333 | 22 | 37.5 | | 5 |Tight (<)| -7 | 0 | 14.71429 | 17 | 25 | |----------------------------------------------------------------------------| | Minimized OBJ = 286.7143 Iteration = 4 Elapsed CPU seconds = 0 | |----------------------------------------------------------------------------| | | |----------------------------------------------------------------------------| Garraio-problema  cclxxviii KAPITULUA 8. PAKETEAK Hasierako soluzioa kalkulatzeko 8 metodo desberdin dago, eta horietariko edozein erabil daiteke. Soluzioaren hobekuntza kalkulatzeko MODI metodoa er- abiltzen da. Datorren taulan problemaren taula optimoa agertzen da, hau da, aldagaien balio optimoak eta helburu-funtzioaren balio optimoa. Edozein unetako garraio-taula ikus daiteke, ez garraio-taula optimoa bakarrik. |-------------------------- Solution for garraio --------------------------| | 12-27-1994 14:18:13 Page: 1 of 1 | |--------------------------------------------------------------------------| | From | To | Shipment |@ Cost/Profit | Opport. Cost | |--------------+--------------+--------------+--------------+--------------| | A | O1 | 1500 | 8 | 0 | | A | O2 | 0 | 6 | 1 | | A | O3 | 500 | 10 | 0 | | B | O1 | 0 | 10 | 3 | | B | O2 | 2000 | 4 | 0 | | B | O3 | 500 | 9 | 0 | |--------------------------------------------------------------------------| | Minimized OBJ = 29500 Iteration = 2 Elapsed CPU seconds = 0 | |--------------------------------------------------------------------------| | | |--------------------------------------------------------------------------| Esleipen-problema Problema ebazteko metodo hungariarra erabiltzen du QSB+ek. Assignment Solution for igeriketa 12-27-1994 14:22:25 Object Task Cost/Profit BIZKAR 3 33 BULAR 2 35 TXIMELETA 4 29 CROLL 5 28 Dummy 1 0 Dummy 6 0 Minimized OBJ = 125 # Iterations = 1 CPU seconds = 0 OBJECT zutabean igeriketa-estiloak (iturburu-puntuak) agertzen dira, eta TASK zutabean igeriketa-estilo bakoitzari esleitutako igerilariak (helburu- puntuak). Orain- goan ere, edozein iteraziotarako esleipen-taula lor daiteke. Aurrekoa esleipen- taula optimoa da.  8.3. LINDO cclxxix 8.3 LINDO 8.3.1 Sarrera Erabiltzaileari bere zereginetan erabakiak hartzen laguntzeko eraiki zen LINDO (Linear, INteractive, Discrete Optimizer) paketea. Honakoa izaten da paketea er- abiltzeko modua: hasteko, erabiltzaileak eskuartean duen problema lineala ere- du moduan formulatzen du, eta LINDOk eskaintzen dituen datu-sarrera agin- duen bidez eredua LINDOn sartuko du. Ondoren, ebatzi egingo du, eta lortu- tako soluzioa aztertuko du, sartu berri duen ereduaren zuzentasuna eta egokita- suna aztertzeko. Zerbait aldatu nahi izanez gero, eredua eguneratu eta ebatziko du. Erabiltzaileak prozesua errepikatuko du behar bezain beste aldiz. Aginduen bidez erabiltzen da LINDO, ez menuen bidez. Agindu multzoa nahiko zabala da eta edozein unetan agindu horietariko edozein erabil daiteke. Honakoak dira guztiak: 1. Informazioa • CAT → Aginduen kategoriak zerrendatzen ditu. • COM → Aginduak zerrendatzen ditu • HELP → Laguntza eskaintzen du • LOCAL → Bertako instalazioari buruzko informazioa • TIME → Erabilitako konputagailu-denbora erakusten du 2. Sarrera • LEAVE → Aurretik egindako TAKE-aren eragina desegiten du • MAX → Eredua sartzen hasteko • MIN → Eredua sartzen hasteko • RDBC → (Retrieve Data Base Column) Aurreko soluzioa atzitu • RETR → (RETRieve) Problema ﬁtxategi batetik atzitu • RMPS → (Retrieve MPS) MPS formatuko ﬁtxategia atzitu • TAKE → Terminaleko sarreraz osaturiko ﬁtxategia atzitu 3. Erakutsi  cclxxx KAPITULUA 8. PAKETEAK • BPICTURE → (Base PICTURE) Uneko oinarria marraztu • CPRI → (Column PRInt) Zutabeari buruzko informazioa • LOOK → Problemaren zati bat ikusteko • NONZEROES → Soluzioan zero ez diren aldagaiak erakutsi • PICTURE → Matrizea marraztu • RANGE → Heinaren azterketa erakutsi • RPRI → (Row PRInt) Lerroari buruzko informazioa eman • SHOCOLUMN → (SHOw COLUMN) Problemaren zutabe bat er- akutsi • SOLUTION → Soluzioa erakutsi • TABLEAU → Uneko taula marraztu • TITLE → Problemaren izenburua erakutsi edo aldatu 4. Irteera • DIVERT → Irteera ﬁtxategi batera zuzendu • RVRT → (ReVeRT) Irteera terminalera zuzendu • SAVE → Uneko problema ﬁtxategi batean gorde • SDBC → (Save in Data Base format a Column report) Soluzioa gorde datu-base formatoa erabiliz • SMPS → (Save MPS) Uneko problema MPS formatoa erabiliz gorde 5. Soluzioa • GO → Problema ebatzi • PIVOT → Simplex metodoaren pauso bat eman 6. Problema editatu • ALTER → Problemako osagaiak aldatzeko • APPC → (APPend Column) Ereduari zutabe bat gehitu • DEL → Zehaztutako murrizketa ezabatzeko • EDIT → Editorean sartu  8.3. LINDO cclxxxi • EXT → (EXTend) Problemari murrizketak erantsi • FREE → Aldagaia zeinuz murriztugabea dela esateko • SLB → (Simple Lower Bound) Aldagai batentzat behe-bornea • SUB → (Simple Upper Bound) Aldagai batentzat goi-bornea 7. Programa osoak, koadratikoak eta parametrikoak • BIP → (Bound IP) Programa osorako bornea ﬁnkatu • GIN → (General INteger) Aldagai osoak zehazteko (0,1 ez direnean) • INT → 0 edo 1 baliodun aldagai osoak zehazteko • IPTOL → (IP TOLerance) Soluzio optimorako programa osoaren jasanko- rtasuna ﬁnkatu • PARA → Programazio parametrikoa • POSD → (POSitive Deﬁniteness) Positibotasuna egiaztatu • QCP → (QuadratiC Programming) Programazio koadratikoa • TITAN → (TIghTen AN ip) • BATCH → Batch moduan exekutatzeko • PAGE → Orriaren edota pantailaren tamaina ﬁnkatzeko • PAUSE → Teklatu-ekintzaren zain egon • TERSE → Elkarrizketa-modua modu laburrera eraldatu • VERBOSE → Elkarrizketa-modua modu elkarrizketatsura eraldatu • WIDTH → Terminalaren zabalera ﬁnkatu 8. Erabiltzailearen azpirrutinak • USER → Erabiltzailearen azpirrutinari deia 9. Beste zenbait agindu • BUG → Erroreren batekin topo eginez gero zer egin • DEBUG → Eredu bideraezina arazten laguntzeko • INVERT → Uneko oinarriaren alderantzizkoa kalkulatzeko • SET → Soluzio parametrikoak ﬁnkatu  cclxxxii KAPITULUA 8. PAKETEAK • STAT → Estatistikak erakutsi • TITL → Uneko ereduaren izenburua ﬁnkatu edo erakutsi 10. Irten • QUIT → Irten Aukerak zabalak direla ikusten da. Hala ere, LINDO nola erabiltzen den eta lortzen den irteera zein den ikusteko aurreko adibideak ebatziko ditugu, horre- tarako agindu sinpleenak besterik erabiliko ez ditugularik. Ikus ditzagun, ba, paketearen irteerak: Nahasketen problema Hasteko, problema ebazteko erabiliko dugun eredu lineala sartzen dugu. Honakoa da. MAX 30 X1A + 32 X2A + 28 X3A + 25 X1B + 27 X2B + 23 X3B SUBJECT TO 2) X1A + X1B <= 2000 3) X2A + X2B <= 3000 4) X3A + X3B <= 1000 5) 50 X1A - 50 X2A - 50 X3A >= 0 6) - 30 X1A + 70 X2A - 30 X3A >= 0 7) 30 X1B + 30 X2B - 70 X3B >= 0 END Ereduan esplizituki adierazia ez badago ere, LINDOk aldagaiak ez-negatibotzat hartzen ditu. LINDOk problema ebatz dezan, GO agindua erabiliko dugu. Horren ondorioz, behar beste iterazio burutuko du, soluzio optimoa lortu arte. Ondoren datorrena, soluzio optimoa lortu ondoren emandako emaitza da. Bertan, soluzio optimoa lortzeko 5 iterazio burutu behar izan duela esaten zaigu. Soluzio optimo horretan helburu-funtzioak hartutako balio optimoa 174.000-koa da. Azkenik, soluzio optimoa dator. VALUE zutabean problemaren aldagaiek hartutako balio optimoak agertzen dira, eta SLACK OR SURPLUS zutabeetan nasaitze-aldagaien balioak. REDUCED COST zutabekoak taularen zj −cj balioak dira eta DUAL PRICES zutabekoak problema dualaren aldagaien balio optimoak. LP OPTIMUM FOUND AT STEP 5  8.3. LINDO cclxxxiii OBJECTIVE FUNCTION VALUE 1) 174000.00 VARIABLE VALUE REDUCED COST X1A 2000.000000 .000000 X2A 1200.000000 .000000 X3A 800.000000 .000000 X1B .000000 10.000000 X2B 1800.000000 .000000 X3B 200.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 35.000000 3) .000000 27.000000 4) .000000 23.000000 5) .000000 -.100000 6) .000000 .000000 7) 40000.000000 .000000 Ondoren, LINDOk ea sentikortasun analisia egin nahi dugun galdetuko digu. Baietz erantzunez gero, honakoa erakutsiko digu.  cclxxxiv KAPITULUA 8. PAKETEAK NO. ITERATIONS= 5 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1A 30.000000 INFINITY 10.000000 X2A 32.000000 .000000 16.666670 X3A 28.000000 INFINITY .000000 X1B 25.000000 10.000000 INFINITY X2B 27.000000 16.666670 .000000 X3B 23.000000 .000000 23.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 2000.000000 500.000000 2000.000000 3 3000.000000 INFINITY 1333.333000 4 1000.000000 571.428600 200.000000 5 .000000 50000.000000 14285.710000 6 .000000 40000.000000 20000.000000 7 .000000 40000.000000 INFINITY Sentikortasun-analisi honetan helburu-funtzioaren koeﬁzienteen aldaketa eta b baliabide- bektorearen balioen aldaketa aztertzen dira. Aldi berean balio hori- etariko bakar bat aldatzen dela suposatu behar da. OBJ COEFFICIENT RANGES atalean helburu-funtzioaren koeﬁzienteen al- daketa aztertzen da. VARIABLE zutabekoak dira problemaren aldagaiak eta CUR- RENT COEF zutabekoak une honetako balioak. Gainontzeko bi zutabeek adier- azten dute balio hori zenbateraino igo edo jaitsi daitekeen oinarrian eraginik izan gabe. ALLOWABLE INCREASE zutabean balioa zenbateraino igo daitekeen esaten zaigu, eta ALLOWABLE DECREASE zutabean zenbateraino jaitsi daite- keen. RIGHTHAND SIDE RANGES atalean baliabide-bektorearen balioak aztertzen dira. Hemen zutabeek aurreko ataleko esanahi berbera dute, hau da, une honetako balioa eta balio horiek zenbateraino igo edo jaitsi daitezkeen, beti ere, aldaketak banaka-banaka gertatuz gero, noski. Edozein unetan taulako balio guztiak ikusi nahiko bagenitu, TABLE agindua erabiliko genuke. Orain erabiliz gero, taula optimoa lortuko dugu, oso osorik. THE TABLEAU ROW (BASIS) X1A X2A X3A X1B X2B 1 ART .000 .000 .000 10.000 .000 2 X1A 1.000 .000 .000 1.000 .000  8.3. LINDO cclxxxv 3 X2B .000 .000 .000 -.600 1.000 4 X3B .000 .000 .000 -.400 .000 5 X2A .000 1.000 .000 .600 .000 6 X3A .000 .000 1.000 .400 .000 7 SLK 7 .000 .000 .000 -20.000 .000 ROW X3B SLK 2 SLK 3 SLK 4 SLK 5 SLK 6 1 .000 35.000 27.000 23.000 .100 .000 2 .000 1.000 .000 .000 .000 .000 3 .000 -.600 1.000 .000 -.006 .010 4 1.000 -.400 .000 1.000 -.014 -.010 5 .000 .600 .000 .000 .006 -.010 6 .000 .400 .000 .000 .014 .010 7 .000 10.000 30.000 -70.000 .800 1.000 ROW SLK 7 1 .00 .17E+06 2 .000 2000.000 3 .000 1800.000 4 .000 200.000 5 .000 1200.000 6 .000 800.000 7 1.000 40000.000 Janeurriaren problema Ebatz dezagun orain janeurriaren problema. Eredu lineala sartuko dugu lehenik. MIN 14 X1 + 9 X2 + 13 X3 + 16 X4 SUBJECT TO 2) 2 X1 + X2 + X3 + X4 >= 25 3) X1 + 2 X2 + 2 X4 <= 30 4) X1 + 2 X2 + 2 X4 >= 25 5) X2 + 2 X3 + X4 >= 22 6) X1 + 2 X2 + X4 <= 17 END  cclxxxvi KAPITULUA 8. PAKETEAK Honakoa da hasierako taula. THE TABLEAU ROW (BASIS) X1 X2 X3 X4 SLK 2 1 ART 14.000 9.000 13.000 16.000 .000 2 SLK 2 -2.000 -1.000 -1.000 -1.000 1.000 3 SLK 3 1.000 2.000 .000 2.000 .000 4 SLK 4 -1.000 -2.000 .000 -2.000 .000 5 SLK 5 .000 -1.000 -2.000 -1.000 .000 6 SLK 6 1.000 2.000 .000 1.000 .000 ART 6 ART -3.000 -4.000 -3.000 -4.000 1.000 ROW SLK 3 SLK 4 SLK 5 SLK 6 1 .000 .000 .000 .000 .000 2 .000 .000 .000 .000 -25.000 3 1.000 .000 .000 .000 30.000 4 .000 1.000 .000 .000 -25.000 5 .000 .000 1.000 .000 -22.000 6 .000 .000 .000 1.000 17.000 ART 6 .000 1.000 1.000 .000 -72.000 Beharrezko iterazio guztiak, 4, burutu ondoren, honakoa da lortutako soluzio optimoa. LP OPTIMUM FOUND AT STEP 4 OBJECTIVE FUNCTION VALUE 1) 286.71430 VARIABLE VALUE REDUCED COST X1 4.428571 .000000 X2 2.285714 .000000 X3 5.857143 .000000 X4 8.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 -7.285714 3) 5.000000 .000000 4) .000000 -6.428571 5) .000000 -2.857143 6) .000000 7.000000  8.3. LINDO cclxxxvii Ikus dezagun sentikortasun-analisiaren emaitza. NO. ITERATIONS= 4 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 14.000000 10.000000 12.750000 X2 9.000000 7.000000 20.000000 X3 13.000000 22.500000 6.666667 X4 16.000000 INFINITY 6.428571 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 25.000000 8.000000 7.750000 3 30.000000 INFINITY 5.000000 4 25.000000 5.000000 8.000000 5 22.000000 15.500000 13.666670 6 17.000000 8.000000 2.285714 Azken taula, taula optimoa alegia, hau da. THE TABLEAU ROW (BASIS) X1 X2 X3 X4 SLK 2 1 ART .000 .000 .000 .000 7.286 2 X3 .000 .000 1.000 .000 -.143 3 SLK 3 .000 .000 .000 .000 .000 4 X4 .000 .000 .000 1.000 .000 5 X1 1.000 .000 .000 .000 -.571 6 X2 .000 1.000 .000 .000 .286 ROW SLK 3 SLK 4 SLK 5 SLK 6 1 .000 6.429 2.857 7.000 -286.714 2 .000 .286 -.429 .000 5.857 3 1.000 1.000 .000 .000 5.000 4 .000 -1.000 .000 -1.000 8.000 5 .000 .143 .286 .000 4.429 6 .000 .429 -.143 1.000 2.286 Garraio-problema Problema honi dagokion eredu lineala hau da. MIN 8 XA1 + 6 XA2 + 10 XA3 + 10 XB1 + 4 XB2 + 9 XB3 SUBJECT TO  cclxxxviii KAPITULUA 8. PAKETEAK 2) XA1 + XA2 + XA3 <= 2000 3) XB1 + XB2 + XB3 <= 2500 4) XA1 + XB1 >= 1500 5) XA2 + XB2 >= 2000 6) XA3 + XB3 >= 1000 END LINDOk lortutako soluzio optimoa honakoa da. LP OPTIMUM FOUND AT STEP 4 OBJECTIVE FUNCTION VALUE 1) 29500.000 VARIABLE VALUE REDUCED COST XA1 1500.000000 .000000 XA2 .000000 1.000000 XA3 500.000000 .000000 XB1 .000000 3.000000 XB2 2000.000000 .000000 XB3 500.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 .000000 3) .000000 1.000000 4) .000000 -8.000000 5) .000000 -5.000000 6) .000000 -10.000000 Azkenik, sentikortasun-analisiaren emaitza aztertuko dugu. NO. ITERATIONS= 4 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE XA1 8.000000 3.000000 8.000000 XA2 6.000000 INFINITY 1.000000 XA3 10.000000 1.000000 1.000000 XB1 10.000000 INFINITY 3.000000 XB2 4.000000 1.000000 5.000000 XB3 9.000000 1.000000 1.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 2000.000000 INFINITY .000000  8.3. LINDO cclxxxix 3 2500.000000 500.000000 .000000 4 1500.000000 .000000 1500.000000 5 2000.000000 .000000 500.000000 6 1000.000000 .000000 500.000000 8.3.2 Sentikortasun-analisia Aurreko adibideetan ikusi bezala, LINDOk problema lineal bat ebazten duen bakoitzean sentikortasun- analisia egin nahi al duzun galdetzen du. Hala ere, sentikortasun- analisi hori nahiko mugaturik dago, aldi berean koeﬁziente bakar bat aldatzen deneko kasua besterik ez baitu aztertzen. Guri zenbaitetan koeﬁziente bat baino gehiago aldi berean aldatzen direneko kasua aztertzea interesatuko zaigu. Horrelakoetan beste modu batera egin beharko dugu aipatutako analisia. Oraingoan ere iterazio-kopuru handia aurreztuko dugu, problema ez dugulako hasieratik ebatziko. Ebatzitako problemaren soluzio optimoa LINDOren SDBC aginduaren bidez gordeko dugu. Honek datu-base moduko ﬁtxategia sortzen du, eta RDBC aginduaren bidez gordetako soluzioa jaso ahal izango dugu. Soluzio honetatik abiatuko gara, eta egin beharreko aldaketa egin ondoren problema ebatziko dugu. Adibide baten bidez aldaketa posible guztien sentikortasun-analisia egingo dugu. Adibidea txikia izateagatik ez da hain garbi ikusten iterazio-kopuru han- dia aurrezten dela, baina pentsa praktikan problemek aldagai-kopuru handia eta murrizketa-kopuru handia izaten dutela. Hasteko problema lineal bat ebatziko dugu, eta aldaketa guztiak problema honi egingo dizkiogu. MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 4 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 9 END  ccxc KAPITULUA 8. PAKETEAK LINDOri GO aginduaren bidez eredua ebazteko esango diogu. Honakoa da lortzen duen soluzio optimoa. LP OPTIMUM FOUND AT STEP 5 OBJECTIVE FUNCTION VALUE 1) 31.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 3.000000 X3 1.500000 .000000 X4 2.500000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 2.000000 .000000 4) .000000 2.000000 NO. ITERATIONS= 5 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 2.000000 INFINITY X2 7.000000 3.000000 INFINITY X3 4.000000 4.000000 .800000 X4 8.000000 4.000000 4.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 5.000000 1.000000 3 2.000000 2.000000 INFINITY 4 9.000000 3.000000 5.000000 Demagun orain baliabide-bektorean aldaketak gertatu direla. Aldaketa gertatu ondoren problemak izango duen soluzio optimoa jakin nahi dugu. Hori jakiteko modurik azkarrena, aldaketa gertatu aurreko soluzio optimoa berreskuratu eta LINDOri aldaketen berri ematea da. Aurreko soluzio optimoa jasotzeko RDBC agindua erabiliko dugu. Aldaketak sartu eta LOOK ALL aginduaren bidez eredua ikusiko dugu.  8.3. LINDO ccxci MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 7 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 8 END GO aginduaren bidez eredua ebatziko dugu. Begira, iterazio bat besterik ez duela behar izan soluzio optimoa lortzeko. LP OPTIMUM FOUND AT STEP 1 OBJECTIVE FUNCTION VALUE 1) 35.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 3.000000 X3 6.500000 .000000 X4 .500000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 5.000000 .000000 4) .000000 2.000000 NO. ITERATIONS= 1 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 2.000000 INFINITY X2 7.000000 3.000000 INFINITY X3 4.000000 4.000000 .800000 X4 8.000000 4.000000 4.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 7.000000 1.000000 4.333333 3 2.000000 5.000000 INFINITY 4 8.000000 13.000000 1.000000 Baliabide-bektorean beste aldaketa bat gertatu dela eman dezagun. Honela gelditu zaigu eredu lineala.  ccxcii KAPITULUA 8. PAKETEAK MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 3 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 7 END Aldaketaren ondorioz ez da bideragarritasunik galdu, eta oinarriak optimo iza- ten jarraitzen du. Azken taula nola gelditu den jakin nahi izanez gero, TABLE agindua erabiliko genuke. Burututako iterazio-kopurua zero da. Soluzio optimoa hau da. LP OPTIMUM FOUND AT STEP 0 OBJECTIVE FUNCTION VALUE 1) 25.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 3.000000 X3 1.000000 .000000 X4 2.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 1.000000 .000000 4) .000000 2.000000 NO. ITERATIONS= 0 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 2.000000 INFINITY X2 7.000000 3.000000 INFINITY X3 4.000000 4.000000 .800000 X4 8.000000 4.000000 4.000000  8.3. LINDO ccxciii RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 3.000000 4.000000 .666667 3 2.000000 1.000000 INFINITY 4 7.000000 2.000000 4.000000 Orain, ereduaren kostu-bektorean gertatutako aldaketen sentikortasun-analisia egingo dugu. MAX 3 X1 + 6 X2 + 3 X3 + 5 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 4 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 9 END Iteraziorik burutu gabe lortzen da soluzio optimoa. LP OPTIMUM FOUND AT STEP 0 OBJECTIVE FUNCTION VALUE 1) 22.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 1.000000 X3 1.500000 .000000 X4 2.500000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 2.000000 .000000 4) .000000 1.000000 Kostu-bektorean gertatutako honako aldaketak eragindakoak azter ditzagun. MAX 6 X1 + 6 X2 + 6 X3 + 4 X4 SUBJECT TO 2) 2 X1 + 2X2 + X3 + X4 <= 4 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 9 END  ccxciv KAPITULUA 8. PAKETEAK Honakoa da lortzen den soluzio optimoa. LP OPTIMUM FOUND AT STEP 1 OBJECTIVE FUNCTION VALUE 1) 29.000000 VARIABLE VALUE REDUCED COST X1 .000000 6.000000 X2 .000000 6.000000 X3 4.000000 .000000 X4 .000000 2.000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 6.000000 3) 2.000000 .000000 4) 5.000000 .000000 NO. ITERATIONS= 1 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 6.000000 6.000000 INFINITY X2 6.000000 6.000000 INFINITY X3 6.000000 INFINITY 2.000000 X4 4.000000 2.000000 INFINITY RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 5.000000 2.000000 3 2.000000 2.000000 INFINITY 4 9.000000 INFINITY 5.000000 Hasierako ereduari murrizketa bat erantsi nahi badiogu, LINDOren EXT agin- dua erabiliko dugu. Murrizketa berria gehituta, hau da eredu lineala. MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 4 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 9 5) 4 X1 + X2 + 2 X3 + X4 <= 6 END TABLE aginduaren bidez taula ikus dezakegu.  8.3. LINDO ccxcv THE TABLEAU ROW (BASIS) X1 X2 X3 X4 SLK 2 1 ART 2.000 3.000 .000 .000 2.000 2 X3 2.500 1.500 1.000 .000 1.500 3 SLK 3 .000 1.000 .000 .000 1.000 4 X4 -.500 .500 .000 1.000 -.500 5 SLK 5 -.500 -2.500 .000 .000 -2.500 ART 5 ART 2.000 3.000 .000 .000 2.000 ROW SLK 3 SLK 4 SLK 5 1 .000 2.000 .000 31.000 2 .000 -.500 .000 1.500 3 1.000 .000 .000 2.000 4 .000 .500 .000 2.500 5 .000 .500 1.000 .500 Taula horren azken zutabeak aldagaien soluzio optimoa eta helburu-funtzioaren balio optimoa ematen ditu, eta ikus daitekeenez, aldagaiek balio positiboak hartzen dituzte. Beraz, ez da bideragarritasun primala galdu, eta soluzio berria lortzeko ez dugu iteraziorik burutu beharko. LP OPTIMUM FOUND AT STEP 0 OBJECTIVE FUNCTION VALUE 1) 31.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 3.000000 X3 1.500000 .000000 X4 2.500000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 2.000000 .000000 4) .000000 2.000000 5) .500000 .000000  ccxcvi KAPITULUA 8. PAKETEAK NO. ITERATIONS= 0 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 2.000000 INFINITY X2 7.000000 3.000000 INFINITY X3 4.000000 4.000000 .800000 X4 8.000000 4.000000 4.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 .200000 1.000000 3 2.000000 2.000000 INFINITY 4 9.000000 3.000000 1.000000 5 6.000000 INFINITY .500000 Beste murrizketa desberdin bat erantsiko diogu ereduari. MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 <= 4 3) 2 X1 + X2 + X3 + X4 >= 2 4) X1 + 3 X2 + X3 + 3 X4 <= 9 5) 2 X1 + X2 + X3 + 2 X4 <= 5 END Hasierako taula ondoren datorrena da. Bideragarritasun primala galdu da, azken zutabean -1.5 balioek adierazi bezala. THE TABLEAU ROW (BASIS) X1 X2 X3 X4 SLK 2 1 ART 2.000 3.000 .000 .000 2.000 2 X3 2.500 1.500 1.000 .000 1.500 3 SLK 3 .000 1.000 .000 .000 1.000 4 X4 -.500 .500 .000 1.000 -.500 5 ART .500 -1.500 .000 .000 -.500 ART 5 ART .500 -1.500 .000 .000 -.500 ROW SLK 3 SLK 4 SLK 5 1 .000 2.000 .000 31.000 2 .000 -.500 .000 1.500 3 1.000 .000 .000 2.000 4 .000 .500 .000 2.500 5 .000 -.500 1.000 -1.500 ART 5 .000 -.500 1.000 -1.500  8.3. LINDO ccxcvii Iterazioak burutuz, LP OPTIMUM FOUND AT STEP 3 OBJECTIVE FUNCTION VALUE 1) 28.000000 VARIABLE VALUE REDUCED COST X1 .000000 3.000000 X2 1.000000 .000000 X3 .000000 .000000 X4 2.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 1.000000 3) 1.000000 .000000 4) .000000 1.000000 5) .000000 2.000000 NO. ITERATIONS= 3 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 3.000000 INFINITY X2 7.000000 3.000000 3.000000 X3 4.000000 1.000000 1.000000 X4 8.000000 1.500000 3.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 3.000000 .000000 3 2.000000 1.000000 INFINITY 4 9.000000 .000000 3.000000 5 5.000000 1.500000 .000000 Oraingoan aldagai berri bat erantsiko diogu ereduari. Hori APPC aginduari esker lortuko dugu. MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 + 6 X5 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 + 2 X5 <= 4 3) 2 X1 + X2 + X3 + X4 + 2 X5 >= 2 4) X1 + 3 X2 + X3 + 3 X4 + 2 X5 <= 9 END  ccxcviii KAPITULUA 8. PAKETEAK Aldagai berria erantsi ondorengo ereduaren hasierako taula honakoa da. THE TABLEAU ROW (BASIS) X1 X2 X3 X4 X5 1 ART 2.000 3.000 .000 .000 2.000 2 X3 2.500 1.500 1.000 .000 2.000 3 SLK 3 .000 1.000 .000 .000 .000 4 X4 -.500 .500 .000 1.000 .000 ART 4 ART 2.000 3.000 .000 .000 2.000 ROW SLK 2 SLK 3 SLK 4 1 2.000 .000 2.000 31.000 2 1.500 .000 -.500 1.500 3 1.000 1.000 .000 2.000 4 -.500 .000 .500 2.500 Soluzio optimoa iteraziorik burutu gabe lortzen da. Aurreko taulan ere ikus zitekeen x5 aldagaia gehitzeak ez duela bideragarritasun dualaren gain eraginik izan. LP OPTIMUM FOUND AT STEP 0 OBJECTIVE FUNCTION VALUE 1) 31.000000 VARIABLE VALUE REDUCED COST X1 .000000 2.000000 X2 .000000 3.000000 X3 1.500000 .000000 X4 2.500000 .000000 X5 .000000 2.000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 2.000000 3) 2.000000 .000000 4) .000000 2.000000  8.3. LINDO ccxcix NO. ITERATIONS= 0 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 2.000000 INFINITY X2 7.000000 3.000000 INFINITY X3 4.000000 4.000000 .800000 X4 8.000000 4.000000 4.000000 X5 6.000000 2.000000 INFINITY RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 5.000000 1.000000 3 2.000000 2.000000 INFINITY 4 9.000000 3.000000 5.000000 Ea beste aldagai hau gehituz gero zer gertatzen den. MAX 4 X1 + 7 X2 + 4 X3 + 8 X4 + 10 X5 SUBJECT TO 2) 2 X1 + 2 X2 + X3 + X4 + X5 <= 4 3) 2 X1 + X2 + X3 + X4 + 2 X5 >= 2 4) X1 + 3 X2 + X3 + 3 X4 + X5 <= 9 END Hasierako taula. THE TABLEAU ROW (BASIS) X1 X2 X3 X4 X5 1 ART 2.000 3.000 .000 .000 -6.000 2 X3 2.500 1.500 1.000 .000 1.000 3 SLK 3 .000 1.000 .000 .000 -1.000 4 X4 -.500 .500 .000 1.000 .000 ART 4 ART 2.000 3.000 .000 .000 -6.000 ROW SLK 2 SLK 3 SLK 4 1 2.000 .000 2.000 31.000 2 1.500 .000 -.500 1.500 3 1.000 1.000 .000 2.000 4 -.500 .000 .500 2.500 Oraingoan z5 −c5 = −6 < 0 negatibo egin zaigu. Aurreko taula ez da optimo.  ccc KAPITULUA 8. PAKETEAK LP OPTIMUM FOUND AT STEP 2 OBJECTIVE FUNCTION VALUE 1) 45.000000 VARIABLE VALUE REDUCED COST X1 .000000 16.000000 X2 .000000 13.000000 X3 .000000 6.000000 X4 .000000 2.000000 X5 4.000000 .000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 10.000000 3) 6.000000 .000000 4) 5.000000 .000000 NO. ITERATIONS= 2 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 16.000000 INFINITY X2 7.000000 13.000000 INFINITY X3 4.000000 6.000000 INFINITY X4 8.000000 2.000000 INFINITY X5 10.000000 INFINITY 2.000000 RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 5.000000 3.000000 3 2.000000 6.000000 INFINITY 4 9.000000 INFINITY 5.000000 Amaitzeko, koeﬁziente-teknologikoen matrizean gertatutako aldaketak azter- tuko ditugu. Oinarriko ez den x2 aldagaiaren koeﬁzienteak aldatu direla suposatuko dugu. Aldi berean, helburu-funtzioan x2-ri dagokion koeﬁzientea ere aldatu dela suposatuko dugu. MAX 4 X1 + 9 X2 + 4 X3 + 8 X4 SUBJECT TO 2) 2 X1 + X2 + X3 + X4 <= 4 3) 2 X1 + 2 X2 + X3 + X4 >= 2 4) X1 + X2 + X3 + 3 X4 <= 9 END Hasierako taula honakoa da.  8.3. LINDO ccci THE TABLEAU ROW (BASIS) X1 X2 X3 X4 SLK 2 1 ART 2.000 -5.000 .000 .000 2.000 2 X3 2.500 1.000 1.000 .000 1.500 3 SLK 3 .000 -1.000 .000 .000 1.000 4 X4 -.500 .000 .000 1.000 -.500 ART 4 ART 2.000 -5.000 .000 .000 2.000 ROW SLK 3 SLK 4 1 .000 2.000 31.000 2 .000 -.500 1.500 3 1.000 .000 2.000 4 .000 .500 2.500 Soluzio optimoa. LP OPTIMUM FOUND AT STEP 2 OBJECTIVE FUNCTION VALUE 1) 41.000000 VARIABLE VALUE REDUCED COST X1 .000000 14.000000 X2 4.000000 .000000 X3 .000000 5.000000 X4 .000000 1.000000 ROW SLACK OR SURPLUS DUAL PRICES 2) .000000 9.000000 3) 6.000000 .000000 4) 5.000000 .000000 NO. ITERATIONS= 2 RANGES IN WHICH THE BASIS IS UNCHANGED: OBJ COEFFICIENT RANGES VARIABLE CURRENT ALLOWABLE ALLOWABLE COEF INCREASE DECREASE X1 4.000000 14.000000 INFINITY X2 9.000000 INFINITY 1.000000 X3 4.000000 5.000000 INFINITY X4 8.000000 1.000000 INFINITY RIGHTHAND SIDE RANGES ROW CURRENT ALLOWABLE ALLOWABLE RHS INCREASE DECREASE 2 4.000000 5.000000 3.000000  cccii KAPITULUA 8. PAKETEAK 3 2.000000 6.000000 INFINITY 4 9.000000 INFINITY 5.000000 Bada sarreran aipatu eta gero komentatu ez dugun beste zenbait agindu interes- garri. Problemaren formulazioa gordetzeko, adibidez, SAVE agindua erabiltzen da, eta formulazioa aldatzeko ALTER agindua. Bestalde, esan beharra dago, LINDOren bidez ebatz daitezkeela beste mo- tatako problemak ere, halanola problema osoak, koadratikoak eta parametrikoak.
