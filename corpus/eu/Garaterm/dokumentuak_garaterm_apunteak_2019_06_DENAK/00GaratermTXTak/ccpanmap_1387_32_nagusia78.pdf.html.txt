


Gaien Aurkibidea
1
Osoko programazioa
vii
1.1
Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
vii
1.2
Osoko programazio linealaren aplikazioak . . . . . . . . . . . . . viii
1.3
Soluzio graﬁkoa. Adarkatze- eta bornatze-algoritmoa . . . . . . .
xii
1.4
Osoko problemak ebazteko metodo algebraikoak . . . . . . . . .
xv
1.4.1
Adarkatze- eta bornatze-metodoa
. . . . . . . . . . . . . xvii
1.4.2
Adarkatze- eta bornatze-algoritmoa . . . . . . . . . . . . xviii
1.4.3
Konbergentzia azkartzea . . . . . . . . . . . . . . . . . . xxii
1.5
0-1 osoko programazioa
. . . . . . . . . . . . . . . . . . . . . . xxiii
1.5.1
0-1 problematarako adarkatze- eta bornatze-algoritmoa . . xxv
1.5.2
Bidaiariaren problemarako adarkatze- eta bornatze-algoritmoaxxvii
1.6
Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxiv
2
PROGRAMAZIO DINAMIKOA
xxxvii
2.1
Sarrera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxxvii
2.2
Erabaki-prozesu sekuentzialak . . . . . . . . . . . . . . . . . . . xxxviii
2.3
Bellman-en optimaltasun printzipioa. Politikak eta azpipolitikak .
xl
2.4
Funtzio errekurtsiboa . . . . . . . . . . . . . . . . . . . . . . . .
xl
2.5
Problema dinamikoen planteamendu eta ebazpena . . . . . . . . . xlii
2.5.1
Dilijentziaren problema
. . . . . . . . . . . . . . . . . . xlii
2.5.2
Aholkularien banaketaren problema bat. . . . . . . . . . . xlv
2.5.3
Ekoizpenaren eta inbentarioen problemak . . . . . . . . . xlviii
2.5.4
Motxilaren problema . . . . . . . . . . . . . . . . . . . .
liv
2.6
Oharrak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
lix
2.7
Ariketak . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
lix
v

vi
GAIEN AURKIBIDEA

Kapitulua 1
Osoko programazioa
1.1
Sarrera
Praktikan agertzen diren problema asko ezin dira ebatzi programazio lineala bakar-
rik erabiliz, hain zuzen ere, aldagaien balioak osokoak izan behar dutelako. Horre-
tarako, osoko programazioaren teknikak garatu dira eta, ikusiko dugunez, osoko
problemaren soluzio optimoa lortzeko programazio linealeko zenbait problema
ebatzi behar da. Kalkulu kopurua handia denez teknika hauek era murriztuan er-
abili dira baina, gaur egun konputagailuen abiaduraren igoeragatik tamaina erdiko
problemak ebatz daitezke eta seguraski etorkizunean erabilpena zabalduko da.
Osoko programazioko eredua programazio linealekoa bezalakoa da baina zen-
bait aldagai edo aldagai guztiak osokoak izateko murrizketarekin.
Aldagai errealeko eredu linealak ebazteko ezagutzen dugun simplex algorit-
moa, soluzioen multzoaren ganbiltasunean oinarritzen da. Multzo ganbilen mutur-
puntu kopurua ﬁnitua da eta, frogatu dugunez, soluzio optimoa horietariko mutur-
puntu batean aurkitzen da.
Aldagaiak osoko izateko murrizketak soluzioen multzoa murrizten badu ere
(soluzioen kopurua ﬁnitua da, bideragarritasun eskualdea bornegabea denean ezik),
problemaren soluzioaren lorpena zaildu egiten da. Hori dela eta, gai honetan azter-
tuko ditugun metodoak ez dira simplex metodoa bezain eraginkorrak.
Aldagaien balioak kontuan hartuz osoko eredu linealak hiru motakoak izan
daitezke.
• Osoko programazio mistoan aldagaiak bai osoko eta bai erreal izan daitezke.
• Osoko programazio hutsaren aldagai guztiak osoko izango dira.
vii

viii
KAPITULUA 1. OSOKO PROGRAMAZIOA
• 0-1 osoko programazioaren ereduetan aldagai guztiak bitarrak dira.
1.2
Osoko programazio linealaren aplikazioak
Praktikan, egoera askotan, osoko ereduak planteatzeko eta ebazteko beharra izaten
da. Ikus dezagun zenbait adibide.
1. Kostu ﬁnkoak dituen ekoizpen problema bat
Demagun enpresa batek
A1, A2 eta A3 motako produktuak ekoizten dituela.
Produktu bakoitzaren ekoizpenak lanordu kopuru jakina behar du.
A1, A2
eta
A3 produktuen ekoizpena hasteak 2.000, 1.500 eta 1.000-ko kostu ﬁnkoak
sortzen ditu, hurrenez hurren.
Produktu unitate baten ekoizpenerako behar den ordu-kopurua, lehengai-
kopurua eta ekoizpenean sortutako ekoizte kostua eta salneurria ondoko
taulan ematen dira.
Orduak
Lehengaia
Ek. kostua
Salneurria
A1
30
40
60
120
A2
20
30
40
80
A3
60
40
80
150
Ekoizpenerako enpresak 4.500 ordu eta 5.500 lehengai unitate ditu astero
erabiliak izateko prest.
Irabazi maximoa lortzeko enpresak astero ekoitzi behar duen
A1, A2 eta A3
produktuen unitate kopurua erabakitzeko eredu lineala planteatu nahi da.
Eredu lineala ondokoa izango da.
• xj : ekoitziko den Aj produktu unitate kopurua (j = 1, 2, 3).
• yj =



1
Aj produktua ekoizten bada
0
Aj produktua ekoizten ez bada

1.2. OSOKO PROGRAMAZIO LINEALAREN APLIKAZIOAK
ix
max z = (120 − 60)x1 + (80 − 40)x2 + (150 − 80)x3 −
−2.000y1 − 1.500y2 − 1.000y3
o.m.m.
30x1 + 20x2 + 60x3 ≤ 4.500
40x1 + 30x2 + 40x3 ≤ 5.500
x1 ≤ M1y1
x2 ≤ M2y2
x3 ≤ M3y3
x1, x2, x3 ≥ 0
y1, y2, y3 = 0, 1
yj = 0 den kasuan, xj ≤ Mjyj murrizketatik xj ≤ 0 izan behar duela ondo-
rioztatzen da. Bestalde,
xj ≥ 0 bete behar denez, xj = 0 izango da eta Aj
produktua ez da ekoitziko. Aldiz,
yj = 1 denean Aj produktuaren ekoizpe-
na hasten da eta, kopurua
Mj konstanteak mugatzen du. Beraz, konstante
horiek behar bezain handiak izan behar dute problemaren soluzio guztiak
kontuan hartzeko. Konstante horiek zehazki kalkula daitezke baliabideen
kopuru osoa produktu mota bakar bat ekoizteko erabiltzen dela suposatuz.
2. Motxilaren problema
Motxila bat balio ﬁnkoa duten objektuz bete nahi denean sortzen da proble-
ma hau. Aukeraketa lehenago ﬁnkatutako P pisua gainditu gabe egin behar
da.
n objektu dagoela suposatuko dugu, j objektuaren pisua aj dela eta dagokion
balioa
cj dela j = 1, . . . , n.
Helburua motxilaren balioa maximizatzea da. Horretarako ondoko osoko
eredu lineala idatz daiteke.
xj =



0
j objektua motxilan sartzen ez bada
1
j objektua motxilan sartzen bada
max z = c1x1 + c2x2 + . . . + cnxn

x
KAPITULUA 1. OSOKO PROGRAMAZIOA
o.m.m.
a1x1 + a2x2 + . . . + anxn ≤ P
xj = 0, 1 j = 1, 2, . . . , n
Antzeko planteamendua egin daiteke murrizketa gehiagorekin, adibidez ob-
jektuaren tamaina kontuan hartuz.
3. Multzoen estalpenaren problema
Eskualde batean 6 hiri daude. Hiriak elkarren artean komunikatuak egon
daitezen tren geltokiak eraiki nahi dira
Hiri bakoitzetik gainontzekoetara joateko behar den denbora ondoko taulan
agertzen da.
1
2
3
4
5
6
1
0
35
20
40
30
60
2
35
0
45
35
20
70
3
20
45
0
15
55
20
4
40
35
15
0
65
35
5
30
20
55
65
0
40
6
60
70
20
35
40
0
Tren geltoki horien kokapena erabaki nahi da, beti ere, edozein hiritatik
abiatuta ere, 30 minutu edo gutxiagotan tren geltoki bat izango dela ziurtatu
behar delarik eta ahalik eta tren geltoki gutxienak eraiki nahi direlarik.
Problema honen erabaki-aldagaiak bitarrak dira, hau da
xj =



1 j hirian geltoki bat eraikitzen bada
0 kontrako kasuan
Problema planteatzeko ondoko eredu lineala eraiki daiteke

1.2. OSOKO PROGRAMAZIO LINEALAREN APLIKAZIOAK
xi
min z = x1 + x2 + x3 + x4 + x5 + x6
o.m.m.
x1 + x3 + x5 ≥ 1
x2 + x5 ≥ 1
x1 + x3 + x4 + x6 ≥ 1
x3 + x4 ≥ 1
x1 + x2 + x5 ≥ 1
x3 + x6 ≥ 1
xj = 0, 1 j = 1, . . . , 6
Helburu-funtzioak guztira eraikitzen den geltoki-kopurua minimizatzen du.
Murrizketa bakoitzak dagokion hiritik behar bezain gertu geltoki bat egon-
go dela ziurtatzen du. Adibidez, lehenengo murrizketak lehenengo hiritik
30 minutura edo gertuago tren geltoki bat egongo dela ziurtatzen du; hori
gertatzen da baldin eta
x1, x3 edo x5 aldagaietako batek, gutxienez, 1 balioa
hartzen badu, hau da,
x1 + x3 + x5 ≥ 1 betetzen bada. Beste murrizketa
guztiak berdin interpretazen dira.
4. Bidaiariaren problema
Bidaiari batek
H1, H2, . . . , H5 hiriak bisitatu behar ditu behin eta bakar-
rik behin, hiri batean hasi eta ibilbidea bertan amaituko duelarik. Ondoko
taulan hirien arteko distantziak jasotzen dira. Hiriak bisitatzeko ordena ze-
haztu behar da distantzia minimoko bidea egiteko.
H1
H2 H3
H4 H5
H1
0
40
85 130
70
H2
40
0
50 100
45
H3
85
50
0
50
35
H4 130 100 50
0
65
H5
70
45
35
65
0

xii
KAPITULUA 1. OSOKO PROGRAMAZIOA
Problema honetarako eredu lineal bat eraikitzeko ondoko erabaki-aldagaiak
deﬁni daitezke
xij =



0
i hiritik j hirira ez badoa
1
i hiritik j hirira baldin badoa
Aldagai horiek erabiliz esleipen problema bailitzan plantea daiteke, eta badiru-
di bidaiariaren problemarako soluzio bat lor daitekeela esleipen problema
ebatziz. Baina, guk bilatzen dugun soluzioak zirkuitu bakarra eduki behar
du eta hori ez da ziurtatzen esleipen algoritmoa erabiltzen denean. Batzutan
esleipena egiterakoan azpizirkuituak agertzen dira eta horiek baztertzeko
metodo egoki bat aztertuko dugu.
1.3
Soluzio graﬁkoa. Adarkatze- eta bornatze-algoritmoa
Normalean osoko problemak ebazteko erabiltzen den metodoa adarkatze-
 eta bornatze-
algoritmoa da. Metodo hori garatu baino lehen ikus dezagun graﬁkoki adibide bat.
Har dezagun osoko eredu lineala. Hasteko, problema bera baina aldagaiek
osoko balioak hartu behar izatearen murrizketa kenduta hartuko dugu kontuan.
Problema berri horri erlaxatua deitzen zaio.
1.Problema
Problema erlaxatua
max z = 80x1 + 45x2
max z = 80x1 + 45x2
o.m.m.
o.m.m.
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1, x2 ≥ 0 eta osokoak
x1, x2 ≥ 0
Adarkatze- eta bornatze-metodoa problema erlaxatuaren soluzio optimotik has-
ten da. Problema hori lineala denez, programazio linealaren ohiko teknikak erabi-
liz ebazten da. Behin problema hori ebatzi eta gero, soluzioa begiratuko dugu.

1.3. SOLUZIO GRAFIKOA. ADARKATZE- ETA BORNATZE-ALGORITMOA xiii
Kasu honetan, problema erlaxatuaren soluzio optimoa P=(
x∗
1, x
∗
2)=(3.6, 3.4)
puntua da, ondoko irudian ikus daitekeenez, eta helburu-
funtzioaren balio optimoa
z∗ = 441 da.
Puntu hori 1.problemaren soluzio optimoa izango litzateke aldagai guztiek os-
oko balioak hartuko balituzte. Hori ez da gertatzen, beraz, puntu hori problema
erlaxatuaren soluzio optimoa da baina ez osoko problemarena.
Problema erlaxatuaren balio optimoa
z∗ = 441 da. Horrek esan nahi du osoko
problemaren helburu-funtzioaren goi-borne bat 441 dela.
Ondoren, aldagai bat aukeratuko dugu problema adarkatzeko, hau da, osoko
izan behar duen eta kalkulatutako soluzioan osoko ez den aldagai bat. Kasu hone-
tan bai
x1 eta bai x2 aldagaiek osoko balioak hartu behar dituztenez, edozein
aukera daiteke. Adibidez,
x1. Oraingo soluzioan x∗1 = 3.6. x1 aldagaiak ezin
ditu
(3, 4) tartean dauden balioak hartu, osoko ez direlako. Beraz, x1 ≤ 3 edo
x1 ≥ 4 izango da. Gure problema beste 2 problematan banatuko dugu: 1.proble-
mari
x1 ≤ 3 murrizketa erantsiz 2.problema sortzen da eta 1.problemari x1 ≥ 4
murrizketa gehituz gero 3.problema lortzen da.
2.Problema
3.Problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
o.m.m.
o.m.m.
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≤ 3
x1 ≥ 4
x1, x2 ≥ 0
x1, x2 ≥ 0
Hurrengo irudian ikus daiteke
x1 aldagaiaren (3, 4) tarteko puntuak alde bat-
era utzi ditugula eta, ondorioz, soluzio bideragarrien multzoa bi azpimultzotan
banatuta gelditu dela.
Sortutako problemak independenteki ebazten dira, soluzioak ondokoak izanik.

xiv
KAPITULUA 1. OSOKO PROGRAMAZIOA
2.Problema
3.Problema
(x∗
1, x
∗
2) = (3, 4)
(x∗
1, x
∗
2) = (4, 2.4)
z∗ = 420
z∗ = 428
2. problemaren soluzio optimoa osokoa da eta, helburu-funtzioaren balio op-
timoa,
z∗ = 420, 1. problemaren balio optimoaren behe-borne bat da, zb = 420,
hau da, helburu-funtzioari
zb balioa baino txikiagoa ematen dioten soluzioak ez
ditugu onartuko.
3. problemaren soluzio optimoa ez da osokoa,
x2 aldagaiak 2.4 balioa hartzen
duelako. Problema horren helburu-funtzioaren balio optimoa
z∗ = 428 da. z∗ =
428 > 420 = zb denez, problema hau adarkatuz agian oraingoz dugun soluzio
osoa baino hobea izango den beste bat aurkitu ahal izango dugu. Hori dela eta,
x2 aldagaiaren balioak osoko izan behar duenez, x2 ≤ 2 eta x2 ≥ 3 murrizketak
erantsiz 3.problema adarkatuko dugu ondoko biak sortzeko.
4.Problema
5.Problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
o.m.m.
o.m.m.
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≥ 4
x1 ≥ 4
x2 ≤ 2
x2 ≥ 3
x1, x2 ≥ 0
x1, x2 ≥ 0
Bi problemetarako soluzio optimoak irudian agertzen dira.
Graﬁkan ikusten da 5. problema bideraezina dela, problema horren adark-
atzea amaitutzat emango dugularik. 4. problemaren soluzio optimoa
(x∗
1, x
∗
2) =
(4.16, 2) da eta z∗ = 422.8. Oraindik z∗ = 422.8 > 420 = zb denez, adark-
atu egin beharko dugu.
x1 aldagaia osokoa ez denez, prosezua errepikatuko dugu
datozen bi problemak sortzeko.

1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK
xv
6.problema
7.problema
max z = 80x1 + 45x2
max z = 80x1 + 45x2
o.m.m.
o.m.m.
x1 + x2 ≤ 7
x1 + x2 ≤ 7
12x1 + 5x2 ≤ 60
12x1 + 5x2 ≤ 60
x1 ≥ 4
x1 ≥ 4
x2 ≤ 2
x2 ≤ 2
x1 ≤ 4
x1 ≥ 5
x1, x2 ≥ 0
x1, x2 ≥ 0
Bi problemek osoko soluzio optimoak dituztenez, adarkatze prozesua amaituko
dugu bietarako. Soluzio optimoak honakoak dira: 6. problemarako,
(x∗1, x∗2) =
(4, 2), z∗=410. 7. problemarako (x∗
1, x
∗
2) = (5, 0), z
∗ =400. Hala ere, aurretik
topatutako behe-bornea ﬁnkatu duen soluzio osoak helburu-funtzioari balio hobea
ematen dio, eta ondorioz,osoko problemaren soluzio optimoa
(x∗1, x∗2) = (3, 4) da
eta
z∗ = 420.
Ondoko zuhaitzean adarkatze-eta bornatze-metodoaren bidez sortutako prob-
lema guztien soluzio optimoak ikus ditzakegu.
1.4
Osoko problemak ebazteko metodo algebraikoak
Osoko problema linealak ebazteko ondoko metodoak existitzen dira.
1. Zerrendaketa osoaren metodoa
Soluzioen kopurua ﬁnitua denez (soluzio-multzoa bornegabea denean ezik),
soluzio guztiak kalkula daitezke eta horietan helburu-funtzioak hartzen duen
balioak aztertuz, soluzio optimoa zein den erabaki daiteke.
Hala ere, metodo hau ez da komenigarria kalkulu gehiegi eskatzen due-
lako. Gainera, bideragarritasun eskualdea bornegabea denean ezinezkoa da
soluzio guztiak zerrendatzea, soluzioen multzoa ez baita kopuru ﬁnitukoa.

xvi
KAPITULUA 1. OSOKO PROGRAMAZIOA
Adibidea
Har dezagun xii.orrialdeko adibidea. Ondoko irudian osoko problemaren
soluzio guztiak agertzen dira.
Multzo horren puntu kopurua ﬁnitua da baina multzoa ez da ganbila eta,
horregatik, ezin ditugu programazio linealeko ohiko teknikak erabili opti-
moa lortzeko.
Zerrendaketa osoaren metodoa erabil daiteke. Problemaren 30 soluzioak
kalkulatu behar dira eta horietako bakoitzerako z kalkulatu. Horrela er-
abakiko dugu zein den soluzio optimoa. 2
2. Zerrendaketa eta hurbilketaren metodoa
Metodo hau problema erlaxatuaren ebazpenean oinarritzen da. Lortutako
soluzioa osokoa bada, soluzio hori osoko problemaren soluzio optimoa ere
bada. Bestela, soluzioa biribilduz hurbilketa guztiak lortzen dira, eta hori-
etan helburu-funtzioa ebaluatuz aukeratzen da soluzio onena eta optimoa
dela esaten da.
Adibidea
Aurreko problemari dogokion problema erlaxatuaren soluzio optimoa
(x∗
1, x
∗
2) =
(3.6, 3.4) da. Hurbilketa guztiak hauek dira: (3, 3), (3, 4), (4, 3), (4, 4).
Helburu-funtzioaren balioa kalkulatzen badugu puntu guztietan, optimoa
(4, 4) puntuan lortzen da.
Hala ere, irudian ikus daiteke puntu optimo hori eta hurrengo onena ez
direla bideragarri.
Metodo honen problema da kalkulatu behar diren hurbilketen kopurua han-
dia dela, (aldagaien kopurua
n bada 2n hurbilketa posible dago) eta gainera
horietariko batzuk bideraezin izan daitezke.
2
3. Mozketa-planoen metodoa
Adarkatze- eta bornatze-metodoa bezala bideragarritasun eskualdea bi zati-
tan banatzean datza metodo hau. Hori lortzeko murrizketa berriak gehitzen
zaizkio problemari osoko soluzioa lortu arte. Hori da praktikan agertu

1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK xvii
zen lehenengo metodoa, baina ez da eraginkorra tamaina erdiko problemak
ebazteko.
4. Adarkatze- eta bornatze-metodoa
Osoko ereduen soluzio graﬁkoan ikusi den bezala, eredu erlaxatuaren soluzio
optimoa osokoa ez bada, daukagun problema bi azpiproblematan banatuko
dugu (adarkatzea) aldagairen bat bornatuz. Prosezu horrek bideraezinak
diren soluzio asko alde batera uzten ditu, eta tamaina erdiko problemak
ebazteko egoki gertatzen da metodo hau.
Hala ere, kalkulu kopuruaren aldetik oso konplexua da. Horregatik, prak-
tikan bilaketa osoa egiten ez duen adarkatze- eta bornatze- algoritmoaren
aldaeraren bat erabil daiteke.
Soluzio graﬁkoa aztertu dugunean adarkatze- eta bornatze- algoritmoa er-
abili dugu. Hurrengo atalean metodoaren urratsak emango ditugu.
1.4.1
Adarkatze- eta bornatze-metodoa
Adarkatze- eta bornatze-
algoritmoan problema erlaxatuaren kontzeptua eta soluzio-
gaiaren kontzeptua erabiltzen dira.
Deﬁnizioa 1.4.1 (Problema erlaxatua) Osoko problema lineala emanik, alda-
gaiak osoko izatearen murrizketa kenduta lortzen den ereduari problema erlax-
atua esaten zaio, hau da
Osoko problema
Problema erlaxatua
max z = cT x
max z = cT x
o.m.m.
o.m.m.
Ax
≤ b
Ax
≤ b
x
≥ 0 eta osokoa
x
≥ 0
Problema erlaxatuak osoko problemak baino murrizketa gutxiago ditu. Hor-
rek esan nahi du osoko problemaren bideragarritasun eskualdea dagokion proble-
ma erlaxatuaren bideragarritasun eskualdearen parte dela, hau da, osoko proble-
marako
z∗
erlaxatua ≥ z
∗
osokoa betetzen dela maximizatze kasuan.

xviii
KAPITULUA 1. OSOKO PROGRAMAZIOA
Deﬁnizioa 1.4.2 (Soluziogai) Osoko problema bat izanik, problemaren ebazpenaren
iterazio bakoitzean oraingoz lortutako osoko soluzio onenak soluziogai izena hartzen
du.
Soluziogaia osoko problemaren soluzio optimoa izan daitekeenez gorde egin
behar da hobe bat lortu arte. Helburu-
funtzioak soluziogaian hartzen duen balioak
zb behe-bornea ﬁnkatzen du. Azpiproblema baten helburu-funtzioaren balioa zb
baino txikiagoa denean adar hori moztu ahal izango dugu (azkeneko problema).
1.4.2
Adarkatze- eta bornatze-algoritmoa
Algoritmo hau erabil daiteke maximizatze-helburua daukaten osoko problemak
ebazteko. Adarkatze- eta bornatze-algoritmoaren urratsak ondokoak dira.
1. urratsa: Hasieraketa
Osoko problemari dagokion problema erlaxatua ebatzi.
– Problema erlaxatuaren soluzio optimoa osokoa bada amaitu eta hori
osoko problemaren soluzio optimoa da.
– Bestela, soluziogaiari dagokion
zb behe-bornea hasieratu; balio ezagu-
nik ez badago,
zb = −∞ izango da.
2. urratsa: Adarkatzea
Azkenekoa ez den azpiproblemaren bat aukeratu. Aukeratutako azpiprob-
leman osokoa izan behar duen eta ez den aldagairen bat hautatu1. Problema
adarkatu aukeratutako aldagaiaren arabera. Horrela bi azpiproblema berri
sortzen dira daukagunari
xj ≤ [xj] eta xj ≥ [xj] + 1 murrizketak gehituz,
hurrenez hurren 2.
3. urratsa: Bornatzea
Aurreko urratsean sortu berri ditugun bi azpiproblemak ebatzi eta lortu bakoitzaren
helburu-funtzioaren balio optimoa,
z∗.
1Hurrengo atalean ematen dira adarkatzeko problema eta aldagaiaren aukeraketa egiteko erabil
daitezkeen irizpideak
2xj aldagaiaren osoko zatia [xj] da

1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK
xix
4. urratsa: Azkeneko problemak
Aurreko urratsean ebatzitako azpiproblemak azkenekoak dira ondoko bald-
intzaren bat betetzen badute:
1. Azpiproblema bideraezina da
2.
z∗ ≤ zb. Soluziogaiak helburu-funtzioari ematen dion balioa (zb)
orain lortutakoa
(z∗) baino handiagoa edo berdina bada, adar horre-
tatik adarkaketa bukatutzat emango dugu, hau da, azpiproblema azkenekoa
izango da.
3. Azpiproblemaren soluzioa osokoa da eta
z∗ > zb. Orduan, soluziogaia
eta behe-bornea eguneratu behar dira,
zb =z∗.
Azkenekoa ez den azpiproblemaren bat baldin badago 2.urratsean jarraitu.
Bestela, soluzio optimoa soluziogaia da (
zb-ri dagokiona) edo, soluziogairik
ez bada existitzen porblema bideraezina da.
Nahiz eta bilaketa horrek kalkulu asko eskatu, algoritmoa osoko problema
hutsak eta osoko problema mistoak ebazteko erabiltzen den metodoa da.
Adibidea
Adarkatze- eta bornatze-algoritmoa erabiliz xii. orrialdeko adibidea ebatziko
dugu.
1. urratsa Problema erlaxatua ebazten da eta ondokoa da dagokion taula op-
timoa.
x1 x2
x3
x4
0
0
20
5
440
a2
0
1
1.71
−0.14 3.4
a1
1
0
−0.71
0.14
3.6
Soluzioa osokoa ez denez,
zb = −∞ behe-bornea hasieratuko dugu.
2. urratsa Adarkatzeko aldagai bat aukeratu behar dugu, eta bi problema berri
sortuko dira: xiii. orrialdeko 2. problema eta 3. problema.
3. urratsa Bi problema horiek ebatziko ditugu sentikortasun-
analisiaren teknikak
erabiliz.

xx
KAPITULUA 1. OSOKO PROGRAMAZIOA
2.problema ebazteko lehenengo problemaren taula optimoan (problema erlax-
atuaren taula optimoan kasu honetan)
x1 ≤ 3 murrizketa sartu dugu, eta ondoko
taula lortzen da.
x1 x2
x3
x4
x5
0
0
20
5
0
440
a2
0
1
1.71
−0.14
0
3.4
a1
1
0
−0.71
0.14
0
3.6
a5
1
0
0
0
1
3
Eragiketak egin behar dira azken lerroa zuzentzeko.
x1 x2
x3
x4
x5
0
0
20
5
0
440
a2
0
1
1.71
−0.14
0
3.4
a1
1
0
−0.71
0.14
0
3.6
a5
0
0
0.71
-0.14
1
−0.6
Simplex dual metodoa aplikatuz 2. problemaren taula optimoa lortuko dugu.
x1 x2 x3 x4 x5
0
0
45
0
35 420
a2
0
1
1
0
−1
4
a1
1
0
0
0
1
3
a4
0
0
−5
1
−7
4
Era berean lortzen da 3.problemaren soluzio optimoa. Hasteko, problema er-
laxatuaren taula optimoan
x1 ≥ 4 (−x1 ≤ −4) murrizketa sartzen da

1.4. OSOKO PROBLEMAK EBAZTEKO METODO ALGEBRAIKOAK
xxi
x1 x2
x3
x4
x5
0
0
20
5
0
440
a2
0
1
1.71
−0.14
0
3.4
a1
1
0
−0.71
0.14
0
3.6
a5 −1
0
0
0
1
−4
Taula egokituz,
x1 x2
x3
x4
x5
0
0
20
5
0
440
a2
0
1
1.71
−0.14
0
3.4
a1
1
0
−0.71
0.14
0
3.6
a5
0
0
-0.71
0.14
1
−0.4
Simplex dual metodoa aplikatuz 3.problemaren taula optimoa lortzen da.
x1 x2 x3
x4
x5
0
0
0
9
28
428
a2
0
1
0
0.2
2.4
2.4
a1
1
0
0
0
−1
4
a3
0
0
1
−0.2 −1.4 0.6
Horrela lortu ditugu 2.problema eta 3.problemaren soluzio optimoak. (Ikus
??. orrialdean dagoen zuhaitza).
4. urratsa Ebatzitako 2 azpiproblemak ez dira azkenekoak, bideraezinak ez
direlako,
z∗ > zb delako eta soluzio optimoak osokoak ez direlako. Horrela,
ebazpen graﬁkoan egin bezala, algoritmoaren iterazioekin jarraitu behar da prob-
lema guztiak azkeneko izan arte.
2

xxii
KAPITULUA 1. OSOKO PROGRAMAZIOA
1.4.3
Konbergentzia azkartzea
Adarkatze-urratsean azkenekoa ez den problema bat aukeratu behar da. Problema
horretan aldagai bat aukeratuko dugu bornatua izateko.
Bi aukera horiek zoriz egin badaitezke ere, egokiagoa da irizpideren bat jar-
raitzea algoritmoak ahalik eta azkarren soluzio optimorantz jo dezan.
• Adarkatzeko problemaren aukeraketarako irizpideak
Ohiko irizpideak ondokoak dira:
1. Borne berrienaren teknika. Metodo hau sortutako azken problema
aukeratzean datza. Gero adar horretatik jarraitzen da azkeneko prob-
lemak lortu arte. Behin adar baten azterketa amaitu denean, beste adar
bat aztertzeari ekingo zaio.
2. Borne onenaren teknika. Algoritmoaren iterazio bakoitzean helburu-
funtzioaren balio onena duen problema aukeratzen da. Teknika honekin
soluzio bideragarri onak lortu nahi dira zeintzuk algoritmoaren 4. ur-
ratsean ahal den problema kopuru handiena baztertuko duten.
• Aldagaiaren aukeraketarako irizpideak
Ondokoak dira bornatua izango den aldagaia aukeratzeko erabil daitezkeen
zenbait irizpide:
1. Zati hamartar handiena duen aldagaia aukeratu.
2. Ereduan eragin handiena duen aldagaia aukeratu.
3. Zigortze-kostu handiena duen aldagaia aukeratu. Zigortze-kostu horiek
ondoko eran kalkulatzen dira:
xi aldagaiaren behe zigortze-kostua:
[CP ]i = (xB
i − [x
Bi ])M in{(zj − cj )/yij , yij > 0}
xi aldagaiaren goi zigortze-kostua:
< CP >i= (1 − xB
i + [x
Bi ])M in{(zj − cj )/yij , yij < 0}
Zigortze-kostu horiek osoko izan behar duten eta ez diren oinarriko
aldagaietarako bakarrik kalkulatzen dira; oinarriko nasaitze-aldagaietarako
ez dira kalkulatzen.

1.5. 0-1 OSOKO PROGRAMAZIOA
xxiii
1.5
0-1 osoko programazioa
Praktikan aldagai bitarrak besterik ez dituzten problemak existitzen dira. Horiek
ebazteko azaldutako adarkatze- eta bornatze-
algoritmoa erabil daiteke. Hala ere,
problema horietarako beste algoritmo eraginkorragoa garatu da.
Aztertuko dugun algoritmoa erabiltzeko helburu-funtzioaren koeﬁzienteek on-
doko baldintza bete behar dute.
0 ≤ c1 ≤ c2 ≤ . . . ≤ cn
Baldintza hori edozein eredu linealek bete dezake, beharrezko aldaketak egiten
bazaizkio.
Adibidea
Demagun ondoko 0-1 osoko programazioko eredua
max z = 6x1 − 4x2
o.m.m.
3x1 + 2x2 ≤ 10
−x1 + x2 ≤ 17
xj = 0, 1 j = 1, 2
Helburu-funtzioaren koeﬁzienteak positibo eta gorakorrak ez direnez, ondoko
aldaketa lineala egin behar dugu. Helburu funtzioan koeﬁziente minimoa auker-
atuko dugu balio absolutuan,
c2 kasu honetan, eta x2 = 1 − y1 egiten dugu c2
negatibo izateagatik. Positiboa balitz
x2 = y1 egingo genuke. Era berean aldaketa
guztiak egiten dira.
x2 = 1 − y1, x1 = y2
0-1 adarkatze- eta bornatze-algoritmoa erabiltzeko komeni zaigun eredu lin-
eala ondokoa da
max z = 4y1 + 6y2 − 4
o.m.m.

xxiv
KAPITULUA 1. OSOKO PROGRAMAZIOA
−2y1 + 3y2 ≤ 8
−y1 − y2 ≤ 16
yj = 0, 1 j = 1, 2
2
Deﬁnizioa 1.5.1 (Problema erlaxatua) 0-
1 eredu lineal bat izanik, dagokion prob-
lema erlaxatuak helburu funtzioa eta aldagaiak bitar izateko murrizketa besterik
ez du.
Deﬁnizioa 1.5.2 (Soluzio partziala) 0-1 eredu lineal bat emanik, aldagairen bat
balio ﬁnkorik gabe duen soluzioari eredu linealaren soluzio partziala deitzen zaio.
Deﬁnizioa 1.5.3 (Soluzio partzial baten osaketa) 0-1 osoko problema lineal bat-
en soluzio partzial bat emanik, ﬁnkatu gabe dauden aldagaiei balio ﬁnkoa ematen
zaienean, lortzen den soluzioa soluzio partzialaren osaketa dela esaten da.
Adibidea
Demagun ondoko 0-1 eredu lineala
max z = 2x1 + 4x2 + x3
o.m.m.
x1 + x2 + 2x3 ≤ 4
3x1 + x2 + 2x3 ≤ 5
xj = 0, 1 j = 1, 2, 3
Dagokion problema erlaxatua ondokoa da
max z = 2x1 + 4x2 + x3
o.m.m.
xj = 0, 1 j = 1, 2, 3
Adibidez, problemaren soluzio partzial bat
x = (1, 1, −) da. Soluzio partzial
horren osaketa guztiak
(1, 1, 0) eta (1, 1, 1) dira.
2

1.5. 0-1 OSOKO PROGRAMAZIOA
xxv
1.5.1
0-1 problematarako adarkatze- eta bornatze-algoritmoa
Algoritmo hau 0-1 problema linealen helburua maximizatzea denerako dago eraiki-
ta.
1. urratsa: Hasieraketa
Problema erlaxaturako soluzio optimo den x=(1, . . . , 1), 0-1 osoko prob-
lemarako bideragarri den egiaztatu. Horrela bada, x
= 1 soluzioa optimo
da eta algoritmoa amaitu. Bestela, helburu-funtzioaren balio optimorako
zb
behe-borne bat zehaztu (hasieran 0 izango da).
Kalkulatu x
∗
= (0, 1, . . . , 1) soluzioari dagokion helburu-funtzioaren balioa,
z∗ = z(x∗). Baldin x∗ hasierako problemaren soluzio bideragarri bada,
amaitu eta x
∗
izango da soluzio optimoa. Bestela
k = 1 egin eta behe-
bornea
zb = 0 balioaz hasieratu. 2. urratsera joan.
2. urratsa: Adarkatzea
Azkenekoa ez den problema bat aukeratu eta hori bi azpiproblematan banatu
xk = 0 eta xk = 1 murrizketak gehituz, hurrenez hurren.
3. urratsa: Bornatzea
Problema berri guztietarako
k + 1 osagaia 0 duen eta ondokoak 1 dituen x∗
osaketa egin. Problemak osaketa horretan hartzen duen balio optimoa,
z∗
da.
4. urratsa: Azkeneko problemak
z∗ gohi-borne handiena duen problematik hasiz, problema guztiak aztertu
eta azkenekotzat jo ondoko baldintzaren bat betetzen dutenak
(a)
z∗ ≤ zb
(b) Baldin
z∗ > zb bada eta x∗ bideragarria bada, hau da, murrizketa guz-
tiak betetzen baditu, orduan
zb = z∗ egin.
(c) Problema bideraezina da, hau da, ez da ezistitzen problema horrentza-
ko osaketarik zeinak aldiberean murrizketa guztiak beteko dituen.
Problema guztiak azkenekoak badira amaitu. Bestela,
k = k + 1 egin eta 2.
urratsera joan.

xxvi
KAPITULUA 1. OSOKO PROGRAMAZIOA
Adibidea
Ondoko motxilaren problema aurreko algoritmoa erabiliz ebatziko dugu
max z = 15x1 + 25x2 + 12x3 + 10x4
o.m.m.
3x1 + 6x2 + 5x3 + 5x4 ≤ 12
xj = 0, 1
j = 1, . . . , 4
x4 = y1, x3 = y2, x1 = y3 eta x2 = y4 aldagai aldaketak eginez ondoko
eredua lortzen da
max z = 10y1 + 12y2 + 15y3 + 25y4
o.m.m.
5y1 + 5y2 + 3y3 + 6y4 ≤ 12
yj = 0, 1
j = 1, . . . , 4
1. urratsa. y
= (1, . . . , 1) soluzioa bideragarri ez dela egiazta daiteke.
cj txikiena daukan aldagaiari 0 balioa eman, eta horrela motxilatik balio
txikiena daukan objektua ateratzen dugu, hau da, y
∗
= (0, 1, . . . , 1) soluzio
bideragarria den ala ez egiaztatzen dugu. Kasu honetan puntu hori ez da
soluzio bideragarria, ez dituelako murrizketa guztiak betetzen. Puntu hor-
ri dagokion helburu-funtzioaren balioa,
z∗ = 52, soluzio optimoaren goi-
borne da (1. problema).
k = 1 egingo dugu eta zb = 0 hasieratuko dugu.
2. urratsa. Bi problema berri (2. problema eta 3. problema) sortu
y1 = 0
eta
y1 = 1 eginez.
2.Problema
3. problema
max z
= 10y1 + 12y2 + 15y3 + 25y4
max z
= 10y1 + 12y2 + y3 + 25y4
o.m.m.
o.m.m.
y1
= 0
y1
= 1
yi
= 0, 1 i = 2, . . . , 4
yi
= 0, 1 i = 2, . . . , 4
3. urratsa Sortu berri ditugun problemen osaketa onenak, hau da, problema
bakoitzaren soluzio optimoa kalkulatuko dugu. Osaketa horiek helburuaren
z∗ balioa ematen dute. 2. problemarako z∗ = 40 eta 3. problemarako
z∗ = 50 dira.

1.5. 0-1 OSOKO PROGRAMAZIOA
xxvii
4. urratsa y
∗
= (0, 0, 1, 1) soluzioa, 2. problemarako soluzio bideragarria
da, eta beraz, problema azkenekoa da.
zb = 40.
y∗
= (1, 0, 1, 1) ez da 3. problemaren soluzio bideragarria. Gainera, 3.
problema bideragarria da gutxienez
(1, 0, 0, 0) osaketak problemaren mur-
rizketa guztiak betetzen baititu. 2. urratsera joan.
2. urratsa Adarkaketarekin jarraituko dugu eta problemarako ondoko di-
agraman lortzen da. Borne onenaren irizpidearen arabera aukeratuko dira
adarkatuak izateko problemak.
0-1 osoko problemaren soluzio optimoa
zb = 40 behe-borneari dagokiona da,
hau da,
y∗ = (0, 0, 1, 1). Aldagai aldaketak deseginez, soluzio optimoa x∗
1 = x
∗
2 =
1, x∗3 = x∗4 = 0 da.
2
1.5.2
Bidaiariaren problemarako adarkatze- eta bornatze-algoritmoa
Demagun bidaiari batek
n hiri bisitatu behar dituela bakarrik behin lehenengora
bueltatu baino lehen. Hirien kopurua altua denean konplexutasun konputazional
handikoa da problema. Problema horretarako eredu lineal bat eraikitzeak mur-
rizketa kopuru handia eskatzen du. Horrexegatik, bidaiariaren problemari dagokion
ondoko problema erlaxatua bakarrik hartuko dugu kontuan.
min z =
n
i
=1
n
j
=1
cijxij
o.m.m.
n
i
=1
xij = 1 j = 1, . . . , n
n
j
=1
xij = 1 i = 1, . . . , n
xij = 0, 1 i, j = 1, . . . n
Eredu erlaxatu horretan ez daude bidaiariaren problemari dagozkion murrizke-
ta guztiak. Helburua biderik motzena bilatzea da. Lehenengo
n murrizketek hiri
bakoitzera beste bakar batetik joan daitekeela ziurtatzen dute eta gainontzeko
n

xxviii
KAPITULUA 1. OSOKO PROGRAMAZIOA
murrizketek hiri bakoitzetik beste bakar batetara joan daitekeela. Baina eredu er-
laxatuak ziurtatzen ez duena zera da:
 bidaiariak zirkuitu bakar bat egingo duela,
hau da, gerta daiteke eredu erlaxatuaren soluzio optimoak azpizirkuituak eduk-
itzea.
Eredu erlaxatu hori ebazteko esleipen algoritmoa erabiltzen da. Lortutako
soluzioak zirkuitu bakarra badu, hau da, bidaiaria hiri guztietatik behin eta bakar-
rik behin pasatzen bada lehenengora itzuliz, orduan bidaiariaren problemarako
soluzio optimoa izango da. Aldiz, soluzioak azpizirkuituak baditu ez da bidari-
aren problemarako soluzio bideragarria eta adarkatu egin beharko da.
Adarkaketarako problema bat aukeratzeko borne onenaren teknika edo borne
berrienaren teknika erabil daitezke. Aldagaia aukeratzeko ez dago irizpiderik,
azpizirkuituak apurtu besterik ez da egin behar.
Ondoko adibidean algoritmoa adieraziko dugu.
Adibidea
Har dezagun xi. orrialdeko bidaiariaren problema. Nahiz eta diagonaleko
kostuak zero izan, posizio horiek debekatu egin behar dira esleipen horiek bida-
iariaren problemarako onartezinak direlako
H1
H2 H3
H4 H5
H1
M
40
85 130
70
H2
40
M
50 100
45
H3
85
50 M
50
35
H4 130 100 50
M
65
H5
70
45
35
65 M
Esleipen-algoritmoa erabiliz problema erlaxatua (1. problema) ebatziko dugu
eta ondoko taulan jasotzen den soluzioa lortuko dugu.

1.5. 0-1 OSOKO PROGRAMAZIOA
xxix
H1
H2
H3
H4 H5
H1
M
40
85 130
70
H2
40
M
50 100
45
H3
85
50
M
50
35
H4 130 100
50
M
65
H5
70
45
35
65
M
Soluzioa ez da onargarria bi azpizirkuitu dituelako; bidaiariak honela bisi-
tatuko lituzke hiriak
H1 → H2 → H1 ,
H3 → H5 → H4 → H3, ibilitako
distantzia
z∗ = 40 + 40 + 35 + 50 + 65 = 230 km-koa izanik. Problema honetan
helburua minimizatzea denez, adarkatzean lortuko ditugun problemen helburu-
funtzioek balio handiagoak hartuko dituzte.
Hiri guztietatik pasatzen den eta lehenengora itzultzen den zirkuitu bakarreko
soluzioa kalkulatzeko, problema adarkatu egin behar da azpizirkuituren bat apur-
tuz. Adibidez,
H1 → H2 → H1 azpizirkuitua apurtzeko c21 = M edo c12 = M
egingo dugu esleipen horiek debekatzeko. Hau da,
H2-tik H1-era edo H1-etik
H2-ra joatea debekatuko dugu. Horrela, bi azpiproblema berri sortuko dira: 2.
problema eta 3. problema. Bi horien soluzio optimoak ondoko taulatan agertzen
dira.
H1
H2
H3
H4 H5
H1
H2
H3
H4 H5
H1
M
M
85 130
70
H1
M
40
85 130
70
H2
40
M
50 100
45 H2
M
M
50 100
45
H3
85
50
M
50
35 H3
85
50
M
50
35
H4 130 100
50
M
65 H4 130 100
50
M
65
H5
70
45
35
65
M H5
70
45
35
65
M
Ikus daitekeenez bi soluzio horiek ere azpizirkuituak dituzte.
• 2. soluzioa : H1 → H5 → H2 → H1 eta H3 → H4 → H3, z∗ = 255
• 3. soluzioa : H1 → H2 → H5 → H1 eta H3 → H4 → H3, z∗ = 255

xxx
KAPITULUA 1. OSOKO PROGRAMAZIOA
Azkeneko ez diren bi problema ditugu eta bien helburu-funtzioaren balioa
berdina denez, adarkatzeko edozein aukera dezakegu: 2.problema, adibidez. Hor-
retan,
H1 → H5 → H2 → H1 apurtuko dugu c15 = M eta c21 = M eginez.
Horren ondorioz 4. problema eta 5. problema sortuko dira eta, esleipen algorit-
moa erabiliz, hurrengo soluzioak lortuko ditugu.
H1
H2
H3
H4 H5
H1
H2
H3
H4 H5
H1
M
M
85
130
M H1
M
M
85
130
70
H2
40
M
50 100
45 H2
M
M
50
100
45
H3
85
50
M
50
35 H3
85
50
M
50
35
H4 130 100
50
M
65
H4 130 100
50
M
65
H5
70
45
35
65
M H5
70
45
35
65
M
• 4. soluzioa: H1 → H3 → H4 → H5 → H2 → H1, z∗ = 285
• 5. soluzioa: H1 → H5 → H1 eta H2 → H4 → H3 → H2, z∗ = 340
4. problema azkeneko problema da soluzioak zirkuitu bakarra osatzen due-
lako; helburuaren balioa
z∗ = 285 da eta bidaiariaren problemarako goi-bornea
da,
zg = 285, 4. soluzioa soluziogai izanik. Kilometro gutxiagoko beste zirkuitu
bakar bat aurkitu artean horrek soluziogai izaten jarraituko du.
5. problemaren soluzioa ez da onargarria oraindik azpizirkuituak dituelako.
Hala ere, ez da adarkaketarekin jarraitu behar
z∗ = 340 ≥ zg delako. Beraz 5.
problema ere azkeneko problema da.
Adarkatzeko gelditzen den problema bakarra 3. problema da. Horretan 2.
azpizirkuitua apurtuko dugu ondoko bi problemak sortzeko.
H1
H2
H3
H4 H5
H1
H2
H3
H4 H5
H1
M
40
85 130
70 H1
M
40
85 130
70
H2
M
M
50 100
45
H2
M
M
50
100
45
H3
85
50
M
M
35 H3
85
50
M
50
35
H4 130 100
50
M
65 H4 130 100
M
M
65
H5
70
45
35
65
M H5
70
45
35
65
M

1.5. 0-1 OSOKO PROGRAMAZIOA
xxxi
Lortutako soluzioak
• 6. soluzioa: H1 → H2 → H5 → H4 → H3 → H1, z∗ = 285
• 7. soluzioa: H1 → H2 → H3 → H4 → H5 → H1, z∗ = 275
Bi soluzioak bidaiariaren problemarako bideragarri dira. Ikusten denez, 7.
problemaren soluzioak soluziogaiak baina balio hobea ematen dio helburu-
funtzioari,
z∗ = 275 < 285 = zg. Ondorioz, hemendik aurrera soluziogaia 7. problemaren
soluzioa izango da eta goi-bornea eguneratuko dugu,
zg = 275. Problema guztiak
azkenekoak direnez, soluziogai hori da bidariariaren problemaren soluzio opti-
moa.
Ondoko zuhaitz-diagraman problema ebazteko egin diren adarkaketa guztiak
ematen dira.
Soluzio optimoa:
H1 → H2 → H3 → H4 → H5 → H1. Distantzia minimoa:
275 km.
2
Bidaiariaren problemarako metodo heuristikoak
Hiri asko dituen bidaiariaren problemarako soluzio optimoa kalkulatzeak sarritan
konputazio denbora luzea eskatzen duenez, soluzio onak eta azkar ematen dituzten
metodo heuristikoak erabili ohi dira. Oro har, ezin daiteke ziurta heuristikoen
bidez lortzen diren soluzioak optimo direnik.
Ikus ditzagun ondoko bi metodo heuristikoak: aldameneko gertuenaren metodoa
eta tartekatze-merkeenaren metodoa.
1. Aldameneko gertuenaren metodoa. Bidaiariak burutu beharreko bidea
osatzeko honakoa egin daiteke: edozein hiritik hasita, hortik gertuen dagoen
hirira joan eta azken horretatik gertuen dagoenera, guztiak bisitatu arte.
Adibidea
xi. orrialdeko adibiderako edozein hiri aukeratuko dugu,
H1 adibidez. H1-
etik gertuen dagoen hiria
H2 da, azken honetatik gertuena H5, H5-etik H3-ra
eta azkenik
H4 hirira gero H1 hirira bueltatzeko, zirkuitua itxiz. Lortutako
bidea ondokoa da
H1 → H2 → H5 → H3 → H4 → H1

xxxii
KAPITULUA 1. OSOKO PROGRAMAZIOA
Ibilitako distantzia
z = 40 + 45 + 35 + 50 + 130 = 300 km-koa da. Meto-
do honek ez du ziurtatzen lortutako soluzioa optimo denik. Izan ere, kasu
honetan ez da problemaren soluzio optimoa. Kontuan hartu behar da ez
dela soluzio berbera lortzen bidaiaria beste hiri batean hasten bada. Zein
hiritatik hasi aukeratzeko metodorik ez dagoenez, hiri guztietatik hasi eta
bide motzena ematen duen ibilbidea izango da metodo honen bidez lortu
ahal izango dugun soluzio onenea.
Gure adibiderako soluzio posible guztiak honakoak dira.
1. Soluzioa
H1 → H2 → H5 → H3 → H4 → H1. 300 km
2. Soluzioa
H2 → H1 → H5 → H3 → H4 → H2. 295 km
3. Soluzioa
H3 → H5 → H2 → H1 → H4 → H3. 300 km
4. Soluzioa
H4 → H3 → H5 → H2 → H1 → H4. 300 km
5. Soluzioa
H5 → H3 → H2 → H1 → H4 → H5. 320 km
6. Soluzioa
H5 → H3 → H4 → H2 → H1 → H5. 295 km
Kalkulatutakoen arteko soluzio onenak 2. soluzioa eta 6. soluzioa dira.
Ezin dugu ziurtatu optimoak direnik, baina kalkulu gutxirekin lortu dira;
hori da metodoaren abantaila.
2
2. Tartekatze merkeenaren metodoa. Hasieran edozein hiri aukeratzen da.
Horretatik gertuen dagoen hiria hautatuz ondoko azpizirkuitua daukagu:
Hi → Hj → Hi. Zirkuitu horretan arku bat, (i, j) adibidez , (i, k) eta
(k, j) arkuekin ordezkatzen da non Hk hiria oraingo azpizirkuituan ez da-
goen eta azpizirkuituaren luzera kopuru txikienean gehitzen den. Horrela
jarraitu behar da hiri guztiak dituen zirkuitu bakarra osatu arte.
Adibidea
Gure adibidean
H1 hirian hasiko gara. Hortik gertuen dagoen hiria H2 da,
beraz
H1 → H2 → H1 azpizirkuitua daukagu. Ordezkatu beharreko arkua
erabakitzeko ondoko taulan egin ditugu kalkuluak.

1.5. 0-1 OSOKO PROGRAMAZIOA
xxxiii
Ordezkatzeko arkua
Gehitzeko arkuak
Gehitutako luzera
(1,2)
(1,3) (3,2)
85+50-40=95
(1,2)
(1,4) (4,2)
130+100-40=190
(1,2)
(1,5) (5,2)
70+45-40=75
(2,1)
(2,3) (3,1)
50+85-40=95
(2,1)
(2,4) (4,1)
100+130-40=190
(2,1)
(2,5) (5,1)
45+70-40=75
Kostuak ikusita
(1, 2) arkuaren ordez (1, 5) eta (5, 2) arkuak jarriko ditugu
azpizirkuitu berria
H1 → H5 → H2 → H1 izanik. Orain ordezkatua izan
daitekeen hiru arku dago. Ondoko taulan egingo ditugu kalkuluak zein hiri
tartekatzea komeni zaigun ikusteko.
Ordezkatzeko arkua
Gehitzeko arkuak
Gehitutako luzera
(1,5)
(1,3) (3,5)
85+35-70=50
(1,5)
(1,4) (4,5)
130+65-70=125
(5,2)
(5,3) (3,2)
35+50-45=40
(5,2)
(5,4) (4,2)
65+100-45=120
(2,1)
(2,3) (3,1)
50+85-40=95
(2,1)
(2,4) (4,1)
100+130-40=90
(5, 2) arkua aukeratuko dugu, bere ordez (5, 3) eta (3, 2) arkuak sartzeko.
Ibilbidea
H1 → H5 → H3 → H2 → H1 da. Azkenik, H4 hiria besterik ez
zaigu gelditzen ibilbidean tartekatua izateko.
Ordezkatutako arkua
Gehitzeko arkuak
Gehitutako luzera
(1,5)
(1,4) (4,5)
130+65-70=125
(5,3)
(5,4) (4,3)
65+50-35=80
(3,2)
(3,4) (4,2)
50+100-50=100
(2,1)
(2,4) (4,1)
100+130-40=190

xxxiv
KAPITULUA 1. OSOKO PROGRAMAZIOA
H4 hiria H5 y H3 hirien artean sartuko da eta ibilbide motzena
H1 → H5 → H4 → H3 → H2 → H1
da.
Metodo honek ere ez du ziurtatzen lortutako soluzioa optimoa denentz.
Hala ere, kasu honetan hori da soluzio optimoa. Ibilitako km kopurua
70+65+50+50+40=275 da.
2
1.6
Ariketak
1. Etxetresna elektrikoak tokiz aldatzeko furgoneta baten ahalmena era egok-
ienean aprobetxatu nahi da. Tresna bakoitzaren bolumena eta garraioak
ematen duen irabazia ondoko taulan datoz adieraziak.
Irabazia (Pzta)
Bolumena (
dm3)
Bideoa
2.000
14
Telebista
2.500
135
Garbigailua
4.000
270
Hozkailua
6.000
430
Ontzi-garbigailua
4.500
270
Furgonetaren bolumena 900
dm3-koa da. Garraioan lortutako irabazia max-
imizatzeko furgonetan zein objektu sartu erabakiko duen eredu lineala plantea
ezazu. Soluzio optimoa kalkula ezazu.
2. A, B eta C produktuak
M1, M2 eta M3 makinetan ekoitzi behar dira. Makine-
tatik ondoko ordenean sartu behar dira.
Diagraman ematen da produktuek makina bakoitzean egon behar duten or-
du kopurua. Ahalik eta denbora minimoan ekoizpena egiteko makinetatik
pasatzen diren produktuen ordena zehazteko eredu lineala zehazta ezazu.
3. Graﬁkoki eta aljebraikoki adarkatze- eta bornatze-algoritmoa erabiliz ebatz
itzazu ondoko eredu linealak:

1.6. ARIKETAK
xxxv
3.1.
max z = x1 + x2
o.m.m.
x1 + 2x2 ≤ 14
3x1 + x2 ≤ 18
x1, x2 ≥ 0 eta osokoak
3.2.
max z = 50x1 + 40x2
o.m.m.
x1 + 3x2 ≤ 16
4x1 + 2x2 ≤ 28
x1, x2 ≥ 0 eta osokoak
3.3.
max z = 20x1 + 40x2
o.m.m.
−x1 + 4x2 ≤ 20
2x1 − x2 ≤ 14
x1, x2 ≥ 0 eta osokoak
4. Ondoko 0-1 eredu linealen soluzio optimoa kalkula ezazu.
4.1.
max z = 3x1 + 2x2 + 5x3 + x4
o.m.m.
3x1 + x2 + 2x3 + 4x4 ≤ 4
3x1 + 2x2 + x3 + 5x4 ≤ 5
x1, . . . , x4 = 0, 1
4.2.
max z = 4x1 + 7x2 + 3x3 + 2x4

xxxvi
KAPITULUA 1. OSOKO PROGRAMAZIOA
o.m.m.
−x1 − x2 + 3x3 + 6x4 ≤ 6
−x1 + 6x2 + 3x3 + x4 ≤ 5
x1, . . . , x4 = 0, 1
4.3.
max z = 6x1 − 10x2 − 5x3 + 4x4
o.m.m.
5x1 + 3x2 − x3 + 6x4 ≤ 4
3x1 − x2 + x3 + 3x4 ≤ 4
x1, . . . , x4 = 0, 1
5. Okin batek bere okindegitik gertu dauden 6 herrietan banatzen du eguneroko
ekoizpena. Herrien arteko distantziak taulan ematen dira.
1
2
3
4
5
6
1
0
6
11 9 13 17
2
6
0
5
5
8
12
3 11
5
0
8
8
12
4
9
5
8
0
5
8
5 13
8
8
5
0
4
6 17 12 12 8
4
0
Okinak eguneroko ekoizpena banatzeko kostu minimoko ibilbidea ezagutu
nahi du.
(a) Adarkatze eta bornatze algoritmoa erabiliz kalkula ezazu soluzio opti-
moa.
(b) Aldameneko gertuenaren metodoa erabiliz kalkula ezazu soluzio bat.
(c) Tartekatze-merkeenaren metodoa erabiliz kalkula ezazu soluzio bat.

Kapitulua 2
PROGRAMAZIO DINAMIKOA
2.1
Sarrera
Praktikan sortzen den zenbait optimizazio problema ebazteko programazio di-
namikoa teknika erabiltzen da. Problema horietarako ez da planteamendu es-
tandarrik existitzen, baina guztien ezaugarri amankomuna da zenbait azpiprob-
lematan bana daitezkeela, horiek ebaztea errezagoa izanik.
Zehazki, mota horretako problemen ezaugarriak ondokoak dira:
• Problema etapetan bana daiteke eta grafo baten bidez adieraz daiteke. Etapa
bakoitzeko aldagaiak egoera-aldagaiak dira. Etapa bakoitzean erabaki bat
hartu behar da eta horrek egoera-aldagaien balioak aldatzen ditu. Etapa
bakoitzean hartzen den erabakiak ondokoetan har daitezkenen gain eragina
du.
• Helburu funtzioa etapatan bana daiteke. Etapa bakoitzean har daitezkeen er-
abakiei ordainketa bana dagokie, helburua ordaintze-funtzioa optimizatzea
izanik.
Problema ebazteko metodoa ondokoan oinarritzen da:
• Demagun sistemaren etapa jakin bat aztertzen ari garela. Ondorengo etapetarako
erabaki optimoek ez dute egon behar aurreko etapatan hartutako erabakien
edo lortutako egoeren menpe. Ideia hori Bellman-en optimaltasun-printzipioa
da.
xxxvii

xxxviii
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
• Soluzio optimoa lortzeko problema azpiproblematan banatzen da. Azpiprob-
lema horietako bat ebazten da (etapa bat), eta pausoz pauso etapak gehitzen
dira errekurtsiboki hasierako problemaren soluzioa lortu arte.
Ondoren erabaki-prozesu sekuentzialen ezaugarriak adierazteko bereziki sor-
tutako problema, dilijentziaren problema alegia, aztertuko dugu.
Adibidea. Dilijentziaren problema
Demagun saltzaile batek
H1 hiritik H10 hirira joan behar duela dilijentziaz.
Grafoan ikusten den bezala ibilbide desberdinetatik joan daiteke. Bertan bide
posible guztiak adierazten dira, eta arkuetan hirien arteko distantziak ematen dira.
Ikus daitekeenez, saltzaileak lau etapatan egin beharko du
H1-etik H10-erako
bidea. Etapa bakoitzeko egoerak, erabakiak eta erabaki bakoitzari dagokion or-
dainketa ematen dira. Adibidez, lehenengo etapako hasierako egoera
H1 hiria da,
etapa horren bukaerako egoerak
H2, H3 eta H4 direlarik. Lehenengo etapan har
daitezkeen erabakiak
H1 hiritik H2 hirira joatea, H1-etik H3-ra joatea eta H1-etik
H4-ra joatea dira eta ordainketak, egindako km kopurua, 1, 2, eta 8 unitatekoak
dira, hurrenez hurren.
Erabaki beharko dena zera da: zein da saltzaileak egin beharko duen bidea
burututako km kopurua minimoa izateko?
Adibide honetan, ibilbide motzena kalkulatzeko bide guztiak zerrenda daitezke,
bakoitzari dagokion ordainketa kalkulatu eta luzera minimokoa soluzio optimoa
izango da. Hala ere, prozedura hori ez da egokia problema handi samarra den-
erako. Mota horretako problemak ebazteko programazio dinamikoa teknika er-
abiltzen da.
Beste aukera bat etapa bakoitzeko ibilbide motzena hautatzea da, baina meto-
do horrekin ez da ziurtatzen soluzio optimoa lortuko denik. Modu honetan lortuko
genukeen ibilbidea
H1 → H2 → H5 → H8 → H10 izango litzateke. Gero
ikusiko dugunez, soluzio hori ez da optimoa. Etapa batean kilometro gehiago
egiteak problema osorako ibilitako kilometro kopuruaren aurreztea ekar dezake.
Kapitulu honetan erabaki-prozesu sekuentzialen soluzioa lortzeko erabiltzen
den programazio dinamikoaren teknika garatuko dugu.
2.2
Erabaki-prozesu sekuentzialak
Erabaki-prozesu sekuentzial guztiek antzeko egitura dute. Erabaki-azpiproblema
bakoitza eskematikoki ondoko eran adieraz daiteke.

2.2. ERABAKI-PROZESU SEKUENTZIALAK
xxxix
x sarrera-aldagaiak sistemaren hasierako egoerak ematen ditu, etapa hone-
tan erabakirik hartu baino lehen.
d aldagaia erabaki-aldagaia da eta etapa hone-
tan har daitezkeen erabaki guztiak ematen ditu. Etapa honetako erabakia har-
tu eta gero
y irteera-aldagaiak sistemaren egoerak ematen dizkigu. s funtzioak
x sarrera-aldagaia, y irteera-aldagaia eta d erabaki-
aldagaiak erlazionatzen ditu.
r ordaintze-funtzioa sarrera-aldagaiaren eta erabaki-aldagaiaren menpe dago eta
hartutako erabakiaren eraginkortasuna neurtzen du.
n etapetako erabaki-prozesu sekuentzial batean lehen deskribatutakoa beza-
lako etapak lotzen dira, baina kontuan hartu behar da etapa bateko irteera-
aldagaia
hurrengo etapako sarrera-aldagaia dela. Eskematikoki,
non
i. etapa bakoitzerako honako aldagai eta funtzioak ditugun.
• xi
−
1: sarrera egoera-aldagaia.
• xi: irteera egoera-aldagaia.
• di: erabaki-aldagaia.
• ri(xi
−
1, xi) = ri(xi−1, di), di erabakiari eta xi−1 aldagaiari dagokien or-
dainketa den, edo beste modu batera esanda,
xi
−
1 egoeratik xi egoerarako
trantsizioari dagokion ordainketa, trantsizioa hartutako erabakiaren menpe
dagoelarik.
i. etapako erabaki posibleak eta egoera-aldagaiak s(xi
−
1, xi) edo s(xi−1, di)
trantsizio-funtzioaren bidez zehazten dira, hau da, sarrera-egoera eta irteera-
egoera
emanik etapako erabakia zehazta daiteke, edo sarrera-egoera eta erabakia emanik
irteera-egoera eman daiteke.
n etapatako prozesuaren ordaintze-funtzioa honakoa da.
f (x0, . . . , xn) = r1(x0, x1) ⊗ . . . ⊗ ri(xi
−
1, xi) ⊗ . . . ⊗ rn(xn−1, xn) =
= r1(x0, d1) ⊗ . . . ⊗ ri(xi
−
1, di) ⊗ . . . ⊗ rn(xn−1, dn)
non
⊗ eragiketa batuketa, biderkaketa edo beste edozein konposizio-lege den.
Lortu behar duguna zera da: ordainketa-funtzioaren balioa optimizatuko duen
erabaki-multzoa aurkitzea etapa guztietarako.
opt
x0, . . . , xn
f (x0, x1, . . . , xn) =
opt
x0, . . . , xn
{r1(x0, x1) ⊗ . . . ⊗ rn(xn
−
1, xn)}

xl
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
2.3
Bellman-en optimaltasun printzipioa. Politikak
eta azpipolitikak
Erabaki-prozesu sekuentzialen soluzio optimoak lortzeko metodoa Bellman-en
optimaltasun printzipioan oinarritzen da eta, azpiproblemen ebazpenaren bidez
problemaren soluzio optimoa lortzeko, funtzio errekurtsiboa erabiltzen da. Ikus
ditzagun ondoren zenbait deﬁnizio eta teorema, horiekin Bellman-en printzipioa
eta funtzio errekurtsiboa eman ahal izateko.
Deﬁnizioa 2.3.1 (Politika) Erabaki-prozesu sekuentzial bat emanik, lehenengo
etapatik azken etaparako
{d1, d2, . . . , dn} erabaki-segidari politika deitzen zaio.
Deﬁnizioa 2.3.2 (Azpipolitika) Erabaki-prozesu sekuentzial batean, edozein kop-
urutako
{dj, dj+1, . . . , dk
−
1, dk} 1 ≤ j < k ≤ n erabaki-segidari azpipolitika
deitzen zaio, .
Deﬁnizioa 2.3.3 (Politika optimoa) Lehenengo etapatik azken etapara doan er-
abakien multzoak edo politikak ordaintze-
funtzioa optimizatzen badu, orduan poli-
tika optimoa dela esaten da eta
{d∗1, d∗2, . . . , d∗n} izendatuko dugu.
Teorema 2.3.1 Politika optimoa azpipolitika optimoz bakarrik osatuta egon daiteke.
Edo, politika optimo baten edozein azpipolitika optimo da.
Bellman-en optimaltasun printzipioa. Bellmanek
n. etapatik 1.go etaparako
optimaltasun printzipioa eman zuen: Politika bat optimoa da baldin eta edozein
etaparako sarrera-egoera emanik, ondorengo erabakiek azpipolitika optimoa os-
atzen badute. Politika horiei aurretik atzeranzko politika esaten zaie.
Atzetik aurrera optimizatzeko, hau da 1. etapatik
n etapara joateko ondoko
printzipio duala eman daiteke: politika bat optimo da baldin eta edozein eta-
patarako irteera-egoera emanik, aurreko erabakiek azpipolitika optimoa osatzen
badute.
2.4
Funtzio errekurtsiboa
n etapatako erabaki-prozesu sekuentziala emanik, ordainketa optimoko politika
zehaztu nahi da, hau da, ordainketa maximokoa edo minimokoa.
Prozesuaren
n etapatarako ordaintze-funtzioa emanik,

2.4. FUNTZIO ERREKURTSIBOA
xli
f (x0, x1, . . . , xn) = r1(x0, x1) ⊗ . . . ⊗ ri(xi
−
1, xi) ⊗ . . . ⊗ rn(xn−1, xn)
balio optimoa kalkulatu behar da errekurtsiboki.
opt
x0, . . . , xn
f (x0, x1, . . . , xn) =
opt
x0, . . . , xn
{r1(x0, x1) ⊗ . . . ⊗ rn(xn
−
1, xn)}
Adibide gehienetan
⊗ konposaketa-legea batuketa denez, (zenbait kasutan
biderkaketa izan daiteke), optimizatzeko emango dugun funtzio errekurtsiboan
batuketa erabiliko dugu.
Bellman-en optimaltasun printzipioa kontuan hartuz eta prozesuaren azken
etapatik hasiz,
i + 1. etapatik ordaintze-funtzio optimoa (f ∗
i
+1(xi)) ezagututa,
i. etapatik ordaintze-funtzioa honela kalkulatuko da.
f (xi
−
1, xi) = ri(xi−1, xi) + f
∗
i
+1(xi)
Funtzio hori optimizatuz eta azken etapako irteera-aldagaiaren balioetarako
funtzio errekurtsiboa hasieratuz, ondoko aurretik atzeranzko funtzio errekurtsiboa
daukagu.
f ∗
n
+1(xn) = 0
f
∗
i (xi−1) =
opt
xi
{ri(xi
−
1, xi) + f
∗
i
+1(xi)}
,
i = n, n − 1, . . . , 1
Prozesu osorako balio optimoa
f ∗1(x0) da.
Printzipio duala kontutan hartuz, ondoko atzetik aurreranzko funtzio errekurt-
siboa eman daiteke. Kasu honetan,
f ∗
i (xi) funtzioa 1.
etapatik
i. etaparako
ordaintze-funtzio optimoa da, eta funtzio errekurtsiboa 1. etapako sarrera-
egoera
aldagaiaren balioetarako hasieratzen da.
f ∗
0 (x0) = 0
f ∗
i (xi) =
opt
xi
−
1
{ri(xi
−
1, xi) + f
∗
i−
1(xi−1)}
,
i = 1, 2, . . . , n
Prozesu osorako balio optimoa
f ∗
n (xn) izango da.

xlii
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
2.5
Problema dinamikoen planteamendu eta ebazpe-
na
Oro har, bi erlazio errekurtsiboak 
(aurreranzkoa edo atzeranzkoa) erabiliz progra-
mazio dinamikoko problemak ebatz daitezke. Jarraian, bi erlazio errekurtsiboen
aplikazioak ikusiko ditugu.
2.5.1
Dilijentziaren problema
xxxviii orrialdean planteatutako dilijentziaren problema ebazteko aurretik atzer-
anzko funtzio errekurtsiboa erabiliko dugu. Arkuetan ibilbide bakoitzaren dis-
tantziak agertzen dira. Distantzia horiek ibilbide bakoitzaren ordainketak dira eta
H1-etik H10-era joateko ordaintze-funtzioa ondokoa da.
f (x0, x1, x2, x3, x4) = r1(x0, x1) + r2(x1, x2) + r3(x2, x3) + r4(x3, x4)
Bide motzena kalkulatu nahi dugu, hau da,
H1-etik H10-era joateko biderik
motzena.
f ∗
1 (x0) =
min
x0, . . . , x4
f (x0, x1, x2, x3, x4)
Formula errekurtsiboaren hasieraketa
f ∗5(x4) = 0 da.
4 Etapa
4. etaparako ondokoa kalkulatzen dugu
f ∗
4 (x3) =
min
x4
{r4(x3, x4) + f ∗5(x4)}
Taulako lehenengo zutabean etapa honetako sarrera-aldagaiaren balioak ja-
sotzen dira
(H7, H8, H9). Hurrengo zutabeetan (bakarra kasu honetan), etaparen
irteera-aldagaiaren balioak
(H10) eta laukitxoan dator hurrengo etapatik amaier-
ara dagoen ordaintze-funtzio optimoa,
f ∗
5 (x4) alegia. Kasu honetan f
∗
5 (x4) = 0
da. Zutabe horietan
f (x3, x4) = r4(x3, x4) + f ∗5(x4) ordainketak kokatuko ditugu.
Azkenaurreko zutabean
f (x3, x4) funtzioaren optimoa f ∗4(x3) kalkulatzen dugu.
Azken zutabean sarrera-egoera bakoitzari dagokion irteera-egoera optimoa emat-
en da.

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA xliii
x4
x3
H10 0
f ∗4(x3) x∗4
H7
8 + 0
8
H10
H8
10 + 0
10
H10
H9
11 + 0
11
H10
Hau da,
f ∗
4 (x3) funtzioak H7 hiritik, H8 hiritik eta H9 hiritik H10 hirira iristeko
bide motzenak (optimoak) zenbat km dituen ematen du. ??.orriko grafoan, hiri
bakoitzetik bide egokiena azpimarratzen da.
3. etapa
Etapa honetarako sarrera-egoerak
H5 eta H6 dira, eta irteera-egoerak H7, H8
eta
H9.
f ∗
3 (x2) =
min
x3
{r3(x2, x3) + f ∗4(x3)}
x3
x2
H7 8
H8 10
H9 11
f ∗
3 (x2)
x∗
3
H5
9 + 8
2 + 10
4 + 11
12
H8
H6
3 + 8
6 + 10
9 + 11
11
H7
Taulako laukitxoetan 4. etapatik aurrera lortu ahal izango den ordainketa opti-
moa,
f ∗
4 (x3), agertzen dela ikus dezakegu (aurreko etapan kalkulatutako ordainke-
tak).
H7, H8 eta H9 zutabeetan f (x2, x3) funtzioa. Adibidez, 2. zutabean, baldin
sarrera-egoera
x2 = H5 bada eta x3 = H7 hirira bagoaz, hortik amaierara bide
motzenetik jarraituz gero,
f (H5, H7) km egin beharko genituzke.
f (H5, H7) = r(H5, H7) + f ∗4(H7) = 9 + 8
Azkenaurreko zutabean, 12 balioak
H5 hiritik H10 hirira joateko dagoen ibil-
bide motzenaren luzera adierazten du; errenkadako balio optimoa. Taulako azken
zutabean ibilbide minimo hori egiteko zein hiritara joan behar den esaten da. Ikus
itzazu grafoan etapa honetan aukeratutako ibilbideak.

xliv
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
2. etapa
Etaparako funtzio errekurtsiboa,
f ∗2(x1) = min
x2
{r2(x1, x2) + f ∗3(x2)}
x2
x1
H5 12
H6 11
f ∗2(x1)
x∗2
H2
6 + 12
7 + 11
18
H5, H6
H3
3 + 12
1 + 11
12
H6
H4
8 + 12
6 + 11
17
H6
f ∗
2 (x1) funtzioak H2 hiritik H10 hirira joateko daukagun bide motzenaren luzera
(18) ematen du,
H3 hiritik H10 hirirainoko distantzia txikiena (12), eta H4-tik H10-
erako distantzia motzena (17). Grafoan bide horiek azpimarratuta agertzen dira.
1 etapa
Etapa honetarako funtzio errekurtsiboa
f ∗
1 (x0) =
min
x1
{r1(x0, x1) + f ∗2(x1)}
x1
x0
H2 18
H3 12
H4 17
f ∗
1 (x0)
x∗
1
H1
1 + 18
2 + 12
8 + 17
14
H3
Ondoko grafoan, etapa guztietarako hasierako hirietatik amaierako hirietara
joateko ibilbide onenak azpimarratuta agertzen dira 
(tauletan lortutako kalkuluak).
H1etik H10era joateko bide motzena puntuz azpimarratuta agertzen da.
H1 → H3 → H6 → H7 → H10 ibilbidea politika optimoa da. Graﬁkan
puntuz adierazi da ibilbide optimo hori. Ordaintze-funtzioaren balio minimoa
f ∗
1 (x0) = 14 da.

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA xlv
2.5.2
Aholkularien banaketaren problema bat.
Enpresa batek
P1, P2, P3 motako produktuak saltzen ditu. Salmenta-kopurua han-
ditzeko bi aholkulari ditu. Produktu bakoitzaren salmentaren probabilitatea ezagutzen
da, hau da, aholkulariak salmenta lanetan jardun gabe (ikus taula). Produktu
bakoitzaren publizitate-
kanpainatan aholkulari 1 edo 2 lanean jardunez gero, lor-
tuko liratekeen produktuen salmenta-probabilitateak kalkulatu dira. Aholkulari
bakoitzak produktu-mota bakar baten publizitatea egin dezake. Salmenta-
probabilitateak
taulan jasotzen dira.
Aholkulari
Salmenta-prob.
kopurua
p(P1) p(P2) p(P3)
0
0.3
0.4
0.3
1
0.6
0.7
0.5
2
0.8
0.85
0.8
Enpresak produktuen salmenta-probabilitatea maximizatu nahi du. 3 produk-
tuen salmenta-
probabilitatea maximizatzeko aholkulariek zein produkturen publizitate-
kanpainak egingo dituzten erabaki behar da.
Problema hau 3 etapatan banatuko dugu (3 produktu mota). Etapa bakoitzean
dagokion produktuari zenbat aholkulari esleitu behar zaion erabakiko dugu.
i. etaparako aldagaiak eta funtzioak deﬁnituko ditugu, i = 1, 2, 3.
• xi aldagaiak 1, . . . , i etapatan esleitutako aholkulari kopurua adierazten du,
xi
−
1 ≤ xi ≤ 2.
• di aldagaia i etapan esleitutako aholkulari kopurua da, 0 ≤ di ≤ 2 − xi
−
1.
• Trantsizio-funtzioa xi = xi
−
1 + di da i = 1, 2, 3. Suposa daiteke aholkulari
guztiak esleitu nahi direla. Hortaz,
x3 = 2 izango da. Hasieran ez dago
aholkularirik esleituta, beraz,
x0 = 0 da.
• Etapa bakoitzaren ordainketa, ri(xi
−
1, xi) = p(Pi), i. etapako produktuaren
salmenta-probabilitatea da
xi − xi
−
1 aholkulari esleitzen zaionean.
3 etapatarako ordaintze-funtzioa
f (x0, x1, x2, x3) = r1(x0, x1) × r2(x1, x2) × r3(x2, x3)

xlvi
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
Kasu honetan, konposizio-legea biderkaketa da, 3 produktuen salmenta-
probabilitatea
delako maximizatu behar dena.
Helburu-funtzioa:
max
x0, . . . , x3
f (x0, x1, x2, x3) =
=
max
x0, . . . , x3
r1(x0, x1) × r2(x1, x2) × r3(x2, x3)
Aurreko adibidean bezala, aurretik atzeranzko formula errekurtsiboa erabil
dezakegu, baina kasu honetan atzetik aurreranzko formula errekurtsiboa erabiliko
dugu.
1. etapa
Lehenengo etapatik hasiz,
P1 produktuari 0, 1 edo 2 aholkulari esleitzea azter-
tuko dugu
• Sarrera egoera-aldagaia: x0 = 0, oraindik aholkularirk ez delako esleitu.
• Erabaki-aldagaia: 0 ≤ d1 ≤ 2 − x0. x0 = 0 denez, 0 ≤ d1 ≤ 2 da.
Etapa honetan lehenengo produktuari 0, 1 edo 2 aholkulari esleitzea erabaki
daiteke.
• Trantsizio-funtzioa: x1 = x0 + d1. x0 = 0 denez, eta 0 ≤ d1 ≤ 2 denez,
0 ≤ x1 ≤ 2 da.
• Ordainketa: r1(x0, x1) = p(P1) funtzioa 1. produktuaren salmenta-
probabilitatea
da
d1 aholkulari esleitzen zaionean. Datu horiek taulan aurkitzen dira.
• Funtzio errekurtsiboa: f ∗1(x1) = max
x0
{r1(x0, x1) × f ∗0(x0)}.
Konposaketa legea biderkaketa denez, formula errekurtsiboaren hasieraketa
f ∗0(x0) = 1 da.
Aurreranzko funtzio errekurtsiboa erabiltzen ari garenez, taulan lehenengo
zutabean irteera-aldagaiaren balioak datoz.

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA xlvii
x0
x1
0 1
f ∗1(x1) x∗0
0
0.3 × 1
0.3
0
1
0.6 × 1
0.6
0
2
0.8 × 1
0.8
0
f ∗
1 (x1) funtzioak x1 = 0, x1 = 1 eta x1 = 2 egoeretara iristeko dagoen prob-
abilitate maximoa ematen du. Etaparen irteera-egoera edozein izanik ere,
x1 =
0, 1, 2, x∗
0 = 0 egoeratik iristea komeni dela ondorioztatzen da aurreko taulan. Ka-
su honetan, sarrera-
egoera bakarra izateagatik, aukera bakarra da. Azken grafoan
azpimarratuta ikus daitezke etapa honetarako aukera onenak.
2. etapa
• Sarrera egoera-aldagaia: 0 ≤ x1 ≤ 2.
• Erabaki-aldagaia: 0 ≤ d2 ≤ 2 − x1.
• Trantsizio-funtzioa: x2 = x1 + d2. 0 ≤ x1 ≤ 2 eta 0 ≤ d2 ≤ 2 direnez,
0 ≤ x2 ≤ 2 da.
• Ordainketa: r2(x1, x2) = p(P2) funtzioa 2. produktuaren salmenta-
probabilitatea
da
d2 aholkulari esleitzen zaionean.
• Funtzio errekurtsiboa: f ∗
2 (x2) =
max
x1
{r2(x1, x2) × f ∗1(x1)}.
Taulan kalkuluak eginez,
x1
x2
0 0.3
1 0.6
2 0.8
f ∗2(x2) x∗1
0
0.4 × 0.3
−
−
0.12
0
1
0.7 × 0.3
0.4 × 0.6
−
0.24
1
2
0.85 × 0.3 0.7 × 0.6 0.4 × 0.8
0.42
1

xlviii
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
Taulan marratxoz, -, agertzen diren trantsizioak ezinezkoak dira. Ikus daiteke
x2 = 0 egoerara iristeko aurreko egoera onena x1 = 0 dela eta x2 = 1 eta x2 = 2
egoeretara iristeko
x1 = 1 egoeratik abiatzea komeni dela bietarako.
3. etapa
• Sarrera egoera-aldagaia: 0 ≤ x2 ≤ 2.
• Erabaki-aldagaia: d3 = 2 − x2, aholkulari guztiak esleituak izan daitezen.
• Trantsizio-funtzioa: x3 = x2 + d3. Aholkulari guztiak esleitu behar direnez,
x3 = 2 izango da beti.
• Ordainketa: r3(x2, x3) = p(P3).
• Funtzio errekurtsiboa: f ∗
3 (x3) =
max
x2
{r3(x2, x3) × f ∗2(x2)}.
Ondoko taulan kalkuluak eginez,
x2
x3
0 0.12
1 0.24
2 0.42
f ∗
3 (x3)
x∗
2
2
0.8 × 0.12 0.5 × 0.24 0.3 × 0.42
0.126
2
x3 = 2 egoerara iristeko ibilbide onena x2 = 2 egoeratik joatea da. Politika
optimoa
x∗
3 = 2 → x
∗
2 = 2 → x
∗
1 = 1 → x
∗
0 = 0 da, hau da, P1 produktuaren
publizitateari aholkulari bat emango zaio,
P2 produktuari beste bat eta P3 pro-
duktuari aholkularirik ez zaio egokituko. Honako grafoan erabaki posible guztiak
adierazten dira. Etapa bakoitzerako ordaintze-
funtzio optimoa beltzez agertzen da
eta ibilbide optimoa puntuz adierazia dago.
2.5.3
Ekoizpenaren eta inbentarioen problemak
Demagun enpresa batek hurrengo
n epetarako bere bezeroen eskaria betetzeko
ekoizpena antolatu behar duela. Eskariak eta ekoizpen ahalmena desberdinak dira
epe bakoitzean. Epe batean ekoitzi eta erabili ez den ekoizpena hurrengo epee-
tarako biltegiratua izan daiteke, biltegiratzeak kostu gehigarri bat suposatzen badu
ere. Enpresaren helburua ekoizpen eta biltegiratze kostu minimoan bezeroen es-
kariak betetzea da.

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA xlix
Programazio dinamikoko problema baten moduan planteatu eta ebatzi ahal
izateko, ondoko aldagai eta funtzioak deﬁnituko ditugu.
• xi egoera-aldagaiak i. etapako bukaerako inbentarioa adierazten du, ekoiztu
eta etapako eskaria zerbitzatu eta gero. Suposa dezakegu
xn = 0 dela, hau
da, azken etaparen amaieran ez dela biltegian produktu-unitaterik gelditzen.
• di erabaki-
aldagaia etapa honetan eskaria betetzeko ekoiztu behar den produktu-
unitate kopurua ematen du.
Suposatuko dugu aldagaien balioak osoko direla.
i. etapako eskaria ai, ekoizpen-
ahalmena
ei eta biltegiratze-ahalmena bi ezagunak dira. Transizio-funtzioak sar-
rera egoera-aldagaia, irteera egoera-aldagaia, erabakia-
aldagaia eta eskaria er-
lazionatzen ditu:
xi = xi
−
1 + di − ai, hau da, hasierako inbentarioa gehi ekoizpena
ken etapako eskaria izango da etaparen amaieran dagoen inbentarioa. Etapako
ordainketa etaparen hasierako inbentarioaren eta etapako ekoizpenaren menpe
dago. Trantsizio-funtzioa kontuan hartuz,
i etapako ordainketa ri(xi
−
1, di) edo
ri(xi
−
1, xi) adieraz daiteke, eta
ri(xi
−
1, xi) = ci × di + vi × xi−1
non
ci ekoizpen-kostua den eta vi biltegiratze-kostua.
Azken etapatik hasten bagara,
• xn = 0, hau da, azken etaparen amaieran biltegian ez da unitaterik geldituko.
• Trantsizio-funtzioa xn = xn
−
1 + dn − an da. xn = 0 bete behar denez,
dn = an − xn
−
1 izango da.
• Ordainketa rn(xn
−
1, xn) = cn × dn + vn × xn−1.
• Funtzio errekurtsiboa.
f ∗
n (xn−1) =
min
xn
{rn(xn
−
1, xn) + f
∗
n
+1(0)}
Funtzio errekurtsiboaren hasieraketa:
f ∗
n
+1(xn) = 0

l
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
n − 1 etapan sarrera egoera-aldagaia xn
−
2 da eta bere balioak 0 eta ekoizpen-
ahalmenaren artean daude. Erabaki-aldagaiak ondoko tartean mugituko dira.
an
−
1 − xn−2 ≤ dn−1 ≤ min{en−1, an + an−1 − xn−2}
an
−
1 − xn−2 ≤ dn−1 bete behar da n − 1 etapako eskaria bete ahal iza-
teko. Gainera,
dn
−
1 etapako ekoizpena-ahalmenaz mugatuta dago dn−1 ≤ en−1.
Azkenik,
dn
−
1 ≤ an + an−1 − xn−2 bete behar da amaierako inbentarioa 0 izango
dela ziurtatzeko. Azken bi etapatako ordaintze-funtzio optimoa honakoa da.
f ∗
n−
1(xn−2) =
min
xn
−
1
{rn
−
1(xn−2, xn−1) + f
∗
n (xn−1)}
Prozedura berberari jarraituz
f ∗
1 (x0) lortzen da, hau da, ekoizpen optimoko
politika.
Adibidea
Robotak ekoizten dituen enpresa batek hurrengo lau hilabeteetarako ekoizpe-
na antolatzen ari da. Lau hilabeteetarako zerbitzatu beharko dituen eskariak,
ai,
ondokoak dira hurrenez hurren: 2, 4, 4 eta 5. Ekoizpen-ahalmenari, ekoizpen-
kostuari eta biltegiratze-kostuari buruzko datuak ondoko taulan datoz.
Ek.Ahalm.
Bilt.Ahalm.
Ek.Kostua
Bilt.Kostua
Hilabetea
ei
bi
ci
vi
1
5
2
2
1
2
5
3
3
2
3
3
4
5
2
4
4
3
5
2
Eskariak kostu minimoan zerbitzatu ahal izateko enpresak ekoizpena antolatu
nahi du. Azken hilabetearen amaierako inbentarioak zero izan behar du.
Lau etapa izango ditugu. Etapa bakoitzean hilabete bakoitzerako ekoizpen-
maila erabakiko da. Problema ebazteko aurretik atzeranzko funtzio errekurtsiboa
erabiliko dugu. Horrela, laugarren etapatik hasiko gara.
4. etapa

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA
li
• Irteera egoera-aldagaia. Azken etaparen amaierako inbentarioak 0 izan be-
har duenez,
x4 = 0 izango da.
• Erabaki-aldagaia. Ekoitzi daitekeen robot-kopurua etapako ekoizpen-almenak
mugatuta dago,
0 ≤ d4 ≤ 4.
• Trantsizio-funtzioa. d4 = x4 − x3 + a4. x4 = 0 eta a4 = 5 direnez,
d4 = 5 − x3 izango da.
• Sarrera egoera-aldagaia. Aurreko trantsizio-funtzioa, d4 ≤ 4 eta b4 = 3
direla kontuan izanik,
1 ≤ x3 ≤ 3 ondorioztatzen da.
• Ordainketa. r4(x3, x4) = c4 × d4 + v4 × x3.
• Funtzio errekurtsiboa. f ∗
4 (x3) =
min
x4
{r4(x3, x4) + f ∗5(x4)}
Funtzio errekurtsiboaren hasieraketa,
f ∗5(x4) = 0.
Kalkuluak ondoko taulan egingo ditugu.
x4
x3
0 0
f ∗
4 (x3)
x∗
4
1
5 × (0 − 1 + 5) + 2 × 1 = 22
22
0
2
5 × (0 − 2 + 5) + 2 × 2 = 19
19
0
3
5 × (0 − 3 + 5) + 2 × 3 = 16
16
0
Etapako irteera egoera-aldagaiaren balio optimoa
x4 = 0 izango da (kasu
honetan bakarra), sarrera egoera-aldagaiaren edozein baliotarako.
3. etapa
• Irteera egoera-aldagaia, 1 ≤ x3 ≤ 3, aurreko etapan ikusi bezala.
• Erabaki-aldagaia, 0 ≤ d3 ≤ 3, etapa honetako ekoizpena honela murriztuta
dagoelako.
• Trantsizio-funtzioa, d3 = x3 − x2 + a3. a3 = 4 denez, orduan, d3 =
x3 − x2 + 4.

lii
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
• Sarrera egoera-aldagaia. Aurreko trantsizio-funtzioa, d3 ≤ 3 eta b3 = 4
direla jakinik,
2 ≤ x2 ≤ 4 izango da.
• Ordainketa. r3(x2, x3) = c3 × d3 + v3 × x2.
• Funtzio errekurtsiboa. f ∗
3 (x2) =
max
x3
{r3(x2, x3) + f ∗4(x3)}
Ondoko taulan trantsizio guztien ordainketa agertzen da eta sarrera egoera-
aldagai bakoitzerako ordainketa optimoa.
x3
x2
1
22
2
19
3
16
f ∗
3 (x2 )
x∗
3
2
5 × 3 + 2 × 2 + 22 = 41
-
-
41
1
3
5 × 2 + 2 × 3 + 22 = 38
5 × 3 + 2 × 3 + 19 = 40
-
38
1
4
5 × 1 + 2 × 4 + 22 = 35
5 × 2 + 2 × 4 + 19 = 37
5 × 3 + 2 × 4 + 16 = 39
35
1
2. etapa
• Irteera egoera-aldagaia, 2 ≤ x2 ≤ 4.
• Erabaki-aldagaia, 0 ≤ d2 ≤ 5, 2. etaparen ekoizpen-ahalmenak mugatuta.
• Trantsizio-funtzioa, d2 = x2 − x1 + a2. Beraz, d2 = x2 − x1 + 4.
• Sarrera egoera-aldagaia. Aurreko trantsizio-funtzioa, d2 ≤ 5 eta b2 = 3
dela jakinik,
1 ≤ x1 ≤ 3 izango da.
• Ordainketa. r2(x1, x2) = c2 × d2 + v2 × x1.
• Funtzio errekurtsiboa. f ∗
2 (x1) =
max
x2
{r2(x1, x2) + f ∗3(x2)}
x2
x1
2
41
3
38
4
35
f ∗
2 (x1 )
x∗
2
1
3 × 5 + 2 × 1 + 41 = 58
-
-
58
2
2
3 × 4 + 2 × 2 + 41 = 57
3 × 5 + 2 × 2 + 38 = 57
-
57
2,3
3
3 × 3 + 2 × 3 + 41 = 56
3 × 4 + 2 × 3 + 38 = 56
3 × 5 + 2 × 3 + 35 = 56
56
2,3,4
1. etapa

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA
liii
• Irteera egoera-aldagaia, 1 ≤ x1 ≤ 3.
• Erabaki-aldagaia, 0 ≤ d1 ≤ 5.
• Trantsizio-funtzioa, d1 = x1 − x0 + 2.
• Sarrera egoera-aldagaia, x0 = 0.
• Ordainketa, r1(x0, x1) = c1 × d1 + v1 × x0.
• Funtzio errekurtsiboa. f ∗
1 (x0) =
max
x1
{r1(x0, x1) + f ∗2(x1)}
x1
x0
1
58
2
57
3
56
f ∗
1 (x0 )
x∗
1
0
2 × 3 + 1 × 0 + 58 = 64
2 × 4 + 1 × 0 + 57 = 65
2 × 5 + 1 × 0 + 56 = 66
64
1
Politika optimoa:
x∗
0 = 0
→
x∗
1 = 1
→
x∗
2 = 2
→
x∗
3 = 1
→
x∗
4 = 0
hau da,,
Hilabetea
Hasierako inb.
Ekoizpena
Eskaria
Amaierako inb.
1
0
3
2
1
2
1
5
4
2
3
2
3
4
1
4
1
4
5
0
Graﬁkoki problema honako eran adieraz daiteke. Etapa bakoitzaren hasieran
ekoizpena gauzatuko da, gero eskaria bete eta soberan gelditzen dena biltegiratua
izateko; etapako irteera-aldagaiaren balioa izango da.
Laburbilduz,
Puntuz marraztutako bideak politika optimoa adierazten du.

liv
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
2.5.4
Motxilaren problema
n objektu-mota desberdinekin motxila bat bete nahi da. i objektu-
mota bakoitzari,
i = 1, . . . , n Pi pisua (edo bolumena) eta ci balioa dagozkio.
Motxilaren pisu (edo bolumen) maximoa P da. Lortu nahi dena zera da: mota
bakoitzeko zenbat objektu sartu behar den motxilan bere edukiaren balioa maximo
izan dadin, motxilaren pisu-ahalmena gainditu gabe.
Programazio dinamikoa erabiltzeko prozesuak
n etapa dituela suposatzen dugu.
Etapa bakoitzean produktu-mota bakoitzeko zenbat unitate aukeratzen diren motx-
ilan sartzeko erabakitzen da. Horretarako ondoko aldagai eta funtzioak deﬁnitzen
ditugu.
• xi: i. objektu-motaren unitateak motxilan sartu eta gero bertan gelditzen
den ahalmen erabilgarria.
• di: motxilan sartuko den i. objektu-motako unitate-kopurua, i = 1, . . . , n.
Honela,
0 ≤ di ≤ [
xi
−1
Pi ]
1.
• Trantsizio-funtzioa: xi = xi
−
1 − Pi × di ,
i = 1, . . . , n.
• Ordainketa: ri(xi
−
1, xi) = ci × di
• Funtzio errekurtsiboa: f ∗
i (xi) =
max
xi
−
1
{ri(xi
−
1, xi) + f
∗
i−
1(xi−1)}, i =
1, . . . , n. Hasieraketa: f ∗0(x0) = 0.
Adibidea
Etxetresna elektrikoak tokiz aldatzeko furgoneta baten ahalmena era egokie-
nean aprobetxatu nahi da. Tresna bakoitzaren bolumena eta garraioak ematen
duen irabazia ondoko taulan datoz adieraziak.
1 xi−1
Pi -ren zati osoa [
xi
−1
Pi ] da, i = 1, . . . , n

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA
lv
Etxetresna
Irabazia
cn (Pzta) Bolumena vn (dm3)
Telebista
2.500
200
Garbigailua
4.000
300
Hozkailua
6.000
400
Baxera-garbigailua
4.500
300
Furgonetaren bolumena 900
dm3-koa da. Garraioan lortutako irabazia maxi-
mizatzeko, furgonetan objektu-
mota bakoitzeko zenbat unitate sartu erabaki behar
da.
4 objektu-mota daukagunez, 4 etapatan banatuko dugu prozesua. Problema
ebatziko dugu lehenengo etapatik hasiz, atzetik aurreranzko funtzio errekurtsiboa
erabiliko dugularik.
1. etapa
Furgonetan zenbat telebista sartu erabakiko dugu etapa honetan.
• Sarrera egoera-aldagaia. Hasieran furgonetaren ahalmena 900 dm3-koa da,
hau da,
x0 = 900.
• Erabaki-aldagaia, 0 ≤ d1 ≤ [
900
200 ], hau da, 0 ≤ d1 ≤ 4. Telebistaren bolu-
menra
200 dm3-koa denez, [900
200 ] unitate sartuko da furgonetan gehienez.
• Trantsizio-funtzioa, x1 = x0 − 200 × d1, hau da, etaparen amaieran fur-
gonetan dagoen bolumen erabilgarria etaparen hasieran zegoena ken etapa
honetan betetakoa izango da.
• Irteera egoera-aldagaia, x1 = 100, 300, 500, 700, 900, furgonetan 0, 1, 2, 3
edo 4 telebista sartzearen araberakoa da.
• Ordainketa, r1(x0, x1) = 2.500 × d1, hau da, furgonetan sartutako telebista
kopuruaren araberakoa da.
• Funtzio errekurtsiboa f ∗1(x1) = max
x0
{r1(x0, x1) + f ∗0(x0)}. Hasieraketa:
f ∗0(x0) = 0

lvi
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
x0
x1
900 0
f ∗1(x1)
x∗0
100 2.500 × 4 10.000 900
300 2.500 × 3
7.500 900
500 2.500 × 2
5.000 900
700 2.500 × 1
2.500 900
900 2.500 × 0
0 900
Sarrera-egoera optimoa edozein irteera-egoeratarako
x0 = 900.
2. etapa
Etapa honetan furgonetan garbigailua sartzea aztertuko dugu.
• Sarrera egoera-aldagaia, x1 = 100, 300, 500, 700, 900, aurrean ikusi bezala.
• Erabaki-aldagaia, 0 ≤ d2 ≤ [
x1
300 ], hau da, 0 ≤ d2 ≤ 3. Garbigailuaren
bolumena 300
dm3-koa denez furgonetan gehienez [
x1
300 ] unitate sartu ahal
izango dira.
• Trantsizio-funtzioa, x2 = x1 − 300 × d2.
• Irteera egoera-aldagaia, x2 = 0, 200, 300, 400, 500, 600, 700, 900. Balio
horiek aurreko trantsizio-funtzioa eta
d2 eta x1 aldagaien balioak erabiliz
lortu dira.
• Ordainketa, r2(x1, x2) = 4.000 × d2.
• Funtzio errekurtsiboa. f ∗2(x2) = max
x1
{r2(x1, x2) + f ∗1(x1)}

2.5. PROBLEMA DINAMIKOEN PLANTEAMENDU ETA EBAZPENA lvii
x1
x2
100 10.000
300 7.500
500 5.000
700 2.500
900 0
f ∗
2 (x2 )
x∗
1
0
-
4.000+7.500
-
-
12.000
12.000
900
100
10.000
-
-
10.500
-
10.500
700
200
-
-
9.000
-
-
9.000
500
300
-
7.500
-
-
8.000
8.000
900
400
-
-
-
6.500
-
6.500
700
500
-
-
5.000
-
-
5.000
500
600
-
-
-
-
4.000
4.000
900
700
-
-
-
2.500
-
2.500
700
900
-
-
-
-
0
0
900
Taula honetatik
x2 aldagaiaren balio bakoitzari dagokion erabaki optimoa on-
doriozta daiteke.
3. etapa
Furgonetan zenbat hozkailu sartu erabakitzeko ondoko aldagaiak hartuko di-
tugu kontuan.
• Sarrera egoera-aldagaia. x2 = 0, 100, 200, 300, 400, 500, 600, 700, 900.
• Erabaki-aldagaia. 0 ≤ d3 ≤ [
x2
400 ].
• Trantsizio-funtzioa. x3 = x2 − 400 × d3.
• Irteera egoera-aldagaia. x3 = 0, 100, 200, 300, 400, 500, 600, 700, 900.
• Ordainketa. r3(x2, x3) = 6.000 × d3
• Funtzio errekurtsiboa. f ∗3(x3) = max
x2
{r3(x2, x3) + f ∗2(x2)}

lviii
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
x2
x3
0/12.000100/10.500200/9.000300/8.000400/6.500500/5.000600/4.000700/2.500 900/
0 f ∗
3 (x3 ) x
∗
2
0
12.000
-
-
-
12.500
-
-
-
-
12.500 400
100
-
10.500
-
-
-
11.000
-
-
12.000 12.000 900
200
-
-
9.000
-
-
-
10.000
-
-
10.000 600
300
-
-
-
8.000
-
-
-
8.500
-
8.500 700
400
-
-
-
-
6.500
-
-
-
-
6.500 300
500
-
-
-
-
-
5.000
-
-
6.000
6.000 900
600
-
-
-
-
-
-
4.000
-
-
4.000 600
700
-
-
-
-
-
-
-
2.500
-
2.500 700
900
-
-
-
-
-
-
-
-
0
0
900
4. etapa
• Sarrera-aldagaia. x3 = 0, 100, 200, 300, 400, 500, 600, 700, 900
• Erabaki-aldagaia. 0 ≤ d4 ≤ [
x3
300 ].
• Trantsizio-funtzioa x4 = x3 − 300 × d4.
• Sarrera egoera-aldagaia. Helburua irabazia maximizatzea denez, furgonetan
espazio erabilgarri minimoa uzteko egoera bakoitzerako baxera-garbigailu
kopuru maximoa sartzea erabakiko dugu, bestelako erabakiak kontuan hartu
gabe;
x4 = 0, 100, 200.
• Ordainketa. r4(x3, x4) = 4.500 × d4
• Funtzio errekurtsiboa. f ∗
4 (x4) =
max
x3
{r4(x3, x4) + f ∗3(x3)}
x3
x4
0/12.500100/12.000200/10.000300/8.500400/6.500500/6.000600/4.000700/2.500 900/
0 f ∗
4 (x4 ) x
∗
3
0
12.500
-
-
13.000
-
-
13.000
-
13.500 13.500 900
100
-
12.000
-
-
11.000
-
-
11.000
-
11.500 100
200
-
-
10.000
-
-
10.500
-
-
-
10.500 500
Azken taulan
f ∗
4 (x4)-ren balio maximoa aukeratuko dugu. Balio hori x
∗
4 = 0-
ri dagokio. Taula horretan balio horri dagokion
x∗
3 = 900 da. Aurreko taulatara

2.6. OHARRAK
lix
joaz,
x∗
2 = 900 ondorioztatzen da, eta horrela x
∗
1 = 900 eta x
∗
0 = 900 lortuko
ditugu. Beraz, politika optimoa 3 baxera-
garbigailu garraiatzea da, horrekin fur-
gonetaren ahalmena era egokienean aprobetxatzen delarik. Ondorengo graﬁkan
puntuz adierazi da politika optimoa.
2.6
Oharrak
Kapitulu honetan problema dinamiko deterministak aztertu ditugu, etapa bakoitzeko
egoera-
aldagaien arteko trantsizioak gertaera determinista dela alegia. Hala ere,
praktikan badira problemak zeinetan trantsizio horiek probabilitate-
banaketa bat-
en bidez gertatzen diren. Problema horiek programazio dinamiko estokastikoaren
problemak dira.
Bestalde, programazio dinamikoaren problema batzuetan erabaki-aldagaiak
eta egoera aldagaiak jarraiak dira. Kasu horietan egoera jarraidun programazio
dinamikoko problemak ditugu. Horien soluzioa lortzeko teknika bereziak behar
dira.
Azkenik esan, programazio dinamikoa erabiltzen denean kalkulu-kopuruak
sortzen dituen zailtasunak kontuan hartu behar direla. Zenbait problematan egoera-
aldagaien kopurua hain handia izateagatik, ebaztea oso zaila gertatzen da, makina
handiekin lan eginda ere. Horrek programazio dinamikoaren erabilpena mugatzen
du praktikan. Problema hori dimentsionaltasunaren problema da eta, programazio
dinamikoaren bidez problemaren soluzioa lortzeko egoera-aldagai bat baino gehi-
ago behar denean agertzen da sarritan. Kasu horretan tamainaren handitasuna-
gatik programazio dinamikoa erabiltzea ezinezko gertatzen denez, teknika berezi-
ak garatu dira.
2.7
Ariketak
1. Enpresa batek 50 m-ko zabaleradun eta 200 m-ko luzeradun paper-bobinak
moztu behar ditu ondoko eskaerak betetzeko

lx
KAPITULUA 2. PROGRAMAZIO DINAMIKOA
Luzera (
li) Eskariak Irabaziak (ci)
50 m
3
80
60 m
3
120
70 m
2
130
80 m
2
150
Lortu behar diren bobinen zabalera estandarra da, hau da, 50 m-koa, eta
luzerak taulan aipatutakoak dira. Eskaera guztiak bete ezin daitezkeenez,
erabaki ezazu ea zein mozketak sortuko duen irabazi maximoa.
2. Alderdi bat hurrengo hauteskundeetarako kanpaina prestatzen ari da. Ir-
ratian eta telebistan (IRTB), karteletan (KAR) eta mitinetan (MIT) inber-
titzeko 1.000 milioi pzta dauka.
Taulan ematen da inbertitutako kopuru desberdin bakoitzak botuen portzen-
taiaren ehuneko zer kopuru igotzea lortzen duen.
INBERT.
IRTB
KAR
MIT
100
2
3
-
200
8
9
4
300
12
12
7
400
14
12
10
500
17
13
14
600
18
16
15
700
19
18
15
800
20
19
17
Alderdiak hiru aukeratan inbertitu behar dela erabaki du, gutxienez 100 mil-
ioi irrati-
telebistan eta karteletan eta 200 milioi mitinetan. Plantea eta ebatz
ezazu programazio dinamikoa erabiliz.

2.7. ARIKETAK
lxi
3. Ikasle batek 4 praktika bukatzeko 12 egun ditu. Programazio dinamikoan
ikasitakoa erabili nahi du ikasteko dituen egunak 4 praktiken artean era
egokienean banatzeko, hau da, lortuko dituen puntuen batuketa maximizatzeko.
Praktika bakoitza bukatu ahal izateko gutxienez 2 egun eta gehienez 6 er-
abili beharko ditu.
Praktika bakoitzari ematen dion egun-kopuruaren arabera lor dezakeen pun-
tuaketa ondoko taulan ematen da.
Egunak
1. prak.
2. prak.
3. prak.
4. prak.
2
1
1
2
2
3
2
2
2
4
4
2
3
3
4
5
3
4
4
5
6
3
5
4
5
Plantea eta ebatz ezazu problema.
4. Enpresa batek produktu-mota bakarra ekoizten du. Datozen lau hilabetee-
tarako produktuaren eskaria, ekoizpen-ahalmena eta ekoizpen-kostua on-
doko taulan ematen dira.
Eskaria
Ekoizpen-ahalmena
Ekoizpen-kostua
Hilabetea
ai
ei
ci
1
10
20
1.300
2
15
35
1.400
3
25
25
1.300
4
20
15
1.500
Hilabete batean saltzen ez diren unitateak biltegiratuak izango dira, biltegiratze-
kostua 100 unitatekoa izanik hilabeteko. Hasieran ez dago unitaterik bilte-
gian, eta amaierako inbentarioa zero izatea nahi da. Enpresak kostu min-
imoko ekoizpen-politika zehaztu nahi du. Problema plantea ezazu.
