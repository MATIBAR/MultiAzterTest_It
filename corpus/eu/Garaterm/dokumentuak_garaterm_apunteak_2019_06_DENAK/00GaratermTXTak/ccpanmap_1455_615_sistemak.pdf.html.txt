


2. Kapitulua
Ekuazio linealezko sistemen
ebazpena
2.1
Sarrera
Erabiliko dugun notazioaren arabera, Rn espazioko bektoreak zutabe gisan idatziko
ditugu:
x =





x1
x2
...
xn





∈ Rn
Errenkada gisan idazteko, irauli behar dugu:
xt = (x1, x2, . . . , xn).
Badaukagu Rn espazioko oinarri kanonikoa:
β = {e1, e2, . . . , en},
ei = (0, . . . ,
i
1, . . . , 0)t izanik.
2.1 Deﬁnizioa.
Esango dugu U = (uij) ∈ Mat(n × n, R) matrizea goi-triangeluarra
dela baldin eta uij = 0 bada ∀i > j.
U =







u11 u12 . . . . . . u1n
0
u22 . . . . . . u2n
0
0
u33 . . . u3n
..
.
. .. ...
..
.
0
0
. . .
0
unn







17

18
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.2 Deﬁnizioa.
Esango dugu L = (lij) ∈ Mat(n×n, R) matrizea behe-triangeluarra
dela baldin eta uij = 0 bada ∀i < j.
L =








l11
0
. . . . . .
0
l21 l22
. ..
0
l31 l32 l33
. .. ...
...
... ... ... 0
ln1 ln2 . . . . . . lnn








2.3 Deﬁnizioa.
Baldin D ∈ Mat(n × n, R) matrizea goi-triangeluar eta behe-
triangeluarra bada, orduan D matrize diagonal bat dela esango dugu.
D =





d11
0
. . .
0
0
d22
. ..
..
.
..
.
. .. ... 0
0
. . .
0
dnn





2.1 Teorema.
Bedi A = (aij) ∈ Mat(n × n, R) matrize triangeluar bat (goi-, behe-
edo diagonala). Orduan,
|A| = det(A) =
n
i=1
aii = a11 · a22 · · · · · ann
2.2 Teorema.
Bedi A ∈ Mat(n×n, R). Orduan, honako propietate hauek baliokideak
dira:
• A-ren alderantzizkoa existitzen da (∃A−1);
• A ez-singular da, i.e. |A| = 0;
• A · x
= 0 =⇒ x = 0;
• A · x
= b sistemak soluzio bakarra du ∀b ∈ R
n
• A matrizea osatzen duten errenkada-bektoreak linealki independenteak dira.
• A matrizea osatzen duten zutabe-bektoreak linealki independenteak dira.
Problema orokorra:









a11x1 + a12x2 + . . . + a1nxn = b1
a21x1 + a22x2 + . . . + a2nxn = b2
...
...
=
...
an1x1 + an2x2 + . . . + annxn = bn

2.1. Sarrera
19
Goiko sistema era matrizialean adieraz dezakegu:
A · x
= b,
non
A = (aij),
xt = (x1, . . . , xn),
b
t = (b1, . . . , bn)
diren.
Nabaritu A matrizearen alderantzizkoa aurkitzea eta A · x = b motako sistemak
ebaztea problema baliokideak direla honako zentzu honetan: A matrizearen alder-
antzizkoa kalkulatzen badakigu, orduan A · x = b sistema ebatz dezakegu honako
era honetara:
A · x
= b ⇔ A
−1 · A · x = A−1 · b ⇔ x = A−1 · b.
Bestalde, A−1 kalkula dezakegu n sistema ebatziz: hartu aintzakotzat honako ma-
trize hau
X = (x1, x2, . . . , xn),
eta idatz dezagun honako sistema matrizial hau:
A · (x1, x2, . . . , xn) = A · X = In =





1
0
. . . 0
0
1
. .. ...
...
0
0 . . .
0
1





= (e1, e2, . . . , en)
Orduan, badauzkagu n sistema planteatuta, hau da:
A · xi = ei,
i = 1, 2, . . . , n.
Goiko sistema horiek ebatziz, lortuko genuke X = A−1 matrizea. Sarrera hau
amaitzeko, ikus ditzagun praktikan agertzen diren bi matrize motak:
Neurrizko ordenako matrize dentsoak
Matrize horien tamainua n < 100 edo
n < 200 ordenakoa da. Gai gehienak eznuluak izanik eta matrize handiegiak ez
izanik, matrize osoa biltegiratzen da memorian, eta metodo zuzenak erabiltzen
dira (kontrolatu behar da borobiltze-errorea).
Ordena haundiko matrize sakabanatuak
Tamainu handikoak (n = 1000, edo
handiagoa!). Gai eznulu gutxi daude (sakabanatuak), eta orokorrean, diagonal
nagusiaren inguruan metatzen dira. Horregatik, ez dago matrize osoa memori-
an biltegiratzeko beharrik. Matrize hauekin lanegiteko, iteraziozko metodoak
erabiltzen dira (borobiltze errorea ez da hain inportante, baina konbergentzia
beharrezkoa da).

20
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.2
Atzerakako ordezkapena
Bedi U ∈ Mat(n × n, R) goi-
triangeluarra, eta hartu aintzakotzat U · x = b sistema:

















u11 · x1 + u12 · x2 + . . .
+
u1,n−1 · xn−1
+u1,n · xn
= b1
u22 · x2 + . . .
+
u2,n−1 · xn−1
+u2,n · xn
= b2
. ..
...
...
. ..
...
...
un−1,n−1 · xn−1 +un−1,n · xn = bn−1
un,n · xn
= bn
Sistema hori ebazteko, atzerakako ordezkapena algoritmoa erabiliko dugu, honela
deskribatzen dena:













xn =
bn
un,n
xk =
bk −
n
j=k+1
uk,j · xj
uk,k
k = n − 1, n − 2, . . . , 1
(ADIBIDEA)
Eragiketa-kostua:
Hemendik aurrera, batuketak eta kendurak egiteko denbora mesprezugarritzat
hartuko dugu. Ondorioz, eragiketa kostuak estimatzeko, bakarrik hartuko ditugu
kontuan biderketak eta zatiketak.
• xn kalkulatzeko, zatiketa bat egin behar dugu;
• xn−1 lortzeko, biderketa bat eta zatiketa bat;
• xn−2 lortzeko, biderketa bi eta zatiketa bat;
• . . .
• xk lortzeko, (n − k) biderketa eta zatiketa bat;
Guztira,
N = 1 +
n−1
k=1
(n − k + 1) = 1 + 2 + · · · + n =
n(n + 1)
2
≃
n2
2
.

2.3. Ezabapen Gaussiarra
21
2.3
Ezabapen Gaussiarra
Estrategia orokorra:
A · x
= b sistema ebatzi beharrean, aurkituko dugu U · x =
c sistema baliokide bat, U matrizea goi-
triangeluarra izanik. Sistema berri hori
ebatziko da atzerakako ordezkapena metodoaz.
Notazioa:
Sistemaren matrize hedatua (A|b) notazioaz idatziko dugu.
2.3.1
Pibotaketarik gabeko Gauss metodoa
Algoritmo honetako urrats bakoitzean, zutabe batean, A-ren diagonal nagusiaren
azpian dauden osagai guztiak anulatzen dira. 
(A|b) sistema aldatuko da da etapaz
etapa, n etapatan:
(A|b) = (A
(1)|b(1)), (A(2)|b(2)), . . . , (A(n)|b(n)) = (U|c),
k-
garren zutabean, diagonalaren azpiko osagaiak deuseztatu aurretik daukagun sis-
tema (A(k)|b
(k)) izanik. Esplizituki,
(A(k)|b
(k)) =

















a
(k)
11
a
(k)
12
. . .
a
(k)
1,k−1
a
(k)
1,k
. . .
a
(k)
1,n
0
a
(k)
22
. . .
a
(k)
2,k−1
a
(k)
2,k
. . .
a
(k)
2,n
0
0
. ..
..
.
..
.
..
.
..
.
. .. a(k)
k−1,k−1
a
(k)
k−1,k
. . . a
(k)
k−1,n
...
0
a
(k)
k,k
. . .
a
(k)
k,n
..
.
..
.
a
(k)
k+1,k
. . . a
(k)
k+1,n
...
...
...
...
0
0
. . .
0
a
(k)
n,k
. . .
a
(n)
n,n
b
(k)
1
b
(k)
2
..
.
b
(k)
k−1
b
(k)
k
b
(k)
k+1
..
.
b
(k)
n

















(A(k)|b(k))-tik (A(k+1)|b
(k+1)) kalkulatzeko, errenkadaz errenkada egingo dira al-
daketak. Bedi E
(k)
i
, (A(k)|b(k)) matrize hedatuaren i-garren errenkada. Esplizituki,
E
(k)
i
= (a
(k)
i,1 , . . . , a
(k)
i,n |b
(k)
i
),
i = 1, . . . , n.
Orduan, (k + 1)-garren matrize hedatuaren errenkadak honako hauek izango dira:
E
(k+1)
i
=
E
(k)
i
i = 1, . . . , k
E
(k)
i
− mik · E
(k)
k
i = k + 1, . . . , n,

22
2. Kapitulua Ekuazio linealezko sistemen ebazpena
non mik =
a
(k)
ik
a
(k)
kk
zenbakiei biderkatzaileak esango zaien. mik biderkatzaileak apropos
deﬁnituta daude (i, k) posizioan dagoen osagaia deuseztatzeko. Beraz,
a
(k+1)
ik
= a
(k)
ik − mik · a
(k)
kk = a
(k)
ik −
a
(k)
ik
a
(k)
kk
· a
(k)
kk = 0,
i = k + 1, . . . , n.
Algoritmoa deskribatzeko beste era:
a
(k+1)
ij
=





















a
(k)
ij
i = 1, . . . , n
∀j
0
i = k + 1, . . . , n
j = 1, . . . , k
a
(k)
ij
− mik · a
(k)
kj
i = k + 1, . . . , n
j = k + 1, . . . , n
,
b
(k+1)
i
=
b
(k)
i
i = 1, . . . , k
b
(k)
i
− mik · b
(k)
k
i = k + 1, . . . , n.
Oharrak:
• a
(k)
kk osagaiari pibote esaten zaio.
Nulua baldin bada, prozesua gelditu egin
behar dugu.
• mik biderkatzaileak bakarrik behin kalkulatzen dira (horregatik idazten dira
goi-indizerik gabe!), eta gordetzen dira memorian geroago erabiltzeko.
• Erraz froga daiteke aljebra lineal erabiliz (A(k)|b
(k)) sistema hedatu guztiak
baliokideak direla (are gehiago, |U| = |A(k)| = |A|, k = 1, . . . , n.)
• k-garren zutabean, diagonalaren azpiko osagaiak deuseztatu ondoren, k + 1
lehenengo ekuazioak ﬁnkaturik geratzen dira.
2.3 Teorema.
Suposa dezagun ezabapen Gaussiarra burutu daitekeela A · x = b
sistema ebazteko 
(i.e., pibote guztiak eznuluak direla urrats guztietan). Orduan,
badaukagu:
i) |A| = a
(1)
11 · a
(2)
22 · · · · · a
(n)
nn
ii) A(n) = U idatziz, orduan, A = L · U faktorizazioa dugu, non L = (lij)

2.3. Ezabapen Gaussiarra
23
matrize behe-triangeluar bat den, eta
lij =





0
i < j
1
i = j
mij
i > j
den, hau da:
L =











1
0
. . .
. . .
. . .
0
m21
1
0
..
.
m31 m32
1
0
..
.
..
.
..
.
. ..
. ..
..
.
..
.
..
.
1
0
mn1 mn2 . . . . . . mn,n−1 1











.
[ADIBIDEAK]
Memorian gordeketa
Sistema bat ebazteko problemaren INPUT informazioa (hau da, sistemaren matrize
hedatua), (n × n + 1) matrize bat erabiltzen da. Ikusiko dugun legez, memoriako
espazio hori nahikoa izango da sistemaren ebazpena kalkula eta gordetzeko, baita
lorturiko LU faktorizazioa, ere. Gordetzeko prozesua zera da:
1. Hasten gara (A|b) matrize hedatuaz;
2. k-garren urratsean, i > k bada, a
(k)
ik osagaia automatikoki deuseztatzen denez,
orduan, horren gainean mik biderkatzailea gordeko dugu.
3. b
(k+1)
i
idazten da b
(k)
i
-ren gainean.
4. a
(k+1)
ij
osagaia idazten da a
(k)
ij -ren gainean i = k + 1, . . . , n eta j = k + 1, . . . , n
bada.
Azkenean, matrizean izango dugu U eta L matrizeak osatzeko informazio guztia.
Gero, atzerakako ordezkapena egiterakoan, bni osagaiaren gainean, xi soluzioaren
koordenatua gordeko dugu, behetik gora, azken zutabean. Prozesua honako eskema
honetan ikus daiteke:

 A
b

 −→



U
. ..
mij
c


 −→



U
. ..
mij
x




24
2. Kapitulua Ekuazio linealezko sistemen ebazpena
Eragiketa-kostua
Sistema bat ebazteko
A · x = b sistema ebazteko prozesua hiru etapatan zatituko dugu:
a) A matrizea U matrize goi-triangeluarra bihurtzeko eragiketa-kostua: Na;
b) b bektore independentea aldatzeko eragiketa-kostua: Nb;
c) atzerakako ordezkapenaren eragiketa-kostua: Nc.
Na Lehen, zenbatuko ditugu k-garren etapanegiten diren eragiketak:
• k-garren zutabean, mik biderkatzaile bakoitza kalkulatzeko 
(i = k + 1, . . . , n)
zatiketa bat egin behar dugu. Guztira, n − k eragiketa.
• Biderkatzaileak kalkulatuta, a
(k+1)
ij
bakoitza kalkulatzeko, biderketa bat egi-
ten da, eta hori egiten da (n − k) × (n − k) dimentsioko azpimatrizeko gai
bakoitzerako; guztira, (n − k)2 eragiketa.
Ikusi dugun legez, k-garren pausuan, (n − k) + 
(n − k)2 eragiketa egiten dira. Guzti
hau egin behar dugu k = 1, 2, . . . , n − 1 etapetan. Guztira,
Na =
n−1
k=1
(n − k) + (n − k)2 =
1
i=n−1
(i + i2) =
n−1
i=1
i +
n−1
i=1
i2
=
(1 + n − 1) · (n − 1)
2
+
(n − 1)n(2n − 1)
6
=
3n2 − 3n + (n2 − n)(2n − 1)
6
=
2n3 − 2n
6
≃
n3
3
,
non
n
i=1
i2 = n(n + 1)(2n + 1)/6 formula erabili den.
Nb b
(k+1)
i
kalkulatzeko, biderkaketa bat egiten da i = k + 1, . . . , n denean, hau da,
n − k biderkaketa. Etapa guztiak kontuan hartuta,
Nb = (n − 1) + (n − 2) + · · · + 2 + 1 = 1 + · · · + (n − 1) =
(1 + n − 1)(n − 1)
2
≃
n2
2
Nc Atzerakako ordezkapenaren eragiketa-kostua
n2
2 da.

2.3. Ezabapen Gaussiarra
25
Laburbilduz, N = Na + Nb + Nc ≃
n3
3
+
n2
2
+
n2
2
≃
n3
3
Matrize bat alderanzteko
A−1 kalkulatzeko, n sistema planteatzen dira:
 A · xj = ej, j = 1, . . . , n.. Gai in-
dependenteak bereziak izanik, eragiketa kostua n·n3/3 = n4/
3 baino askoz txikiagoa
izango da. Zehazki:
a) A matrizea bakarrik behin triangeluarizatzen da, hau da, LU faktorizazioa
kalkulatzen da sistema guztietan erabiltzeko. Eragiketa kostua: Na = n3/3.
b) Gai independenteak aldatzeko eragiketa-kostua: ej bektorean zero asko dau-
denez, kontuz zenbatuko ditugu: hasi baino lehen, j ﬁnkatuko dugu. Gogoratu
b
(k)
i
− mik · b
(k)
k ,
i = k + 1, . . . , n
dela. Orduan, k = 1, . . . , j − 1 bada, ez dira eragiketarik egiten, b
(k)
k
= 0 delako.
k = j denean, b
(k)
k
= 1 denez, ez dago eragiketakik egiteko beharrik. Azkenean,
k = j + 1, . . . , n denean, n − k biderkaketa egiten dira. Hori zenbatu behar dugu
k = 1, . . . , n − 1 denean, hau da:
(n − j − 1) + (n − j) + · · · + 2 + 1 =
(n − j − 1)(n − j)
2
.
Orduan, sistema guztiak batera kontsideratuz, eta i = n − j aldaketa eginez,
Nb =
n
j=1
(n − j − 1)(n − j)
2
=
1
2
0
i=n−1
(i2 − i) ≃
1
2
n3
3
−
n2
2
≃
n3
6
.
c) Atzerakako ordezkapenek ez daukate ezaugarri berezirik. Ondorioz, Nc ≃ n ·
n2/2 = n3/2.
Laburbilduz, N = Na + Nb + Nc ≃ n
3/3 + n3/6 + n3/2 ≃ n3.
2.3.2
Pibotaketarik gabeko Gauss-Jordan metodoa
Gauss metodoaren antzekoa da, baina orain, k-garren urratsean, k-
garren zutabeko
osagai guztiak deuseztatzen dira, diagonal nagusikoak (a
(k)
kk
piboteak) izan ezik.
Honela, n urrats gauzatu ondoren, A(n+1) matrize diagonal bat lortzen da, atze-

26
2. Kapitulua Ekuazio linealezko sistemen ebazpena
rakako ordezkapena aurreztuz.
(A(k)|b
(k)) =

















a
(k)
11
0
. . .
0
a
(k)
1,k
. . .
a
(k)
1,n
0
a
(k)
22
. ..
..
.
a
(k)
2,k
. . .
a
(k)
2,n
0
0
. ..
0
...
...
...
. .. a(k)
k−1,k−1
a
(k)
k−1,k
. . . a
(k)
k−1,n
..
.
0
a
(k)
k,k
. . .
a
(k)
k,n
...
...
a
(k)
k+1,k
. . . a
(k)
k+1,n
...
...
...
...
0
0
. . .
0
a
(k)
n,k
. . .
a
(n)
n,n
b
(k)
1
b
(k)
2
..
.
b
(k)
k−1
b
(k)
k
b
(k)
k+1
..
.
b
(k)
n

















Egin behar diren aldaketak:
E
(k+1)
i
= E
(k)
i
− mik · E
(k)
k
,
i = 1, . . . , k − 1, k + 1, . . . , n,
non mik = a
(k)
ik /a
(k)
kk diren. Beste erara idatzita,
a
(k+1)
ij
=











a
(k)
ij
j = 1, . . . , k − 1, ∀i
j = k, . . . , n, i = k.
0
j = k, ∀i = k
a
(k)
ij
− mik · a
(k)
kj
j = k + 1, . . . , n∀i = k
,
eta b
(k+1)
i
=
b
(k)
i
i = k
b
(k)
i
− mik · b
(k)
k
i = k.
Azkenean, atzerakako ordezkapena egin beharrean,
xi =
b
(n+1)
i
a
(n+1)
ii
,
i = 1, . . . , n
burutu behar da, besterik ez.
Oharra:
etapa bat gehiago dugu, azken zutabean ere lana baitago!
Eragiketa-kostua
A · x
= b sistema ebazteko. Gauss metodoan bezala, Na, Nb eta Nc kalkulatuko di-
tugu:
• Diagonalizazioa egiteko: Na ≃ n3/2;
• Bektore independentea aldatzeko: Nb ≃ n2;

2.3. Ezabapen Gaussiarra
27
• sistema diagonalizatu ondoren, x askatzeko, Nc ≃ n.
Laburbilduz, N = Na +Nb +Nc ≃ n3/2. Nahiz eta atzerakako ordezkapena aurreztu,
Gauss metodoaz (n3/3) baino eragiketa gehiago egiten dira.
A−1 kalkulatzeko. Gauss-Jordan metodoa erabiliz A matrizea alderanzteko era-
giketa kostua N ≃ n3 da, Gauss metodoan bezala. Hori gertatzen da atzerakako
ordezkapenak aurrezteagatik.
Memorian biltegiraketa
Sistema bat ebazten denean, Gauss metodoan bezala burutzen da biltegiraketa:
biderkatzaileak gordetzen dira anulatzen diren gaien gainean, eta beste gaiak gaur-
kotzen dira.
Matrize bat alderanzteko, matrizean bertan biltegira daitezke egin behar diren al-
daketa guztiak, bektore askeak eta guzti:
• k = 1 pausuan, e1 = e
(1)
1
bakarrik aldatzen da, eta e1(2) bektore aldatuta A
matrizeko lehen zutabean biltegira dezakegu (a
(1)
11 pibotea n luzerako bektore
laguntzaile batean biltegiratu ondoren).
• k-garren pausuan, aldatuko dira e1(k), . . . , ek(k) bektoreak, eta e1
(k+1), . . . , ek(k+1)
bektore aldatu horiek A-ren lehenengo k zutabeetan biltegiratuko dira, a
(k)
k,k pi-
botea bektore laguntzailean gorde ostean.
• Diagonalizazioa amaituta, errenkada bakoitza zatitzen da dagokion pibotetik.
Laburbilduz, bakarrik behar izango dugu n2 + n ≃ n2 leku memorian. Gauss
metodoa erabiliz, aldiz, 2n2 leku dira beharrezkoak, hau da, bikoitza.
2.3.3
Pibotaketa teknikak
Ezabapen Gaussiarra burutzerakoan aurki ditzakegu bi oztopo mota:
Oztopo aljebraikoak:
a
(k)
kk = 0 baldin bada, orduan ezin dugu zatitu!
Zenbakizko oztopoak:
a
(k)
kk
= ǫ oso txikia bada, orduan borobiltze-errorea he-
datuko da.

28
2. Kapitulua Ekuazio linealezko sistemen ebazpena
Pibotaketa partzial arrunta
Aurreko oztopoak ekiditzeko, pausu bakoitzean, dagokion zutabean hautatuko dugu
balio absolutu handieneko osagaia, eta hori hartuko dugu pibotetzat ezabapen Gaus-
siarra burutzeko. Zehazkiago, hartuko dugu pibotetzat
a
(k)
l,k ,
non |a
(k)
l,k | = max{|a
(k)
k,k|, |a
(k)
k+1,k|, . . . , |a
(k)
n,k|}
betetzen den, eta errenkadak trukatuko ditugu:
E
(k)
l
↔ E
(k)
k .
Trukaketa eginda, jarraituko da ezabapen Gaussiarra dakigun legez.
2.1 Oharrak.
• Errenkadak trukatuz, bakarrik aldatzen da ekuazioen ordena.
Hortaz, lorturiko sistema eta hasierakoa baliokideak dira.
• Batzuetan, deskribaturiko teknika ez da nahikoa borobiltze-errorea heda ez
dadin (ADIBIDEAK)
Pibotaketa partzial eskalatua
Nahiz eta pibotaketa partzial erabili, pibote bat bere errenkadako elementuekin kon-
paratuz erlatiboki txikiak badira, boroblitze-
errorea hedatu daiteke. Hori ekiditzeko,
pibotaketa partzial eskalatua teknika erabiliko dugu, hau da:
• Errenkada bakoitzerako, eskala-balioak kalkulatuko dira, hau da:
si = max
1≤j≤n
|aij|,
i = 1, . . . , n
• Errenkada guztiak normalizatzen dira, hau da:
1
si
· Ei kalkulatuko dira.
• Errenkadak normalizatuta, hau da, komentaturiko arazoa gaindituta, pibo-
taketa partialarekin jarrai dezakegu.
Praktikan, algoritmoa beste erara burutuko dugu:
• Praktikan, ez ditugu errenkadak eskala-balioekin zatituko, borobiltze-errorea
heda ez dadin: bakarrik zatituko dugu k-garren zutabeko gaiak piboterik
hoberena aukeratzeko
. Piboterik hoberena aukeratuta, burutzen da pibo-
taketa, errenkadak normalizatu gabe.

2.3. Ezabapen Gaussiarra
29
• Errenkadak ez dira ﬁsikoki trukatzen: errenkaden ordenaren eboluzioa bektore
berezi batean errejistratuko dugu pibotaketa bektorean. Honela idatziko da
k-garren etapan daukagun pibotaketa bektorea:
p(k) = (p
(k)
1 , p
(k)
2 , . . . , p
(k)
n )
t
Hasieran, badaukagu p(1) = (1, 2, . . . , n)t.
• Eskala-balioak bakarrik kalkulatzen dira behin, hasieran. Ez dira berkalku-
latzen etapa bakoitzean.
• Piboteen aukeraketa. Notazio aldetik, esango dugu lehen pibotea p1-garren
errenkadan aukeratzen dugula, bigarrena p2-garren errenkadan, etab. k-garren
etapan, aukeratu dugu jada lehenengo k − 1 pibote, eta orduan, badaukagu
p(k) = (
behin-betikoak
p1, p2, . . . , pk−1, p
(k)
k , p
(k)
k+1, . . . , p
(k)
n )
t
pk pibotea aukeratzen da honako konparaketa hau eginez:
max
i /
∈{p1,...,pk
−1 }
|a
(k)
ik |
si
=
|a
(k)
lk |
sl
+
3
pk = l
Orduan, pibotaketa bektorean, trukatzen dira l eta p
(k)
k
zenbakien posizioak.
Azkenean, izango dugu p = (p1, . . . , pn)t.
2.1 Adibidea.
Demagun n = 7 eta p1 = 2, p2 = 3 eta p3 = 7 aukeratu ditugula.
Orduan, badaukagu p(4)
behin-betikoak
= (2, 3, 7, 4, 5, 6, 1)t. p4 aukeratzeko, kalkulatuko genuke
honako maximo hau:
max
|a
(4)
14 |
s1
,
|a
(4)
44 |
s4
,
|a
(4)
54 |
s5
,
|a
(4)
64 |
s6
Demagun aurreko maximoa
|a
(4)
64 |
s6
dela. Orduan, izango genuke p4 = 6, eta pibo-
taketa bektorea honela aldatuko da:
p(5)
behin-betikoak
= (2, 3, 7, 6, 5, 4, 1)
t.

30
2. Kapitulua Ekuazio linealezko sistemen ebazpena
Interpretazio matriziala
Gauss metodoa erabiltzen badugu pibotaketa partzial eskalatuaz 
(edo eskalatu gabe),
orduan ezabapen Gaussiarra amaitu ondoren, eraiki ditzakegu U eta L matrizeak,
errenkadak eta biderkatzaileak pibotaketa bektoreaz berrordenatuz. Baina honela,
ez dugu lortzen jatorriko A matrizearen LU faktorizaziorik, baizik eta bere berror-
denazio baten faktorizazioa. Zehazkiago, izango genuke:
L · U = P t · A,
non P = (ep
1 , ep2 , . . . , epm )
dugun.
Prozesua burutzeko, behar ditugu bi bektore laguntzaile: p eta s = 
(s1, . . . , sn)t.
[ADIBIDEAK]
Egonkortasun teoremak
Ezabapen Gaussiarra erabiltzen dugunean, bi kasu berezietan ez da beharrezkoa
pibotaketa erabiltzea.
2.4 Deﬁnizioa.
Esango dugu A ∈ Mat(n × n, R) diagonal hertsiki menperatzaile-
duna dela baldin eta honako baldintza hau betetzen bada:
|aii| >
n
j = 1
j = i
|aij|,
i = 1, . . . , n
2.5 Deﬁnizioa.
Bedi A ∈ Mat(n × n, R) matrize simetriko bat. Esango dugu A
positiboki deﬁnitua dela baldin eta
xt · A · x > 0 bada ∀0 = x ∈ R
n.
2.4 Teorema.
Bedi A ∈ Mat(n × n, R). A diagonal hertsiki menperatzaileduna
bada, orduan A · x = b erako edozein sistema ebatz daiteke pibotaketarik gabeko
ezabapen Gaussiarreko metodoak erabiliz (Gauss zein Gauss-Jordan). Are gehiago,
kalkuluak egonkorrak izango dira.
2.5 Teorema.
Bedi A ∈ Mat(n × n, R) matrize simetriko bat. Orduan, A positiboki
deﬁnitua bada, orduan A · x = b erako edozein sistema ebatz daiteke pibotaketarik
gabeko ezabapen Gaussiarreko metodoak erabiliz (Gauss zein Gauss-Jordan). Are
gehiago, kalkuluak egonkorrak izango dira.

2.4. Ezabapen metodo trinkoak
31
2.4
Ezabapen metodo trinkoak
2.4.1
Sarrera
Bedi A ∈ Mat(n × n, R), eta bitez L, U ∈ Mat(n × n, R) matrize triangeluarrak
(behe- eta goi-
triangeluarrak, hurrenez hurren), zeintzutarako A = L·U faktorizazioa
dugun. Orduan, esango dugu A matrizeak LU faktorizazio bat onartzen duela.
Sistemak ebazteko teknika trinkoa
A matrize bat faktorizatuta badaukagu, orduan, A · x = b sistema ebatz dezakegu
nahiko erraz, honako teknika hau erabiliz:
• A · x = b
+
3
(L · U) · x = b
+
3
L · (U · x) = b daukagu. (U · x) = y aldagai
aldaketa eginez, badaukagu jatorriko sistema plantea daiteke bi sistemetan:
L · y = b
eta
U · x
= y
• L · y = b sistema ebatz daiteke aurrerakako ordezkapenaz (atzerakako or-
dezkapenaren algoritmo berdina, baino aurrerraka deﬁnituta).
• y lortuta, U · x = y sistema ebazten da atzerakako ordezkapenaz, x soluzioa
lortuz.
Matrizeak alderanzteko teknika trinkoak
A = L·U faktorizazioa aprobetxa daiteke, ere, alderantzizkoa kalkulatzeko hurrengo
bi eratara:
• A·x
= L·(U ·x) = ei sistema bakoitza ebatz daiteke goian aipaturiko teknikaz.
• Aljebra pixkat erabiliz, badaukagu A−1 = (L · U)−1 = U−1 · L−1. Orduan,
kalkula daitezke, apartez, L−1 eta U−1 (Gauss-Jordan metodoaz, edo dagokion
ordezkapena erabiliz), eta gero biderkatu ordena egokian A−1 lortzeko.

32
2. Kapitulua Ekuazio linealezko sistemen ebazpena
LU faktorizazioaren bakartasuna
Nabaritu badaudela LU faktorizaziorik onartzen ez duten matrizeak; honako hauek,
besteak beste:
0 1
1 x
eta





0 1 . . . 1
1
. . .
...
1
. . .





Bestalde, nabaritu Gauss metodoa burutu badaiteke (adibidez, 2.4 edo 2.5 teore-
maren baldintza betetzen bada), orduan, A-ren LU faktorizazio bat lortzen dela.
Nabaritu, ere, LU faktorizaziorik existitzekotan, faktorizazio horrek ez daukala zer-
tan izan behar bakarra, honako adibide sinple honetan ikus daitekeenez:
2.2 Adibidea.
Bedi A matrize diagonal bat. Matrize diagonal guztiak goi- eta
behe-
triangeluar izanik, badaukagu L = A, U = In eta L = In, U = A faktorizazioak
A-ren bi LU faktorizazio posible direla.
Are gehiago, bedi orain A edozein matrize karratu. Orduan, LU faktorizazio bat
emanda, beti aurki ditzakegu beste LU faktorizazio desberdinak 
(beraz, inﬁnituak)
honako truko hau erabiliz: bedi D = In matrize diagonal ez-
singular bat. Orduan,
A = L · U = L · (D · D−1) · U =
=L1
(L · D) ·
=U1
(D−1 · U)= L1 · U1
Bestalde, A-
ren LU faktorizazio bat ezaguturik, eraiki ditzakegu bere LU faktori-
zazio guztiak aurreko trukoa erabiliz, honako lema honetan ikus dezakegunez:
2.6 Lema.
Matrize baten edozein bi LU faktorizazio elkarturik daude matrize dia-
gonal baten bidez honako zentzu honetan: A = L1 · U1 = L2 · U2 badugu, orduan
existitzen da D matrize diagonal ez-singular bat zeinerako
L1 = L2 · D eta U1 = D
−1 · U2 baitira.
(2.1)
Frogapena.
L1 · U1 = A = L2 · U2
+
3
behe-triang.
L−1
2
· L1 =
goi-triang.
U2 · U
−1
1
= D
(goi+behe ⇒ diag),
eta hortik, zuzenean, lortzen dira (2.1)
♣

2.4. Ezabapen metodo trinkoak
33
2.4.2
Atzerakako ordezkapena
Bedi L ∈ Mat(n × n, R) behe-
triangeluarra, eta hartu aintzakotzat L · x = b sistema:













l1,1 · x1
= b1
l1,2 · x1
+l2,2·x
2
= b2
...
. ..
=
...
ln−1,1 · x1 +ln−1,2 · x2 + . . .
= bn−1
ln,1 · x1
ln,2 · x2
+ . . . +ln,n−1 · xn−1 +ln,n · xn = bn
Sistema hori ebazteko, aurrerakako ordezkapena algoritmoa erabiliko dugu, honela
deskribatzen dena:













x1 =
b1
l1,1
xk =
bk −
k−1
j=1
lk,j · xj
lk,k
k = 2, . . . , n
Nabaritu eragiketa kostua atzerakako ordezkapenarena dela: N ≃ n2/2 (frogatzen
da 2.2 atalean bezala).
2.4.3
Doolittle eta Crout algoritmoak
LU faktorizazio bat lortzeko estrategia orokorra A = L · U ekuazio matriziala
planteatzean datza:







a11 a12 . . . . . . a1n
a21 a22 . . . . . . a2n
a31 a32 a33 . . . a3n
..
.
. ..
..
.
an1 an2 . . . . . . ann







=








l11
0
. . . . . .
0
l21 l22
. ..
0
l31 l32 l33
. .. ...
...
... ... ... 0
ln1 ln2 . . . . . . lnn








·







u11 u12 . . . . . . u1n
0
u22 . . . . . . u2n
0
0
u33 . . . u3n
..
.
. .. ...
..
.
0
0
. . .
0
unn







Biderkaketa burutzean, A matrizeko osagai bakoitzerako planteatzen da ekuazio bat:
aij =
n
r=1
lir · urj,
i, j ∈ {1, . . . , n}

34
2. Kapitulua Ekuazio linealezko sistemen ebazpena
Orain, L eta U matrizeen gai nuluak kontuan hartuz, berridatz ditzakegu aurreko
n2 ekuazio horiek, honela:























ak,k =
k
r=1
lk,r · ur,k,
k = 1, . . . , n
ak,j =
k
r=1
lk,r · ur,j,
k = 1, . . . , n;
j = k + 1, . . . , n
ai,k =
k
r=1
li,r · ur,k,
k = 1, . . . , n;
i = k + 1, . . . , n
Ekuazioak berridatz daitezke honela:























lk,k · uk,k = ak,k −
k−1
r=1
lk,r · ur,k,
k = 1, . . . , n
uk,j =
1
lk,k
ak,j −
k−1
r=1
lk,r · ur,j ,
k = 1, . . . , n;
j = k + 1, . . . , n
li,k =
1
uk,k
ai,k −
k−1
r=1
li,r · ur,k ,
k = 1, . . . , n;
i = k + 1, . . . , n
(2.2)
Badakigu 2.6 lematik aurreko sistema soluzio bakarrekoa ez dela; beraz, n2+n ezeza-
gun eta n2 ekuazio ditu. Soluzio bat determinatzeko asmoz, n baldintza inposatuko
ditugu. (2.2) ekuazioak ordena egokian planteatuz:





1
2 →
2
′
↓
3
4 →
4′
↓
. ..





askatu daiteke ezezagun bat ekuazio bakoitzetatik. Honela, sortzen dira bi algoritmo
desberdin:

2.4. Ezabapen metodo trinkoak
35
Doolittle:
Inposatzen baditugu lkk = 1,
k = 1, . . . , n baldintzak (2.2) ekuazioetan,
eta goiko ordena erabiltzen badugu, lortzen dugu honako algoritmo hau, Doolit-
tle algoritmoa deritzona:
k = 1, . . . , n























uk,k = ak,k −
k−1
r=1
lk,r · ur,k
uk,j = ak,j −
k−1
r=1
lk,r · ur,j
j = k + 1, . . . , n
li,k =
1
uk,k
ai,k −
k−1
r=1
li,r · ur,k
i = k + 1, . . . , n
Crout:
Inposatzen baditugu ukk = 1,
k = 1, . . . , n baldintzak (2.2) ekuazioetan,
eta goiko ordena erabiltzen badugu, lortzen dugu honako algoritmo hau, Crout
algoritmoa deritzona:
k = 1, . . . , n























lk,k = ak,k −
k−1
r=1
lk,r · ur,k
uk,j =
1
lk,k
ak,j −
k−1
r=1
lk,r · ur,j
j = k + 1, . . . , n
li,k = ai,k −
k−1
r=1
li,r · ur,k
i = k + 1, . . . , n
[ADIBIDEAK]
2.2 Oharrak.
• Doolittle metodoaz lortzen den LU faktorizazioa eta Gauss
metodoaz lortzen dena berdinak dira (lkk = 1,
∀k).
• 2.4 edo 2.5 teoremaren baldintza betetzen bada, orduan, deskribaturiko Crout
zein Doolittle algoritmoak egonkorrak dira LU faktorizazio bat lortzeko.
• Pibotaketa bateragarria da Crout eta Doolittle algoritmoekin (hala ere, ikas-
gai honetan, guk ez dugu erabiliko).
• Faktorizazio trinkoko algoritmoetan honako azdierazpen hauek agertzen dira
ezezagun bakoitza kalkulatzeko:
r αr · βr
γ
.

36
2. Kapitulua Ekuazio linealezko sistemen ebazpena
Adierazpen horiek zenbakizko abantaila bat dute zehaztasun sinplez lanegiten
denean: memoriako aldagai bat dimentsiona dezakegu zehaztasun bikoitzez,
non kalkula daitekeen zatikiaren zenbakitzailea zehaztasun bikoitzez. Gero,
zehaztasun sinpleko γ osagaitik zatituz, zehaztasun sinplera igaroko dugu.
Emaitza LU faktorizazioko behin betiko gai bat izango da, eta nahiz eta zehaz-
tasun sinplez adierazita izan, azken eragiketa arte zehaztasun bikoitzez kalku-
latuta izan da. Ezabapen Gaussiarreko metodoetaz, aldiz, etapaz etapako
prozesuak izanik, zehaztasun (ia) bikoitza mantentzeko era bakarra matrize
osoa zehaztasun bikoitzez dimentsionatzea da. Ezabapen trinkoaz, memori-
ako leku kopuru erdia erabiliz egin daiteke.
Memorian biltegiraketa
Algoritmoaren deskribapenean ikus daiteke ai,j osagai bakoitza behin bakarrik er-
abiltzen dela , L edo U matrizeko gai bat kalkulatzeko. Orduan, ai,j elementu hori
ezabatuko dugu, eta hutsik geratzen den lekuan gordeko da kalkulaturiko elementu
berria. Adibidez, Doolittle algoritmoaz honako ordezkapen hauek egiten dira:
uk,k −→ ak,k
li,k −→ ai,k
uk,j −→ ak,j.
Azkenean, Gauss metodoan bezala,
U
L
erako matrize bat lortzen da. Sistema
bat ebazteko, aurrerakako ordezkapena egiten da y bektorea b gainean idatziz, goitik
behera. Gero, atzerakako ordezkapena burutzen da (behetik gora), x soluzioa y
gainean idatziz.
Eragiketa Kostua
Sistemaren ebazpena.
Ezabapen Gaussiarrean bezala, zatituko dugu eragiketa
kostua 3 prozesutan:
• A = L · U faktorizazioa lortzeko eragiketa kostua Na ≃ n3/3 (Crout edo
Doolittle metodoaz);
• L · y = b sistemaren ebazpena (aurrerakako ordezkapen bat): Nb ≃ n2/2.
• U · x = y sistemaren ebazpena (atzerakako ordezkapen bat): Nc ≃ n2/2.
Guztira, N = Na + Nb + Nc ≃ n3 + n2 ≃ n3.
Alderantzizkoaren kalkulua.
Alderantzizkoa kalkulatzeko, 2.4.1 atalean plantea-
turiko edozein bi tekniketaz, eragiketa kostua berdina da: N ≃ n3 (LU fak-
torizazioa barne, jakina, Crout zein Doolittle algoritmoaz).

2.4. Ezabapen metodo trinkoak
37
2.4.4
Cholesky metodoa
A matrizea simetrikoa eta positiboki deﬁnitua bada, orduan LU faktorizazio berezi
bat lor dezakegu U = Lt hartuz. Metodoa honako teorema honetan dago oinarrituta.
2.7 Teorema.
A matrizea simetrikoa eta positiboki deﬁnitua da baldin eta soilik
baldin L = (lij) matrize behe-
triangeluar bat existitzen bada, zeinen diagonal na-
gusiko elementuak positiboak baitira 
(lii > 0, i = 1, . . . , n), A = L · Lt betetzen
delarik.
Cholesky metodoa burutzeko, planteatzen dira (2.2) ekuazioak U = Lt suposat-
uz. Algoritmoaren deskribapena honako hau da:
k = 1, . . . , n,















lk,k =
ak,k −
k−1
r=1
(lk,r)2
li,k =
1
lk,k
ai,k −
k−1
r=1
li,r · lk,r
i = k + 1, . . . , n.
2.1 Oharra.
Metodoa test moduan erabili ohi da: A matrize simetrikoa badugu,
orduan saia gaitezke Cholesky algoritmoa erabiltzen: posible ez bada (hau da,
prozesuan sortzen diren erro karratuak kalkulagarriak badira; zehazkiago, ak,k >
k−1
r=1 (lk,r)
2 betetzen badira), orduan, matrizea positiboki deﬁnitua izango da. Bestela,
matrizea ez da positiboki deﬁnitua izango.
Eragiketa Kostua
Erro karratu bat kalkulatzeko eragiketa kostua λ biderketakoa da, non 3 ≤ λ ≤ 10,
gutxi gora-behera.
Sistema bat ebazteko eragiketa kostua N ≃ n3/6 + λn ≃ n3/6 da. Matrize bat
alderanzteko, aljebra pixkat erabiliz, prozesua izugarri sinpliﬁka daiteke:
A−1 = (L · Lt)−1 = (Lt)−1 · L−1 = (L−1)t · L−1.
Honela, A−1 kalkulatzeko eragiketa kostua N ≃ n3/2 da.
[ADIBIDEA]

38
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.4.5
Jacobiren matrize tridiagonalak
2.6 Deﬁnizioa.
Honako itxura honetako matrize bati Jacobi matrize tridiagonal
deritzo:











a1
c1
0
. . .
0
b2
a2
c2
0
. . .
0
0
b3
a3
c3
0
. . .
0
... ... ... ... ... ...
...
...
. .. ... ...
. ..
0
0
. . .
0
bn−1 an−1 cn−1
0
. . .
0
bn
an











2.8 Teorema.
Baldin A Jacobi matrize tridiagonal bat bada, eta gainera honako
baldintza hauek betetzen badira:
i) |a1| > |c1| > 0;
ii) |ai| ≥ |bi| + |ci| eta bi · ci = 0
i = 1, . . . , n;
iii) |an| > |bn| > 0,
orduan, A matrizeak honako LU faktorizazio hauek onartzen ditu:
Crout
A =









α1
0
. . .
0
b2
α2
0
. . .
0
0
b3
α3
0
. . .
0
... ... ... ... ...
...
...
0
bn−1 αn−1
0
0
. . .
0
bn
αn









·









1
γ1
0
. . .
0
0
1
γ2
0
. . .
0
... ... ... ... ...
...
... ... ... ... ...
...
0 . . .
0
1
γn−1
0 . . .
. . .
0
1









Doolittle
L =









1
0
. . .
0
β2
1
0
. . . 0
0
β3
1
0
. . . 0
... ... ... ... ... ...
...
0
βn−1
1
0
0
. . .
0
βn 1









·









α1
c1
0
. . .
0
0
α2
c2
0
. . .
0
..
.
. .. ... ... ...
..
.
..
.
. .. ... ... ...
..
.
0
. . .
0
αn−1 cn−1
0
. . . . . .
0
αn









Gainera, algoritmoa egonkorra izango da.
[ADIBIDEA]

2.4. Ezabapen metodo trinkoak
39
Algoritmoa
Crout erakoa (Doolittle erakoa ariketatzat geratuko da):
• α1 = a1,
γ1 = c1/α1;
• αi = ai − bi · γi−1,
γi = ci/αi,
i = 2, . . . , n.
Eragiketa kostua
Sistema bat ebazteko: N = Na + Nb + Nc = 2n + 2n + n = 5n.
Alderantzizkoa kalkulatzeko: N ≃ 2n2
Memorian biltegiraketa
A matrizea 3 bektoretan gordetzen da, n luzerakoak:
 a, b eta c. Hiru bektore horiek
nahikoak dira LU faktorizazioa gordetzeko:
 Adibidez, Doolittle metodoa erabiltzen
bada, ordezkatuko genituzke αi → ai eta βi → bi pausu bakoitzean.

40
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.5
Errorea eta Arazoaren Baldintzaketa
2.5.1
Norma bektorialak eta matrizialak. Norma naturalak
2.7 Deﬁnizioa. Rn
espazioan deﬁnituriko norma bektorial bat
|| · || : Rn −→
R
x
−→ ||x||
aplikazio bat da, honako propietate hauek betetzen dituena:
i) ||x|| ≥ 0 ∀x ∈ Rn;
ii) ||x|| = 0 ⇐⇒ x = 0;
iii) ||α · x|| = |α| · ||x||,
∀x ∈ Rn, ∀α ∈ R
;
iv) ||x + y|| ≤ ||x|| + ||y||,
∀x
+ y ∈ Rn.
Adibideak:
• ||x||1 =
n
i=1
|xi| normari l1 norma esaten zaio.
• ||x||2 =
x21 + · · · + x2n normari l2 norma edo norma Euklidiarra esaten zaio.
• ||x||∞ = max
1≤i≤n
|xi| normari l∞ norma edo maximoaren norma esaten zaio.
2.8 Deﬁnizioa.
Esango dugu || · || eta || · ||′ normak baliokideak direla baldin eta
existitzen badira C1, C2 konstante erreal positiboak zeintzuetarako
C1 · ||x|| ≤ ||x||
′ ≤ C2 · ||x|| ∀x ∈ Rn
betetzen den.
2.2 Oharra. Rn
espazioko norma bektorial guztiak baliokideak dira.
2.9 Deﬁnizioa.
Esango dugu {x(k)}k≥1 bektoreen segidak x bektorerantz konber-
gitzen duela baldin eta ||x(k) − x||
k→∞
−→ 0 betetzen bada.

2.5. Errorea eta Arazoaren Baldintzaketa
41
2.9 Teorema.
{x(k)}k≥1 segidak l∞ normarekiko x bektorerantz konbergitzen du
baldin eta soilik baldin
lim
k→∞
x
(k)
i
= xi i = 1, 2, . . . , n
bada.
2.3 Oharra. Rn
-ko norma bektorial guztiak baliokideak direnez, segida bat l∞ nor-
marekiko konbergentea baldin bada, orduan ondoriozta dezakegu l1 eta l2 normekiko
konbergentea izango dela (baita edozein normarekin ere).
2.10 Deﬁnizioa.
Norma matrizial bat
|| · || : Mat(n × n, R) −→
R
A
−→ ||A||
aplikazio bat da, honako propietate hauek betetzen dituena:
i) ||A|| ≥ 0,
∀A ∈ Mat(n × n, R)
ii) ||A|| = 0 ⇐⇒ A = 0 matrize nulua;
iii) ||α · A|| = |α| · ||A||,
∀A ∈ Mat(n × n, R), ∀α ∈ R;
iv) ||A + B|| ≤ ||A|| + ||B||,
∀A, B ∈ Mat(n × n, R);
iv) ||A · B|| ≤ ||A|| · ||B||,
∀A, B ∈ Mat(n × n, R).
2.10 Teorema. Rn
espazioko || · || norma bektorial bat emanda, orduan || · || norma
matrizial bat deﬁni dezakegu honako formula honetaz:
||A|| = max
||x||=1
||A · x||.
Norma matrizial hori norma natural bat dela esango dugu, || · || norma bektorialari
dagokiona. A matrize baten norma naturalak neurtzen du 1 erradioko esferaren
deformazioa A : Rn −→ Rn aplikazio linealaren bidez.
[IRUDIAK || · ||2 normarako]
2.11 Teorema.
Bedi A ∈ Mat(n × n, R). Orduan, badaukagu:
• ||A||∞ = max
1≤i≤n
n
j=1
|aij|
• ||A||1 = max
1≤j≤n
n
i=1
|aij|

42
2. Kapitulua Ekuazio linealezko sistemen ebazpena
• ||A||2 =
ρ(At · A)
2.1 Deﬁnizioak.
A ∈ Mat(n × n, R) bada eta A.x = λx bada, orduan esango dugu
λ balioa A-
ren autobalio bat dela eta x autobalio hori dagokion autobektore bat dela
esango dugu. λ autobalioa erreal edo konplexu izan daiteke, segun eta x ∈ Rn edo
x ∈ Cn dagoen. Matrizearen autobalioen multzoa Spec(A) adierazpenaz idatziko
dugu. A matrizearen erradio espektrala holan deﬁnitzen da:
ρ(A) =
max
λ∈Spec(A)
|λ|
2.12 Teorema.
Edozein norma naturaltarako, honako propietate hauek betetzen
dira:
i) ||A · y|| ≤ ||A|| · ||y||,
∀y ∈ Rn;
ii) ρ(A) ≤ ||A||.
Frogapena:
i)
y = 0 bektore nulua bada, orduan, propietatea betetzen da, zuzenean (A.0 = 0.)
y = 0 bada, orduan normaliza dezakegu bektorea:
v =
y
||y||
.
Nabaritu ||v|| = 1 dela. Orain, norma natulararen deﬁnizioa aplikatuz:
||A|| = max
||x||=1
||A · x|| ≥ ||A · v|| = A ·
y
||y||
=
A · y
||y||
=
||A · y||
||y||
.
Frogatu dugu ||A|| ≥
||A·y||
||y||
dela. Ondorioz,||A · y|| ≤ ||A|| · ||y||.
ii) Bedi λ ∈ Spec(A), eta bedi x, λ-
ri dagokion autobektore bat. Orduan, A·x = λx
daukagu, eta orduan, normak hartuz eta i) propietatea aplikatuz,
|λ|||x|| = ||A · x|| ≤ ||A|| · ||x||
+
3
|λ| ≤ ||A||, ∀λ ∈ Spec(A).
Amaitzeko,
ρ(A) =
max
λ∈Spec(A)
|λ| ≤ ||A||.
♣

2.5. Errorea eta Arazoaren Baldintzaketa
43
2.5.2
Errorearen azterketa
Norma bektorialei esker, deﬁni dezakegu bektoreen arteko distantzia, eta hortik,
errorea.
2.2 Deﬁnizioak. Rn
espazioko x bektorea ebazpen zehatza bada eta ¯
x bere hur-
bilpen bat bada, orduan
e = x − ¯
x
errore bektorea dela esango dugu. Rn espazioko || · || norma bat emanda, errore
absolutua
e = ||e|| = ||x − ¯
x||
izango da, eta errore erlatiboa
er =
e
||x||
=
||x − ¯
x||
||x||
izango da. (Batzutan, er =
||x−¯
x||
||¯
x||
erabiltzen da.)
Demagun, orain, A · x = b sistemarako ¯x soluzio hurbildua lortu egin dugula.
e = x − x errore bektorea dugu, baina errorea neurtzeko beste era ikusiko dugu
2.3 Deﬁnizioak.
Aurreko baldintzetan:
• r
= b − A · ¯x bektoreari hondar errore bektorea deritzo;
• ||r|| balioari hondar errore deritzo;
•
||r||
||b||
balioari hondar errore erlatibo deritzo.
Nabaritu r = b − A · ¯x = A · x − A · ¯x = A · 
(x − ¯x) = A · e dela. Hondar erroreak
deskribatzen du nola betetzen duen sistema soluzio hurbilduak. Azken hori adier-
azgarria izan daiteke kasu batzutan, baina beste batzuetan, aldiz, engainagarria.
[ADIBIDEA]
2.13 Teorema.
Bedi A ∈ Mat(n × n, R) matrize ez-singular bat, eta demagun
soluzio hurbildu bat lortu dugula, e errorea eta r hondar errorea sortuz. Orduan,
·
edozein norma naturaltarako, badaukagu:

44
2. Kapitulua Ekuazio linealezko sistemen ebazpena
i)
||r||
||A||
≤ e ≤ ||A−1|| · ||r||;
ii)
1
||A|| · ||A−1||
||r||
||b||
≤
e
||x||
≤ ||A|| · ||A
−1||
||r||
||b||
.
Frogapena:
i)
r = A · e
+
3
||r||
= ||A · e|| ≤ ||A|| · ||e||
+
3
||r||
||A||
≤ ||e||.
Bestalde,
r = A · e
+
3
A−1 · r = A−1 · A · e = e
+
3
||e|| = ||A−1 · r|| ≤ ||A−1|| · ||r||
+
3
i)
ii) Alde batetik,
b = A · x
+
3
||b|| = ||A · x|| ≤ ||A|| · ||x||
+
3
||b||
||A||
≤ ||x||.
Bestalde,
b = A · x
+
3
A−1 · b = A
−1 · A · x = x
+
3
||x||
= ||A−1 · b|| ≤ ||A
−1|| · ||b||
Ondorioz, frogatu dugu
||b||
||A||
≤ x ≤ ||A−1|| · ||b||
dela. Amaitzeko, i) formula azken horrekin zatituz, ii) lortzen da.
♣
2.11 Deﬁnizioa.
||A|| · ||A−1|| balioari A matrizearen baldintzatze-zenbakia edo
egokitze-zenbakia deritzo, eta K(A) notazioaz idatziko dugu.
Beraz, azken teoremako bigarren formula berridatz dezakegu honela:
1
K(A)
||r||
||b||
≤
e
||x||
≤ K(A)
||r||
||b||
2.3 Oharrak.
• K(A) ≃ 1 bada, orduan, errore erlatiboa eta hondar errorea
tamainu berekoak izango dira. Kasu horietan esan dezakegu arazoa ondo bal-
dintzatua edo ondo egokituta dagoela.

2.5. Errorea eta Arazoaren Baldintzaketa
45
• K(A) >> 1 bada, orduan hondar errorea ez da ﬁdagarria izango.
Nahiz eta K(A) normaren menpeko balioa izan, honako emaitza hau daukagu:
2.14 Proposizioa.
K(A) ≥ 1,
∀A ∈ Mn, norma natural orotarako.
Frogapena:
Alde batetik, ||I|| = max
||x||=1
||I · x|| = max
||x||=1
||x|| = max
||x||=1
1 = 1.
Bestalde, 1 = ||I|| = ||A · A−1|| ≤ ||A|| · ||A−1|| = K(A).
♣
Sistema Perturbatuak
Batzutan, nahiz eta teorikoki A·x = b sistema ebatzi nahi izan, praktikan, hasierako
erroreak edo izandako perturbazio bat dela eta, sistema perturbatu bat ebazten da:
A · x = b,
non A matrize perturbatu bat den. δ
(A) = A − A matrizea osagaien erroreek osatua
da.
2.15 Proposizioa.
Aurreko baldintzetan, honako formula hau betetzen da:
er =
||x − x||
||x||
≤ K(A) ·
||δ(A)||
||A||
Frogapena: Badaukagu A · (x − x) = A · x − (A + δA) · x = b − b − δA · x.
Hortaz, x − x = −A−1 · δA · x
+
3
x − x = A−1 · δA · x ≤ A−1 · δA · x ,
eta, amaitzeko,
er =
||x − x||
||x||
≤ A−1 · δA = K(A) ·
||δ(A)||
||A||
♣
Ondorioz, K(A) >> 1 handia denean, esan dezakegu sistema txarto egokituta edo
txarto baldintzatua dagoela. Adibidez, Gauss algoritmoa erabiltzen bada, eta mak-
ina zenbakien mantisaren luzera t bada, β oinarria hartuz, froga daiteke
δA ∞ ≤ n · A ∞ · β
−t
dela. Ondorioz, er ≤ n · K(A) · β−t denez, K(A) ≃ βt edo handiagoa bada, esan
dezakegu sistema txarto baldintzatua dagoela.

46
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.6
Iteraziozko Teknikak
2.6.1
Sarrera
• Hein haundiko matrize sakabanatuek deﬁnituriko sistemak ebazteko erabiltzen
dira.
• Nuluak diren gaiak, nulu mantentzen dira normalean teknika horiekin.
• {x(k)}k≥0 segida bat sortzen da, zenbait baldintzapetan konbergentea dena.
• Metodo orokorra: A · x = b sistemaren baliokidea den x = T · x + c beste
sistema bat deﬁnitzen da, eta azken hori erabiliz,
x(k+1) = T · x(k) + c
formula erabiltzen da bektoreen segida deﬁnitzeko.
• Oharra: Konbergentzia ez dago bermatuta, orokorrean.
• Gelditze irizpidea: Zehaztasuna ona izan arte (adibidez, ||x−x(k)|| < ε izan
arte), edo beste batzutan, iterazio kopurua muga daiteke hasieratik, metodo
zuzen baten bidez baino eragiketa gutxiago egiteko.
2.6.2
Jacobi metodoa
aii = 0 bada ∀i = 1, . . . , n, orduan aska dezakegu ezezagun bakoitza, honako formula
hauek lortuz:
xi =
1
aii
bi −
n
j=1,j=i
aij · xj
=⇒ x
(k+1)
i
=
1
aii
bi −
n
j=1,j=i
aij · x
(k)
j
i = 1, . . . , n
(ADIBIDEA)
Adierazpen matriziala honako hau da: x(k+1) = TJ · x(k) + c, non TJ = (tij) eta
c = (ci),
tij =
0
i = j bada;
−
aij
aii
i = j bada.
eta ci =
bi
aii
,
i = 1, . . . , n
izanik.
Gelditze-irizpidea
Jabobi metodoak sorturiko segidak {x(k)}k≥1 konbergitzen du ⇔ ||x − x(k)||
k→∞
−→ 0

2.6. Iteraziozko Teknikak
47
⇔ ||x(k+1) − x(k)||
k→∞
−→ 0 (azken propietate honi Cauchy-ren propietatea deritzo).
Ondorioz, ε > 0 ﬁnkaturik,
||x(k+1) − x(k)|| < ε
edo
||x(k+1) − x(k)||
||x(k+1)||
< ε
denean, geldituko dugu prozesua (normalean, || · ||∞ norma erabiliko dugu).
Interpretazio matrizial
A = D − B − G deskonposizioa aintzakotzat hartu, non
D =



a11
0
. ..
0
ann


 ,
−B =





0
. . .
. . .
0
a21
. ..
...
... ... ...
...
an1 . . . an,n−1 0





,
−G =





0 a12 . . .
a1n
... ... ...
...
...
. .. a
n−1,n
0 . . . . . .
0





diren. Orduan, badaukagu:
A · x = b ⇔ Dx − Bx − Gx = b ⇔ Dx = (B + G)x + b ⇔ x = D
−1(B + G)x + D−1b,
eta iteraziozko legea
x(k+1) = D−1 · (B + G)x(k) + D−1b
bezala idatz daiteke. Hortaz, TJ = D−1 · (B + G) dugu.
Oharrak
• Ez da asko erabiltzen, Gauss-Seidel metodoa normalean eraginkorragoa delako;
• ∃i : aii = 0 bada, orduan ekuazioak permuta ditzakegu aii gaia ahalik eta
haundiena izateko asmoz (zenbaki txikietatik ez zatitzeko).
• Hasieratik normalizatzen badugu (errenkada bakoitza aii-rekin zatituz), n za-
tidura aurreztuko ditugu iterazio bakoitzean. Errenkada bakoitzean k gai ez-
nulu badaude, eta k baino iterazio gehiago egiten baditugu, orduan merezi du
normalizatzeak.

48
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.6.3
Gauss-Seidel metodoa
• Jacobi metodoaren “hobekuntza” bat da. Iterazio bakoitzean, x-ren egunera-
turiko gaiak aprobetxatuko ditugu, hots,
x
(k+1)
i
=
1
aii
bi −
i−1
j=1
aijx
(k+1)
j
−
n
j=i+1
aijx
(k)
j
i = 1, . . . , n
(ADIBIDEA)
• Interpretazio matrizial: Lehen bezala, A = D − B − G hartuz, badaukagu:
A · x = b ⇔ Dx − Bx − Gx = b ⇔ (D − B)x = Gx + b.
Eta hortaz, badaukagu
(D − B)x(k+1) = Gx(k) + b ⇔ x
(k+1) = (D − B)−1 · Gx(k) + (D − B)−1b
Iteraziozko matrizea TGS = (D − B)−1 · G da.
• Memorian biltegiratzea: Jacobi metodoan, n luzerako 2 bektore dira be-
harrezkoak (x(k+1) eta x(k) bektoreetarako) , baina Gauss-Seidel-en metodoan,
x
(k+1)
i
kalkulatuta, x
(k)
i
gainean idatz daiteke, azken hori beharrezkoa izango
ez baita. Ondorioz, n luzerako bektore bat nahikoa izango da.
2.6.4
Iteraziozko metodoen konbergentzia
2.16 Teorema.
x(0) ∈ Rn edozein bektoretarako, x(k+1) = T · x(k) + c (c = 0 izanik)
iteraziozko metodoaz eraikitako segidak A · x = b sistemaren soluzio zehatzerantz
konbergitzen du baldin eta soilik baldin ρ(T ) < 1 bada.
Badaukagu ρ(T ) = Inf {||T || : || · || norma naturala da}. Ondorioz,
2.17 Korolarioa.
x(0) ∈ Rn edozein bektoretarako, x(k+1) = T · x(k) + c (c = 0
izanik) iteraziozko metodoaz eraikitako segidak A · x = b sistemaren soluzio zehatzer-
antz konbergitzen du baldin eta soilik baldin existitzen bada || · || norma natural bat,
zeinerako ||T || < 1 baita.
Gainera, || · || edozein norma naturaltarako, honako bornaketa hauek dauzkagu:
• i) ||x − x(k)|| ≤ ||T ||k||x(0) − x||

2.6. Iteraziozko Teknikak
49
• ii) ||x − x
(k)|| ≤
||T ||k
1 − ||T ||
||x
(1) − x(0)||
Oharrak:
• Zenbat eta ||T || balioa txikien, orduan eta bizkorrago konbergituko du metodoak;
• Zenbat eta ρ
(T ) balioa txikien, orduan eta bizkorrago konbergituko du metodoak.
• Badaukagu ||x − x(k)|| ≤ ρ(T )k||x(0) − x||
2.18 Teorema.
A matrizea diagonal hertsiki menperatzaileduna bada, orduan x(0) ∈
Rn
edozein bektoretarako, Jacobi eta Gauss-Seidel metodoek A · x = b sistemaren
soluzio zehatzerantz konbergitzen dute.
Frogapena: Bakarrik frogatuko dugu Jacobi-ren metodorako:
||T ||∞ = max
i
n
j=1
|tij|
= max
i
n
j=1,j=i
|
aij
aii
|
= max
i
1
|aii|
n
j=1,j=i
|aij|,
eta A diagonal hertsiki menperatzaileduna denez,
n
j=1,j=i
|aij| < |aii|. Hortaz,
||T ||∞ < max
i
|aii|
|aii|
= 1
Amaitzeko, 2.17 korolarioa erabiliz, Jacobi metodoak konbergitzen duela ondorioz-
tatzen dugu.
♣
(ADIBIDEA)
2.19 Teorema.
A matrizea simetrikoa eta positiboki deﬁnitua bada, orduan x(0) ∈
Rn
edozein bektoretarako, Gauss-Seidel metodoak A · x = b sistemaren soluzio ze-
hatzerantz konbergitzen du.
(ADIBIDEA)

50
2. Kapitulua Ekuazio linealezko sistemen ebazpena
2.20 Teorema
(Stein-Rosenberg). aij ≤ 0 ∀i = j eta aii > 0 ∀i = 1, . . . , n
betetzen badira, orduan honako propietate hauen artean, bat eta soilik bat egiaztatzen
da:
i) 0 < ρ(TGS) < ρ(TJ) < 1;
ii) 1 < ρ(TJ) < ρ(TGS);
iii) ρ(TJ) = ρ(TGS) = 1;
iv) ρ(TJ) = ρ(TGS) = 0,
non TJ Jacobi metodoari dagokion iteraziozko matrizea den, eta TGS Gauss-Seidel
metodoari dagokiona.
Azken egoera hori tipikoa da ekuazio diferentzialen esparruan. Gertatzen denean,
teoremak dioenez, Jacobi metodoak kongergitzen duenean, Gauss-Seidel metodoak
ere konbergitzen du, bizkorrago.
(ADIBIDEA)
2.6.5
Lasaikuntza Teknikak
Gauss-Seidel metodoko ekuazioak berridazten baditugu x(k+1) = x
(k) + . . . eran,
ondorengoa lortzen dugu:
x
(k+1)
i
= x
(k)
i
+
1
aii
bi −
i−1
j=1
aijx
(k+1)
j
−
n
j=i
aijx
(k)
j
i = 1, . . . , n
bigarren batugaia interpretatu daiteke x
(k+1)
i
eta x
(k)
i
gaien arteko distantziatzat.
Zuzenketa hori alda dezakegu ω > 0 parametro batekin biderkatuz, honako hau
lortuz:
x
(k+1)
i
= x
(k)
i
+
ω
aii
bi −
i−1
j=1
aijx
(k+1)
j
−
n
j=i
aijx
(k)
j
i = 1, . . . , n
eta hortaz, erabiliko ditugun ekuazioak, lasaikuntza metodoari dagozkionak:
x
(k+1)
i
= (1 − ω)x
(k)
i
+
ω
aii
bi −
i−1
j=1
aijx
(k+1)
j
−
n
j=i+1
aijx
(k)
j
i = 1, . . . , n.

2.6. Iteraziozko Teknikak
51
• ω = 1 =⇒ Gauss-Seidel.
• ω > 1 =⇒ Lasaikuntzagaineko metodoa (S.O.R. = Sucessive Over Relaxation).
Erabili ohi da Gauss-Seidelek monotonoki konbergente denean, konbergentzia
bizkortzeko;
• ω < 1 =⇒ Azpilasaikuntza metodoa. Erabili ohi da Gauss-Seidelek konber-
gitzen ez duenean, edo oszilatzen duenean.
• Interpretazio matriziala Lasaikuntza metodoaren ekuazioen bi atalak aii-
rekin biderkatuz:
aiix
(k+1)
i
+ ω
i−1
j=1
aijx
(k+1)
j
= aii(1 − ω)x
(k)
i
+ ωbi −
n
j=i+1
ωaijx
(k)
j
Hortaz, A = D − B − G berriro hartuz,
(D − ωB)x(k+1) = ωb + [(1 − ω)D + ωG]x
(k)
eta iteraziozko ekuazioak:
x(k+1) = ω(D − ωB)−1b + (D − ωB)
−1 · [(1 − ω)D + ωG]x(k)
Iteraziozko matrizea Tω = (D − ωB)−1 · [(1 − ω)D + ωG] da.
2.21 Teorema
(Kahan). aii = 0 ∀i = 1, . . . , n bada, orduan ρ(Tω) ≥ |ω − 1|.
Hortaz, lasaikuntza teknika konbergentea izateko, 0 < ω < 2 izan behar du, derrig-
orrez.
2.22 Teorema
(Ostrowski-Reich). A matrizea simetrikoa, positiboki deﬁnitua bada
eta 0 < ω < 2 bada, orduan lasaikuntza metodoak konbergitzen du edozein x
(0) ∈ Rn
bektoretarako.
2.23 Teorema.
A matrizea simetrikoa, positiboki deﬁnitua bada eta gainera tridia-
gonal bada, orduan:
• i) ρ(TGS) = ρ(TJ)2 < 1;
• ii) lasaikuntza metodorako ω optimoa lor daiteke, eta honako hau da:
ωopt =
2
1 +
1 − ρ(TJ )2
=
2
1 +
1 − ρ(TGS)
.
Azken teorema honen baldintzetan, ρ(Tω) = ω − 1 da.
(ADIBIDEA)

52
2. Kapitulua Ekuazio linealezko sistemen ebazpena
